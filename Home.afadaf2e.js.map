{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCAA,EAAA,MAAA,CAAA,EAAA,gBAAA,IAAA,EAAA,OAAA,EACA,EAAA,MAAA,CAAA,EAAA,iBAAA,IAAA,EAAA,OAAA,EACA,EAAA,MAAA,CAAA,EAAA,QAAA,IAAA,EAAA,OAAA,EACA,EAAA,MAAA,CAAA,EAAA,gBAAA,IAAA,EAAA,OAAA,EAHA,IAAA,EAAA,EAAA,mB,E,E,c,C,GACA,EAAA,EAAA,oB,E,E,c,C,GACA,EAAA,EAAA,W,E,E,c,C,GACA,EAAA,EAAA,mB,E,E,c,C,E,E,C,kB,Q,mB,Q,U,Q,kB,Q,iD,O,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,G,I,E,E,qBCHA,EAAA,EAAA,SACA,EAAA,EAAA,oB,E,E,c,C,GACA,EAAA,EAAA,eACA,EAAA,EAAA,4BACA,EAAA,EAAA,kCACA,EAAA,EAAA,iB,E,E,c,C,GACA,EAAA,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CACV,CACF,CApTK,EAAA,G,A,G,A,G,A,EA2TnB,C,E,C,oB,Q,M,Q,mB,Q,c,Q,2B,Q,iC,Q,gB,Q,uB,Q,2B,Q,2B,Q,qB,Q,iB,Q,kB,Q,mB,Q,oB,Q,iB,Q,wB,Q,+B,Q,a,Q,gB,Q,6C,Q,iD,O,E,C,Q,C,W,E,C,E,C,M,C,W,E,C,E,C,Q,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,G,I,E,E,qBC9xCA,EAAA,EAAA,mBACA,EAAA,EAAA,c,E,E,c,C,GACA,EAAA,EAAA,c,E,E,c,C,GACA,EAAA,EAAA,c,E,E,c,C,GACA,EAAA,EAAA,c,E,E,c,C,GACA,EAAA,iBA0Be,EAAA,OAAA,CAnBQ,CAAC,CAAE,EAAA,CAAC,CAAE,UAAA,CAAS,CAAuB,IAC3D,IAAM,EAAW,AAAA,CAAA,EAAA,EAAA,iBAAiB,AAAjB,IAEX,EAAS,KACb,EAAS,IACX,EAEA,MACE,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MADH,C,S,CAEK,AAAc,MAAd,GAAqB,AAAc,MAAd,GAAqB,AAAc,MAAd,GACzC,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,OAAO,CADT,CACW,EAAG,EAAG,OAAQ,C,GAEzB,AAAc,MAAd,GAAqB,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,OAAQ,CAA9B,CAA+B,OAAQ,C,GACvC,AAAc,MAAd,GAAqB,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,OAAQ,CAA9B,CAA+B,OAAQ,C,GACvC,AAAc,MAAd,GAAqB,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,OAAQ,CAA9B,CAA+B,OAAQ,C,G,A,EAG9C,C,E,C,oB,Q,kB,Q,a,Q,a,Q,a,Q,a,Q,gB,Q,iD,O,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,G,I,E,E,qBC7BA,EAAA,EAAA,SACA,EAAA,EAAA,iB,E,E,c,C,GACA,EAAA,EAAA,mC,E,E,c,C,GACA,EAAA,EAAA,aAiDe,CAAA,EAAA,OAAA,CA1CE,CAAC,CAAE,EAAA,CAAC,CAAE,OAAA,CAAM,CAAS,IACpC,AAAA,C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QAAS,EACzC,SAAA,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,OAAD,CAAM,UAAU,mB,E,EAFX,EAAA,GAQb,GAAA,GAAM,OAAS,GACb,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,QADH,CACU,GAAG,GAAmB,CAC3B,SAAA,EAAK,GAAG,CAAC,CAAC,EAAK,KACd,EAAW,GACX,IAAM,EAAgB,GAAK,UAAkB,aACvC,EAAU,GAAK,UAAkB,SAQvC,OANI,GACF,WAAW,KACR,EAAI,QAAQ,CAAS,YAAY,CAAG,CAAA,CACvC,GAIA,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,KADH,CAGI,UAAW,EAAe,SAAW,GACpC,GAAG,EAAI,WAAW,EAAE,CACrB,QAAS,IAAM,GAAc,EAAW,EAAI,QAAQ,EAEnD,SAAA,EAAI,KAAK,CAAC,GAAG,CAAC,CAAC,EAAM,KACpB,IAAM,EAAuB,EAAM,MAAM,CAAS,KAAK,CACvD,MACE,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,KADH,CACmB,GAAG,EAAK,YAAY,EAAE,CAAE,MAAO,CAAE,GAAG,CAAK,AAAC,EACxD,SAAA,EAAK,MAAM,CAAC,OADN,EAAA,EAIb,EAZK,EAAA,EAAQ,EAenB,E,G,A,GAKP,CAAC,GAAa,GAAM,QAAU,GAAK,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAApC,CAAwC,UAAU,mBAAoB,SAAA,C,G,A,EAG7E,C,E,C,oB,Q,M,Q,c,Q,oB,Q,gB,Q,iC,Q,uB,Q,kB,Q,a,Q,gB,Q,iD,O,E,C,Q,C,S,C,C,C,C,C,C,C,ECtTE,EAAO,OAAO,CAAG,EAAQ,mB,E,C,iB,O,E,C,M,C,S,C,C,C,C,C,C,C,G,S,C,C,C,E,S,E,C,C,C,C,C,C,C,C,C,C,C,C,C,E,G,C,I,E,C,C,E,C,G,E,E,K,A,C,M,E,C,E,G,M,C,E,I,C,E,G,Q,O,C,G,I,C,E,E,C,S,E,C,E,O,W,I,E,I,C,E,U,O,I,Q,S,C,C,C,E,I,E,E,K,C,E,G,S,E,C,E,E,E,E,E,E,E,O,E,C,S,E,C,E,E,E,E,E,E,E,Q,E,C,E,K,E,E,C,C,S,I,M,A,C,E,O,M,E,S,C,E,I,I,E,E,E,U,M,C,I,C,I,E,S,C,E,C,I,I,K,E,O,S,C,c,C,I,C,E,I,C,C,C,E,C,C,C,E,A,C,C,O,C,C,E,K,C,I,C,U,C,S,E,C,C,C,E,G,A,M,E,M,C,E,I,E,E,E,C,E,E,O,I,C,G,I,E,E,E,E,M,C,I,E,C,C,E,C,E,O,C,I,G,C,C,C,E,C,C,C,E,A,E,O,C,C,S,E,C,E,I,E,A,S,C,C,C,E,G,A,U,O,G,A,O,E,O,E,I,E,C,C,O,W,C,C,G,A,K,I,E,C,I,E,E,I,C,E,G,W,G,A,U,O,E,O,C,O,A,U,+C,C,M,A,C,A,W,E,O,M,E,E,E,E,U,M,A,U,O,E,E,O,E,C,E,G,O,S,C,c,C,I,C,E,W,E,O,C,EECdgjB,IAAAA,EAAU,CACrBC,KAAM,MADe,EAIVC,EAAkB,SAAlBA,CAAAA,EAAkB,IAAA,EAAA,EAAGje,KAAH,CAAA,OAAA,AAAA,KAAA,IAAA,EAAW,GAAX,CAAA,EAClBoe,EAAgB,WAAA,OAAM,EAAA,aAAA,CAAA,EAAA,QAAA,CAAA,KAAA,IAAN,EAEhBE,EAAgB,CAC3BC,KAAMN,EACNle,MAAO,IACPye,SAAU,EACVC,SAAUX,OAAOY,gBAAjBD,AAJ2B,EAO7B,SAASE,IAAwB,IAAA,IAAA,EAAA,UAAA,MAAA,CAAVE,EAAU,AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAVA,CAAU,CAAVA,EAAAA,CAAAA,SAAAA,CAAAA,EAAAA,CACrB,OAAOA,EAASzT,MAAT,CAAgB,SAAC2T,CAAD,CAAQC,CAAR,EAAiB,IAC9B7Z,EAA8B6Z,EAA9B7Z,KAD8B,CACvBe,EAAuB8Y,EAAvB9Y,SADuB,CACT+Y,EADS,EACAD,EADA,CAAA,QAAA,YAAA,EAwBtC,OArBAD,EAAK,EAAA,CAAA,EACAA,EADA,CAAA,EAEAE,GAGD9Z,GACF4Z,CAAAA,EAAM5Z,KAAN,CAAc4Z,EAAM5Z,KAAN,CAAA,EAAA,CAAA,EACJ4Z,EAAM5Z,KAAN,EAAe,CAAA,EADX,CAAA,EACoBA,GAAS,CAAA,GACvCA,CAHN,EAMIe,GACF6Y,CAAAA,EAAM7Y,SAAN,CAAkB6Y,EAAM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","sources":["<anon>","src/components/organisms/index.tsx","src/components/organisms/ChainActivity/index.tsx","src/components/organisms/SearchNotFound/index.tsx","src/components/organisms/SearchNotFound/Error400/index.tsx","node_modules/@parcel/runtime-js/lib/runtime-d7ad1e79a7f55366.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","src/components/organisms/SearchNotFound/Error500/index.tsx","node_modules/@parcel/runtime-js/lib/runtime-9dc05ea0a7df1d19.js","node_modules/@parcel/runtime-js/lib/runtime-dda315c74498bed6.js","src/components/organisms/SearchNotFound/Error502/index.tsx","node_modules/@parcel/runtime-js/lib/runtime-82e803f2edbd31d7.js","src/components/organisms/SearchNotFound/Error503/index.tsx","node_modules/@parcel/runtime-js/lib/runtime-add98a5102652ac0.js","src/components/organisms/Table/index.tsx","node_modules/react-table/index.js","node_modules/react-table/dist/react-table.development.js","node_modules/react-table/src/publicUtils.js","node_modules/react-table/src/utils.js","node_modules/react-table/src/makeDefaultPluginHooks.js","node_modules/react-table/src/hooks/useColumnVisibility.js","node_modules/react-table/src/hooks/useTable.js","node_modules/react-table/src/plugin-hooks/useExpanded.js","node_modules/react-table/src/filterTypes.js","node_modules/react-table/src/plugin-hooks/useFilters.js","node_modules/react-table/src/plugin-hooks/useGlobalFilter.js","node_modules/react-table/src/aggregations.js","node_modules/react-table/src/plugin-hooks/useGroupBy.js","node_modules/react-table/src/sortTypes.js","node_modules/react-table/src/plugin-hooks/useSortBy.js","node_modules/react-table/src/plugin-hooks/usePagination.js","node_modules/react-table/src/plugin-hooks/_UNSTABLE_usePivotColumns.js","node_modules/react-table/src/plugin-hooks/useRowSelect.js","node_modules/react-table/src/plugin-hooks/useRowState.js","node_modules/react-table/src/plugin-hooks/useColumnOrder.js","node_modules/react-table/src/plugin-hooks/useResizeColumns.js","node_modules/react-table/src/plugin-hooks/useAbsoluteLayout.js","node_modules/react-table/src/plugin-hooks/useBlockLayout.js","node_modules/react-table/src/plugin-hooks/useFlexLayout.js","node_modules/react-table/src/plugin-hooks/useGridLayout.js","src/components/organisms/TokenActivity/index.tsx","src/components/organisms/TokenActivity/Chart.tsx"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"lKAW4\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"ChainActivity\", ()=>(0, _chainActivityDefault.default));\nparcelHelpers.export(exports, \"SearchNotFound\", ()=>(0, _searchNotFoundDefault.default));\nparcelHelpers.export(exports, \"Table\", ()=>(0, _tableDefault.default));\nparcelHelpers.export(exports, \"TokenActivity\", ()=>(0, _tokenActivityDefault.default));\nvar _chainActivity = require(\"./ChainActivity\");\nvar _chainActivityDefault = parcelHelpers.interopDefault(_chainActivity);\nvar _searchNotFound = require(\"./SearchNotFound\");\nvar _searchNotFoundDefault = parcelHelpers.interopDefault(_searchNotFound);\nvar _table = require(\"./Table\");\nvar _tableDefault = parcelHelpers.interopDefault(_table);\nvar _tokenActivity = require(\"./TokenActivity\");\nvar _tokenActivityDefault = parcelHelpers.interopDefault(_tokenActivity);\n\n},{\"./ChainActivity\":\"jrd36\",\"./SearchNotFound\":\"3Vzfp\",\"./Table\":\"hREdT\",\"./TokenActivity\":\"7VEW8\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"jrd36\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _reactApexcharts = require(\"react-apexcharts\");\nvar _reactApexchartsDefault = parcelHelpers.interopDefault(_reactApexcharts);\nvar _reactQuery = require(\"react-query\");\nvar _sdk = require(\"@wormhole-foundation/sdk\");\nvar _environmentContext = require(\"src/context/EnvironmentContext\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nvar _atoms = require(\"src/components/atoms\");\nvar _molecules = require(\"src/components/molecules\");\nvar _apexChartUtils = require(\"src/utils/apexChartUtils\");\nvar _wormhole = require(\"src/utils/wormhole\");\nvar _client = require(\"src/api/Client\");\nvar _hooks = require(\"src/utils/hooks\");\nvar _number = require(\"src/utils/number\");\nvar _generic = require(\"src/icons/generic\");\nvar _date = require(\"src/utils/date\");\nvar _filterUtils = require(\"src/utils/filterUtils\");\nvar _chainActivityUtils = require(\"src/utils/chainActivityUtils\");\nvar _consts = require(\"src/consts\");\nvar _stylesScss = require(\"./styles.scss\");\nvar _reactDatepickerCss = require(\"react-datepicker/dist/react-datepicker.css\");\nconst TYPE_CHART_LIST = [\n    {\n        label: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.ActivityIcon), {\n            width: 24\n        }),\n        value: \"area\",\n        ariaLabel: \"Area\"\n    },\n    {\n        label: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.AnalyticsIcon), {\n            width: 24\n        }),\n        value: \"bar\",\n        ariaLabel: \"Bar\"\n    }\n];\nconst SCALE_CHART_LIST = [\n    {\n        label: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.LogarithmicIcon), {\n            width: 22\n        }),\n        value: \"logarithmic\",\n        ariaLabel: \"Logarithmic\"\n    },\n    {\n        label: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.LinearIcon), {\n            width: 22\n        }),\n        value: \"linear\",\n        ariaLabel: \"Linear\"\n    }\n];\nconst SCALE_CHART_LIST_TEXT = [\n    {\n        label: \"Logarithmic\",\n        value: \"logarithmic\",\n        ariaLabel: \"Logarithmic\"\n    },\n    {\n        label: \"Linear\",\n        value: \"linear\",\n        ariaLabel: \"Linear\"\n    }\n];\nconst METRIC_CHART_LIST = [\n    {\n        label: \"Volume\",\n        value: \"volume\",\n        ariaLabel: \"Volume\"\n    },\n    {\n        label: \"Transfers\",\n        value: \"transactions\",\n        ariaLabel: \"Transfers\"\n    }\n];\nconst ChainActivity = ()=>{\n    const { width } = (0, _hooks.useWindowSize)();\n    const isTablet = width >= (0, _consts.BREAKPOINTS).tablet;\n    const isDesktop = width >= (0, _consts.BREAKPOINTS).desktop;\n    const isBigDesktop = width >= (0, _consts.BREAKPOINTS).bigDesktop;\n    const { environment } = (0, _environmentContext.useEnvironment)();\n    const currentNetwork = environment.network;\n    const isMainnet = currentNetwork === \"Mainnet\";\n    const chartRef = (0, _react.useRef)(null);\n    const [someZeroValue, setSomeZeroValue] = (0, _react.useState)(false);\n    const [chartSelected, setChartSelected] = (0, _react.useState)(\"area\");\n    const [isLoading, setIsLoading] = (0, _react.useState)(true);\n    const [scaleSelected, setScaleSelectedState] = (0, _react.useState)(\"linear\");\n    const setScaleSelected = (value, track)=>{\n        setScaleSelectedState(value);\n        if (track) (0, _analyticsDefault.default).track(\"scaleSelected\", {\n            selected: value,\n            selectedType: \"chainActivity\"\n        });\n    };\n    const [metricSelected, setMetricSelected] = (0, _react.useState)(\"volume\");\n    const initialDataDate = new Date(new Date().setFullYear(new Date().getFullYear() - 1));\n    const [startDate, setStartDate] = (0, _react.useState)(initialDataDate);\n    const [endDate, setEndDate] = (0, _react.useState)(new Date());\n    const [startDateDisplayed, setStartDateDisplayed] = (0, _react.useState)(initialDataDate);\n    const [endDateDisplayed, setEndDateDisplayed] = (0, _react.useState)(new Date());\n    const [showAllSourceChains, setShowAllSourceChains] = (0, _react.useState)(true);\n    const [showAllTargetChains, setShowAllTargetChains] = (0, _react.useState)(true);\n    const [allChainsSerie, setAllChainsSerie] = (0, _react.useState)([]);\n    const [series, setSeries] = (0, _react.useState)([]);\n    const [messagesNumber, setMessagesNumber] = (0, _react.useState)(0);\n    const [allMessagesNumber, setAllMessagesNumber] = (0, _react.useState)(0);\n    const [volumeNumber, setVolumeNumber] = (0, _react.useState)(0);\n    const [allVolumeNumber, setAllVolumeNumber] = (0, _react.useState)(0);\n    const [lastBtnSelected, setLastBtnSelected] = (0, _react.useState)(\"year\");\n    const [openFilters, setOpenFilters] = (0, _react.useState)(false);\n    const timeRangeData = series?.[0]?.data || [];\n    const fromDateFormatted = (0, _date.toLocaleDate)(timeRangeData[0]?.x);\n    const toDateFormatted = (0, _date.toLocaleDate)(timeRangeData[timeRangeData.length - 1]?.to);\n    (0, _hooks.useLockBodyScroll)({\n        isLocked: !isDesktop && openFilters,\n        scrollableClasses: [\n            \"select__option\",\n            \"show-date\"\n        ]\n    });\n    const orderedChains = isMainnet ? (0, _filterUtils.ChainFilterMainnet) : (0, _filterUtils.ChainFilterTestnet);\n    const ALL_SOURCE_CHAINS = {\n        label: \"All Chains\",\n        value: \"All Chains\",\n        icon: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.GlobeIcon), {\n            width: 24,\n            style: {\n                color: \"#fff\"\n            }\n        }),\n        showMinus: !showAllSourceChains,\n        disabled: false\n    };\n    const ALL_TARGET_CHAINS = {\n        label: \"All Chains\",\n        value: \"All Chains\",\n        icon: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.GlobeIcon), {\n            width: 24,\n            style: {\n                color: \"#fff\"\n            }\n        }),\n        showMinus: !showAllTargetChains,\n        disabled: false\n    };\n    const [sourceChainListSelected, setSourceChainListSelected] = (0, _react.useState)([\n        ALL_SOURCE_CHAINS\n    ]);\n    const [targetChainListSelected, setTargetChainListSelected] = (0, _react.useState)([\n        ALL_TARGET_CHAINS\n    ]);\n    const SOURCE_CHAIN_LIST = [\n        ALL_SOURCE_CHAINS,\n        ...orderedChains.map((chainId)=>({\n                label: (0, _wormhole.getChainName)({\n                    network: currentNetwork,\n                    chainId: chainId\n                }),\n                value: `${chainId}`,\n                icon: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                    background: \"var(--color-white-10)\",\n                    chainId: chainId,\n                    className: \"chain-icon\",\n                    colorless: true,\n                    lazy: false,\n                    network: currentNetwork,\n                    size: 24\n                }),\n                showMinus: false,\n                disabled: sourceChainListSelected.length >= 10 && !sourceChainListSelected.some((item)=>+item.value === chainId)\n            }))\n    ];\n    const TARGET_CHAIN_LIST = [\n        ALL_TARGET_CHAINS,\n        ...orderedChains.map((chainId)=>({\n                label: (0, _wormhole.getChainName)({\n                    network: currentNetwork,\n                    chainId: chainId\n                }),\n                value: `${chainId}`,\n                icon: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                    background: \"var(--color-white-10)\",\n                    chainId: chainId,\n                    className: \"chain-icon\",\n                    colorless: true,\n                    lazy: false,\n                    network: currentNetwork,\n                    size: 24\n                }),\n                showMinus: false,\n                disabled: targetChainListSelected.length >= 10 && !targetChainListSelected.some((item)=>+item.value === chainId)\n            }))\n    ];\n    const [filters, setFilters] = (0, _react.useState)({\n        from: startDate?.toISOString(),\n        to: endDate?.toISOString(),\n        timespan: \"1mo\",\n        sourceChain: [],\n        targetChain: [],\n        appId: \"\"\n    });\n    const isUTC00 = new Date().getTimezoneOffset() === 0;\n    const isUTCPositive = new Date().getTimezoneOffset() < 0;\n    const tickAmount = allChainsSerie?.[0]?.data?.length > 0 ? isBigDesktop ? Math.min(allChainsSerie[0].data.length, 18) : isTablet ? Math.min(allChainsSerie[0].data.length, 10) : 4 : null;\n    const lastTrackedObjectRef = (0, _react.useRef)(null);\n    const trackAnalytics = ()=>{\n        const objectToSend = {\n            network: currentNetwork,\n            selectedType: metricSelected,\n            selectedTimeRange: lastBtnSelected.toUpperCase(),\n            chain: (filters.sourceChain?.length > 0 ? filters.sourceChain.map((chain)=>(0, _wormhole.getChainName)({\n                    network: currentNetwork,\n                    chainId: +chain\n                })).join(\", \") : \"Unset\") + (filters.targetChain?.length > 0 ? \" -> \" + filters.targetChain.map((chain)=>(0, _wormhole.getChainName)({\n                    network: currentNetwork,\n                    chainId: +chain\n                })).join(\", \") : \"\")\n        };\n        // Check if the new objectToSend is different from the last tracked object\n        if (JSON.stringify(objectToSend) !== JSON.stringify(lastTrackedObjectRef.current)) {\n            (0, _analyticsDefault.default).track(\"chainActivity\", objectToSend);\n            lastTrackedObjectRef.current = objectToSend;\n        }\n    };\n    const { data: dataAllChains, isError: isErrorAllChains, isFetching: isFetchingAllChains } = (0, _reactQuery.useQuery)([\n        \"getChainActivity\",\n        filters.from,\n        filters.to,\n        filters.targetChain,\n        filters.appId\n    ], ()=>{\n        trackAnalytics();\n        return (0, _client.getClient)().guardianNetwork.getChainActivity({\n            from: filters.from,\n            to: filters.to,\n            timespan: filters.timespan,\n            sourceChain: [],\n            targetChain: filters.targetChain,\n            appId: filters.appId\n        });\n    });\n    const { data, isError, isFetching } = (0, _reactQuery.useQuery)([\n        \"getChainActivity\",\n        filters\n    ], ()=>{\n        if (filters?.sourceChain?.length === 0) return Promise.resolve([]);\n        trackAnalytics();\n        return (0, _client.getClient)().guardianNetwork.getChainActivity({\n            from: filters.from,\n            to: filters.to,\n            timespan: filters.timespan,\n            sourceChain: filters.sourceChain,\n            targetChain: filters.targetChain,\n            appId: filters.appId\n        });\n    });\n    const getDateList = (0, _react.useCallback)(()=>{\n        let start = new Date(filters.from);\n        let end = new Date(filters.to);\n        const dateList = [];\n        const dateDifferenceInDays = (0, _date.calculateDateDifferenceInDays)(start, end);\n        if (dateDifferenceInDays < (0, _chainActivityUtils.SHORT_TIMESPAN_LIMIT)) {\n            start.setUTCHours(start.getUTCHours(), 0, 0, 0);\n            end.setUTCHours(end.getUTCHours(), 0, 0, 0);\n            while(start < end){\n                dateList.push(start.toISOString());\n                start.setUTCHours(start.getUTCHours() + 1, 0, 0, 0);\n            }\n        } else if (dateDifferenceInDays < (0, _chainActivityUtils.MEDIUM_TIMESPAN_LIMIT)) {\n            start = (0, _date.startOfDayUTC)(start);\n            start.setUTCHours(0, 0, 0, 0);\n            while(start < end && (isUTC00 ? true : start.getTime() < end.getTime() - (0, _chainActivityUtils.DAY_IN_MILLISECONDS)) && start.getTime() < new Date().getTime() - (0, _chainActivityUtils.DAY_IN_MILLISECONDS)){\n                dateList.push(start.toISOString());\n                start.setUTCDate(start.getUTCDate() + 1);\n            }\n        } else {\n            start = (0, _date.startOfMonthUTC)(start);\n            start.setUTCHours(0, 0, 0, 0);\n            end = (0, _date.startOfMonthUTC)(end);\n            end.setUTCHours(0, 0, 0, 0);\n            const lastMonthRemoved = new Date();\n            lastMonthRemoved.setMonth(lastMonthRemoved.getMonth() - 1);\n            while(start.getTime() < end.getTime() && (!isUTC00 && !isUTCPositive ? !(start.getFullYear() === new Date().getFullYear() && start.getMonth() === lastMonthRemoved.getMonth()) : true)){\n                dateList.push(start.toISOString());\n                start.setUTCMonth(start.getUTCMonth() + 1);\n            }\n        }\n        return dateList;\n    }, [\n        filters.from,\n        filters.to,\n        isUTC00,\n        isUTCPositive\n    ]);\n    const handleChainSelection = (value, type)=>{\n        if (type === \"source\") {\n            if (value.length === 0 && sourceChainListSelected.length === 1 && sourceChainListSelected[0].value === \"All Chains\") return;\n            const lastChainSelected = value?.[value.length - 1]?.value;\n            if (value.length === 0 || lastChainSelected === \"All Chains\") value = [\n                SOURCE_CHAIN_LIST[0]\n            ];\n            else value = value.filter((item)=>item.value !== \"All Chains\");\n            setSourceChainListSelected(value);\n            const chainsSelected = value.map((item)=>item.value);\n            const chainsSelectedWithoutAll = chainsSelected.filter((chain)=>chain !== \"All Chains\");\n            const isAllChainsSelected = chainsSelected.includes(\"All Chains\");\n            if (isAllChainsSelected) setShowAllSourceChains(true);\n            else setShowAllSourceChains(false);\n            setFilters({\n                ...filters,\n                sourceChain: chainsSelectedWithoutAll\n            });\n        } else if (type === \"target\") {\n            if (value.length === 0 && targetChainListSelected.length === 1 && targetChainListSelected[0].value === \"All Chains\") return;\n            const lastChainSelected = value?.[value.length - 1]?.value;\n            if (value.length === 0 || lastChainSelected === \"All Chains\") value = [\n                TARGET_CHAIN_LIST[0]\n            ];\n            else value = value.filter((item)=>item.value !== \"All Chains\");\n            setTargetChainListSelected(value);\n            const chainsSelected = value.map((item)=>item.value);\n            const chainsSelectedWithoutAll = chainsSelected.filter((chain)=>chain !== \"All Chains\");\n            const isAllChainsSelected = chainsSelected.includes(\"All Chains\");\n            if (isAllChainsSelected) setShowAllTargetChains(true);\n            else setShowAllTargetChains(false);\n            setFilters({\n                ...filters,\n                targetChain: chainsSelectedWithoutAll\n            });\n        }\n    };\n    const handleFiltersOpened = ()=>{\n        setOpenFilters((prev)=>!prev);\n    };\n    const applyFilters = ()=>{\n        setOpenFilters(false);\n    };\n    const resetFilters = ()=>{\n        setStartDate(initialDataDate);\n        setEndDate(new Date());\n        setStartDateDisplayed(initialDataDate);\n        setEndDateDisplayed(new Date());\n        setLastBtnSelected(\"year\");\n        setShowAllSourceChains(true);\n        setShowAllTargetChains(true);\n        setSourceChainListSelected([\n            ALL_SOURCE_CHAINS\n        ]);\n        setTargetChainListSelected([\n            ALL_TARGET_CHAINS\n        ]);\n        setFilters({\n            from: initialDataDate?.toISOString(),\n            to: new Date()?.toISOString(),\n            timespan: \"1mo\",\n            sourceChain: [],\n            targetChain: [],\n            appId: \"\"\n        });\n        setOpenFilters(false);\n    };\n    (0, _react.useEffect)(()=>{\n        if (startDate && endDate) {\n            const dateDifferenceInDays = (0, _date.calculateDateDifferenceInDays)(startDate, endDate);\n            const timespan = dateDifferenceInDays < (0, _chainActivityUtils.SHORT_TIMESPAN_LIMIT) ? \"1h\" : dateDifferenceInDays < (0, _chainActivityUtils.MEDIUM_TIMESPAN_LIMIT) ? \"1d\" : \"1mo\";\n            const newFrom = new Date(startDate);\n            timespan === \"1d\" ? newFrom.setDate(isUTC00 ? newFrom.getDate() : newFrom.getDate() + 1) : timespan === \"1mo\" && newFrom.setMonth(isUTC00 || isUTCPositive ? newFrom.getMonth() : newFrom.getMonth() + 1);\n            const newTo = new Date(endDate);\n            timespan === \"1d\" && !isUTC00 ? newTo.setDate(newTo.getDate() + 1) : timespan === \"1mo\" && !isUTCPositive && !isUTC00 && newTo.setMonth(newTo.getMonth() + 1);\n            setStartDateDisplayed(startDate);\n            setEndDateDisplayed(endDate);\n            setFilters((prevFilters)=>({\n                    ...prevFilters,\n                    from: newFrom.toISOString(),\n                    to: newTo.toISOString(),\n                    timespan: timespan\n                }));\n        }\n    }, [\n        endDate,\n        isUTC00,\n        isUTCPositive,\n        startDate\n    ]);\n    (0, _react.useEffect)(()=>{\n        if (dataAllChains) {\n            const groupDataByDate = (data)=>{\n                return data.reduce((acc, curr)=>{\n                    const key = `${curr.from}-${curr.to}`;\n                    if (!acc[key]) acc[key] = {\n                        from: curr.from.slice(0, -1) + \".000Z\",\n                        to: curr.to,\n                        emitter_chain: \"allChains\",\n                        volume: 0,\n                        count: 0,\n                        details: []\n                    };\n                    acc[key].volume += curr.volume / 10 ** 8;\n                    acc[key].count += curr.count;\n                    const index = metricSelected === \"transactions\" ? acc[key].details.findIndex((detail)=>detail.count < curr.count) : acc[key].details.findIndex((detail)=>detail.volume < curr.volume / 10 ** 8);\n                    const detail = {\n                        emitter_chain: curr.emitter_chain,\n                        volume: curr.volume / 10 ** 8,\n                        count: curr.count\n                    };\n                    if (index === -1) acc[key].details.push(detail);\n                    else acc[key].details.splice(index, 0, detail);\n                    return acc;\n                }, {});\n            };\n            const groupedByDate = groupDataByDate(dataAllChains);\n            const totalVolumeAndCountPerDay = Object.values(groupedByDate);\n            const seriesForAllChains = [\n                {\n                    name: \"All Chains\",\n                    data: totalVolumeAndCountPerDay.map((item)=>({\n                            x: item.from,\n                            y: metricSelected === \"transactions\" ? item.count : item.volume,\n                            to: item.to,\n                            volume: item.volume,\n                            count: item.count,\n                            emitter_chain: item.emitter_chain,\n                            details: item.details,\n                            color: \"var(--color-lime)\"\n                        })),\n                    color: \"var(--color-lime)\"\n                }\n            ];\n            const dateList = getDateList();\n            const completeData = dateList.reduce((obj, date)=>{\n                obj[date] = {\n                    color: \"#fff\",\n                    count: 0,\n                    details: [],\n                    emitter_chain: \"allChains\",\n                    volume: 0,\n                    to: (0, _date.getNextDate)(date, filters.timespan),\n                    x: date,\n                    y: 0\n                };\n                return obj;\n            }, {});\n            seriesForAllChains[0].data.forEach((item)=>{\n                completeData[item.x] = item;\n            });\n            seriesForAllChains[0].data = Object.values(completeData);\n            seriesForAllChains[0].data.sort((a, b)=>new Date(a.x).getTime() - new Date(b.x).getTime());\n            const totalMessages = dataAllChains.reduce((acc, item)=>acc + item.count, 0);\n            const totalVolume = dataAllChains.reduce((acc, item)=>acc + item.volume, 0);\n            setAllMessagesNumber(totalMessages);\n            setAllVolumeNumber(totalVolume / 10 ** 8);\n            setAllChainsSerie(seriesForAllChains);\n        }\n    }, [\n        dataAllChains,\n        filters.timespan,\n        getDateList,\n        metricSelected\n    ]);\n    (0, _react.useEffect)(()=>{\n        if (!data) return;\n        setIsLoading(true);\n        const dataByChain = {};\n        const allDates = {};\n        const chainIndices = {};\n        sourceChainListSelected.forEach((chain, i)=>{\n            chainIndices[chain.value] = i;\n        });\n        // Group by emitter_chain and extract all dates\n        data.forEach((item)=>{\n            // formatDate to add milliseconds and match dates when using .toISOString()\n            const formatDate = item.from.slice(0, -1) + \".000Z\";\n            if (!dataByChain[item.emitter_chain]) dataByChain[item.emitter_chain] = [];\n            dataByChain[item.emitter_chain].push({\n                x: formatDate,\n                y: metricSelected === \"transactions\" ? item.count : item.volume / 10 ** 8,\n                to: item.to,\n                volume: item.volume / 10 ** 8,\n                count: item.count,\n                emitter_chain: item.emitter_chain,\n                color: (0, _chainActivityUtils.colors)[chainIndices[item.emitter_chain]] || \"#fff\"\n            });\n            allDates[formatDate] = true;\n        });\n        const selectedChains = filters?.sourceChain?.length > 0 ? filters.sourceChain : [];\n        const dateList = getDateList();\n        // When there were no movements in that time range, the endpoint does not bring\n        // information for that chain, so we need to add it manually\n        selectedChains.forEach((chain)=>{\n            dataByChain[chain] = dateList.map((date)=>{\n                const existingData = dataByChain[chain]?.find((item)=>item.x === date);\n                return existingData || {\n                    x: date,\n                    y: 0,\n                    to: (0, _date.getNextDate)(date, filters.timespan),\n                    volume: 0,\n                    count: 0,\n                    emitter_chain: chain,\n                    color: (0, _chainActivityUtils.colors)[chainIndices[chain]] || \"#fff\"\n                };\n            });\n        });\n        // Sort by date\n        Object.keys(dataByChain).forEach((chain)=>{\n            Object.keys(allDates).forEach((date)=>{\n                if (!dataByChain[chain].some((item)=>item.x === date)) dataByChain[chain].push({\n                    x: date,\n                    y: 0,\n                    volume: 0,\n                    count: 0,\n                    emitter_chain: chain\n                });\n            });\n            dataByChain[chain].sort((a, b)=>new Date(a.x).getTime() - new Date(b.x).getTime());\n        });\n        const newSeries = Object.keys(dataByChain).map((chain)=>{\n            return {\n                name: (0, _wormhole.getChainName)({\n                    network: currentNetwork,\n                    chainId: +chain\n                }),\n                data: dataByChain[chain],\n                color: (0, _chainActivityUtils.colors)[chainIndices[chain]] || \"#fff\"\n            };\n        }).sort((a, b)=>a.name.localeCompare(b.name));\n        const sumOfMessages = data.reduce((acc, item)=>acc + item.count, 0);\n        setMessagesNumber(sumOfMessages);\n        const sumOfVolume = data.reduce((acc, item)=>acc + item.volume, 0);\n        setVolumeNumber(sumOfVolume / 10 ** 8);\n        if (showAllSourceChains) setSeries([\n            ...allChainsSerie,\n            ...newSeries\n        ]);\n        else setSeries(newSeries);\n    }, [\n        allChainsSerie,\n        sourceChainListSelected,\n        currentNetwork,\n        data,\n        filters.sourceChain,\n        getDateList,\n        metricSelected,\n        showAllSourceChains,\n        filters.timespan\n    ]);\n    (0, _react.useEffect)(()=>{\n        if (!isMainnet) setMetricSelected(\"transactions\");\n    }, [\n        isMainnet\n    ]);\n    (0, _react.useEffect)(()=>{\n        const checkForZeroValues = (obj, path = \"\")=>{\n            let hasZeroValue = false;\n            let hasNonZeroValue = false;\n            const checkValue = (value, currentPath)=>{\n                if (typeof value === \"object\" && value !== null) Object.entries(value).forEach(([key, val])=>{\n                    const newPath = currentPath ? `${currentPath}.${key}` : key;\n                    checkValue(val, newPath);\n                });\n                else if (value === 0) hasZeroValue = true;\n                else if (typeof value === \"number\" && value !== 0) hasNonZeroValue = true;\n            };\n            checkValue(obj, path);\n            return {\n                hasZeroValue,\n                hasNonZeroValue\n            };\n        };\n        let seriesHasZeroValue = false;\n        let seriesHasNonZeroValue = false;\n        series.forEach((seriesItem, index)=>{\n            const { hasZeroValue, hasNonZeroValue } = checkForZeroValues(seriesItem, `series[${index}]`);\n            seriesHasZeroValue = seriesHasZeroValue || hasZeroValue;\n            seriesHasNonZeroValue = seriesHasNonZeroValue || hasNonZeroValue;\n        });\n        setSomeZeroValue(seriesHasZeroValue);\n        if (seriesHasZeroValue) setScaleSelected(\"linear\", false);\n        else if (seriesHasNonZeroValue) setScaleSelected(\"logarithmic\", false);\n        setIsLoading(false);\n    }, [\n        series\n    ]);\n    const fullscreenBtnRef = (0, _react.useRef)(null);\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _atoms.Fullscreenable), {\n        className: \"chain-activity\",\n        buttonRef: fullscreenBtnRef,\n        itemName: \"chainActivity\",\n        children: [\n            openFilters && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"chain-activity-bg\",\n                onClick: handleFiltersOpened\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h2\", {\n                className: \"chain-activity-title\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.AnalyticsIcon), {\n                        width: 24\n                    }),\n                    \" Chains Transfers\",\n                    \" \",\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"chain-activity-title-fullscreen\",\n                        ref: fullscreenBtnRef,\n                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.FullscreenIcon), {\n                            width: 20\n                        })\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"chain-activity-chart\",\n                ref: chartRef,\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"chain-activity-chart-top\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"button\", {\n                                className: \"chain-activity-chart-top-mobile-filters-btn\",\n                                onClick: handleFiltersOpened,\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.FilterListIcon), {\n                                        width: 24\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                        className: \"chain-activity-chart-top-mobile-filters-btn-txt\",\n                                        children: \"Filters\"\n                                    }),\n                                    filters.sourceChain.length > 0 && filters.targetChain.length > 0 && filters.appId !== \"\" ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Counter), {\n                                        children: \"3\"\n                                    }) : filters.sourceChain.length > 0 && filters.targetChain.length > 0 ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Counter), {\n                                        children: \"2\"\n                                    }) : filters.sourceChain.length > 0 ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Counter), {\n                                        children: \"1\"\n                                    }) : \"\"\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: `chain-activity-chart-top-filters ${openFilters ? \"open\" : \"\"}`,\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                        className: \"chain-activity-chart-top-filters-title\",\n                                        children: [\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"p\", {\n                                                children: \"Filters\"\n                                            }),\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                                                onClick: handleFiltersOpened,\n                                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.CrossIcon), {\n                                                    width: 24\n                                                })\n                                            })\n                                        ]\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.Calendar), {\n                                        className: \"chain-activity-chart-top-filters-calendar\",\n                                        startDate: startDate,\n                                        setStartDate: setStartDate,\n                                        endDate: endDate,\n                                        setEndDate: setEndDate,\n                                        lastBtnSelected: lastBtnSelected,\n                                        setLastBtnSelected: setLastBtnSelected,\n                                        startDateDisplayed: startDateDisplayed,\n                                        endDateDisplayed: endDateDisplayed,\n                                        isDesktop: isDesktop,\n                                        showDateRange: true\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Select), {\n                                        ariaLabel: \"Select Chains\",\n                                        className: \"chain-activity-chart-top-filters-select\",\n                                        items: SOURCE_CHAIN_LIST,\n                                        menuFixed: !isDesktop,\n                                        menuListStyles: {\n                                            maxHeight: isDesktop ? 264 : 180\n                                        },\n                                        name: \"sourceChain\",\n                                        onValueChange: (value)=>handleChainSelection(value, \"source\"),\n                                        text: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"chain-activity-chart-top-filters-select-text\",\n                                            children: [\n                                                filters.sourceChain.length > 0 && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Counter), {\n                                                    children: filters.sourceChain.length\n                                                }),\n                                                \"Source \",\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                                    className: \"hidden-desktop-1180\",\n                                                    children: \"chain\"\n                                                })\n                                            ]\n                                        }),\n                                        type: \"searchable\",\n                                        value: sourceChainListSelected\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Select), {\n                                        ariaLabel: \"Select Chains\",\n                                        className: \"chain-activity-chart-top-filters-select\",\n                                        items: TARGET_CHAIN_LIST,\n                                        menuFixed: !isDesktop,\n                                        menuListStyles: {\n                                            maxHeight: isDesktop ? 264 : 180\n                                        },\n                                        name: \"targetChain\",\n                                        onValueChange: (value)=>handleChainSelection(value, \"target\"),\n                                        text: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"chain-activity-chart-top-filters-select-text\",\n                                            children: [\n                                                filters?.targetChain?.length > 0 && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Counter), {\n                                                    children: filters.targetChain.length\n                                                }),\n                                                \"Target \",\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                                    className: \"hidden-desktop-1180\",\n                                                    children: \"chain\"\n                                                })\n                                            ]\n                                        }),\n                                        type: \"searchable\",\n                                        value: targetChainListSelected\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                        ariaLabel: \"Select type\",\n                                        className: \"chain-activity-chart-top-filters-toggle-metric\",\n                                        items: isMainnet ? METRIC_CHART_LIST : [\n                                            METRIC_CHART_LIST[1]\n                                        ],\n                                        onValueChange: (value)=>{\n                                            setMetricSelected(value);\n                                            (0, _analyticsDefault.default).track(\"metricSelected\", {\n                                                network: currentNetwork,\n                                                selected: value,\n                                                selectedType: \"chainActivity\"\n                                            });\n                                        },\n                                        value: metricSelected\n                                    }),\n                                    !isDesktop && chartSelected === \"area\" && !someZeroValue && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                        ariaLabel: \"Select scale\",\n                                        className: \"chain-activity-chart-top-filters-toggle-metric\",\n                                        items: SCALE_CHART_LIST_TEXT,\n                                        onValueChange: (value)=>setScaleSelected(value, true),\n                                        value: scaleSelected\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                        className: \"chain-activity-chart-top-filters-buttons\",\n                                        children: [\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                                                className: \"apply-btn\",\n                                                onClick: applyFilters,\n                                                children: \"Apply Filters\"\n                                            }),\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                                                className: \"reset-btn\",\n                                                disabled: filters.sourceChain.length === 0 && filters.targetChain.length === 0 && lastBtnSelected === \"year\",\n                                                onClick: resetFilters,\n                                                children: \"Reset Filters\"\n                                            })\n                                        ]\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                        className: `chain-activity-chart-top-filters-legends ${isFetching || isFetchingAllChains || isError || isErrorAllChains ? \"hidden\" : \"\"}`,\n                                        children: [\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                                className: \"chain-activity-chart-top-filters-legends-container\",\n                                                children: [\n                                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                                        children: \"Source: \"\n                                                    }),\n                                                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                                        className: \"chain-activity-chart-top-filters-legends-container-total\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"span\", {\n                                                                children: [\n                                                                    lastBtnSelected === \"24h\" ? \"Daily\" : lastBtnSelected === \"week\" ? \"Weekly\" : lastBtnSelected === \"month\" ? \"Monthly\" : lastBtnSelected === \"year\" ? \"Yearly\" : lastBtnSelected === \"custom\" ? \"\" : \"All Time\",\n                                                                    \" \",\n                                                                    \"Total \",\n                                                                    metricSelected === \"transactions\" ? \"Transfers\" : \"Volume\",\n                                                                    \":\",\n                                                                    \" \"\n                                                                ]\n                                                            }),\n                                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"p\", {\n                                                                children: metricSelected === \"transactions\" ? showAllSourceChains ? (0, _number.formatNumber)(allMessagesNumber, 0) : (0, _number.formatNumber)(messagesNumber, 0) : `${showAllSourceChains ? (0, _number.formatNumber)(allVolumeNumber, 0) : (0, _number.formatNumber)(volumeNumber, 0)}`\n                                                            })\n                                                        ]\n                                                    })\n                                                ]\n                                            }),\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                                className: \"chain-activity-chart-top-filters-legends-target\",\n                                                children: [\n                                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                                        children: \"Target: \"\n                                                    }),\n                                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                        className: \"chain-activity-chart-top-filters-legends-target-chains\",\n                                                        children: filters?.targetChain?.length > 0 ? filters.targetChain.map((chain)=>{\n                                                            return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                                children: (0, _wormhole.getChainName)({\n                                                                    network: currentNetwork,\n                                                                    chainId: +chain\n                                                                })\n                                                            }, chain);\n                                                        }) : \"All Chains\"\n                                                    })\n                                                ]\n                                            })\n                                        ]\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"chain-activity-chart-top-filters-design\",\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                        ariaLabel: \"Select type\",\n                                        items: TYPE_CHART_LIST,\n                                        onValueChange: (value)=>{\n                                            setChartSelected(value);\n                                            (0, _analyticsDefault.default).track(\"chainActivityChartType\", {\n                                                network: currentNetwork,\n                                                selected: value\n                                            });\n                                        },\n                                        type: \"secondary\",\n                                        value: chartSelected\n                                    }),\n                                    isDesktop && chartSelected === \"area\" && !someZeroValue && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                        ariaLabel: \"Select scale\",\n                                        className: `chain-activity-chart-scale ${isMainnet ? \"\" : \"is-testnet\"}`,\n                                        items: SCALE_CHART_LIST,\n                                        onValueChange: (value)=>setScaleSelected(value, true),\n                                        type: \"secondary\",\n                                        value: scaleSelected\n                                    })\n                                ]\n                            })\n                        ]\n                    }),\n                    isError || isErrorAllChains ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.ErrorPlaceholder), {\n                        errorType: \"chart\"\n                    }) : isFetching || isFetchingAllChains || isLoading ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Loader), {}) : /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.WormholeScanBrand), {}),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _reactApexchartsDefault.default), {\n                                series: chartSelected === \"area\" ? series : series.map((serie)=>{\n                                    return {\n                                        name: serie.name,\n                                        data: serie.data,\n                                        color: serie.color\n                                    };\n                                }),\n                                type: chartSelected,\n                                height: isDesktop ? 400 : 300,\n                                options: {\n                                    chart: {\n                                        events: chartSelected === \"bar\" ? {\n                                            mouseLeave: ()=>{\n                                                (0, _apexChartUtils.changePathOpacity)({\n                                                    ref: chartRef,\n                                                    opacity: 1\n                                                });\n                                            },\n                                            mouseMove (e, chart, options) {\n                                                if (options.dataPointIndex < 0) (0, _apexChartUtils.changePathOpacity)({\n                                                    ref: chartRef,\n                                                    opacity: 1\n                                                });\n                                            }\n                                        } : {},\n                                        toolbar: {\n                                            show: false\n                                        },\n                                        zoom: {\n                                            enabled: false\n                                        },\n                                        stacked: chartSelected === \"bar\"\n                                    },\n                                    dataLabels: {\n                                        enabled: false\n                                    },\n                                    grid: {\n                                        borderColor: \"var(--color-gray-900)\",\n                                        strokeDashArray: 6,\n                                        xaxis: {\n                                            lines: {\n                                                show: true\n                                            }\n                                        },\n                                        yaxis: {\n                                            lines: {\n                                                show: false\n                                            }\n                                        },\n                                        padding: {\n                                            top: isDesktop ? 96 : 0\n                                        }\n                                    },\n                                    states: {\n                                        hover: {\n                                            filter: {\n                                                type: \"none\"\n                                            }\n                                        },\n                                        active: {\n                                            filter: {\n                                                type: \"none\"\n                                            }\n                                        }\n                                    },\n                                    stroke: {\n                                        curve: \"smooth\",\n                                        width: chartSelected === \"area\" ? 2 : 0,\n                                        dashArray: 0\n                                    },\n                                    fill: {\n                                        type: chartSelected === \"area\" ? \"gradient\" : \"solid\",\n                                        gradient: {\n                                            type: \"vertical\",\n                                            shadeIntensity: 0,\n                                            opacityFrom: 0.4,\n                                            opacityTo: 0,\n                                            stops: [\n                                                0,\n                                                100\n                                            ]\n                                        }\n                                    },\n                                    legend: {\n                                        show: isDesktop,\n                                        fontFamily: \"Roboto\",\n                                        fontSize: \"14px\",\n                                        fontWeight: 400,\n                                        floating: true,\n                                        labels: {\n                                            colors: \"var(--color-white)\"\n                                        },\n                                        markers: {\n                                            width: 4,\n                                            height: 12,\n                                            radius: 3\n                                        },\n                                        onItemClick: {\n                                            toggleDataSeries: false\n                                        },\n                                        position: \"top\",\n                                        offsetY: 32,\n                                        offsetX: 40,\n                                        horizontalAlign: \"left\",\n                                        showForSingleSeries: true,\n                                        itemMargin: {\n                                            horizontal: 0\n                                        }\n                                    },\n                                    xaxis: {\n                                        axisBorder: {\n                                            show: true,\n                                            strokeWidth: 4,\n                                            color: \"var(--color-gray-10)\"\n                                        },\n                                        axisTicks: {\n                                            show: false\n                                        },\n                                        crosshairs: {\n                                            position: \"front\"\n                                        },\n                                        tickAmount,\n                                        labels: {\n                                            formatter: (value)=>(0, _chainActivityUtils.formatXaxisLabels)(value, new Date(filters.from), new Date(filters.to)),\n                                            hideOverlappingLabels: true,\n                                            offsetX: 0,\n                                            rotate: 0,\n                                            style: {\n                                                colors: \"var(--color-gray-400)\",\n                                                fontFamily: \"Roboto Mono, Roboto, sans-serif\",\n                                                fontSize: \"12px\",\n                                                fontWeight: 400\n                                            },\n                                            trim: false\n                                        },\n                                        tooltip: {\n                                            enabled: false\n                                        }\n                                    },\n                                    yaxis: {\n                                        labels: {\n                                            offsetX: -8,\n                                            formatter: (0, _apexChartUtils.formatterYAxis),\n                                            style: {\n                                                colors: \"var(--color-gray-400)\",\n                                                fontFamily: \"Roboto Mono, Roboto, sans-serif\",\n                                                fontSize: \"12px\",\n                                                fontWeight: 400\n                                            }\n                                        },\n                                        opposite: true,\n                                        logarithmic: scaleSelected === \"logarithmic\" && chartSelected === \"area\",\n                                        forceNiceScale: scaleSelected === \"logarithmic\" && chartSelected === \"area\"\n                                    },\n                                    tooltip: {\n                                        custom: ({ series, seriesIndex, dataPointIndex, w })=>{\n                                            const data = w.config.series[seriesIndex].data[dataPointIndex];\n                                            const allDataForDate = w.config.series.map((serie)=>serie.data[dataPointIndex]).sort((a, b)=>b.y - a.y);\n                                            const totalY = allChainsSerie[0].data[dataPointIndex]?.y || 0;\n                                            if (chartSelected === \"bar\") (0, _apexChartUtils.updatePathStyles)({\n                                                chartRef,\n                                                dataPointIndex\n                                            });\n                                            return `<div class=\"chain-activity-chart-tooltip\">\n                      <div class=\"chain-activity-chart-tooltip-date\">\n                        <p>\n                          From:\n                          ${new Date(data.x).toLocaleString(\"en-GB\", {\n                                                hour: \"2-digit\",\n                                                minute: \"2-digit\"\n                                            })},\n                          ${new Date(data.x).toLocaleString(\"en-GB\", {\n                                                day: \"2-digit\",\n                                                month: \"long\",\n                                                year: \"numeric\"\n                                            })}\n                        </p>\n                        <p>\n                          To:\n                          ${new Date(data.to).toLocaleString(\"en-GB\", {\n                                                hour: \"2-digit\",\n                                                minute: \"2-digit\"\n                                            })},\n                          ${new Date(data.to).toLocaleString(\"en-GB\", {\n                                                day: \"2-digit\",\n                                                month: \"long\",\n                                                year: \"numeric\"\n                                            })}\n                        </p>\n                      </div>\n                      <div class=\"chain-activity-chart-tooltip-total-msg\">\n                        ${showAllSourceChains ? \"<div class='chain-activity-chart-tooltip-container-each-msg-icon' style='background-color: var(--color-lime)'></div>\" : \"\"}\n                    \n                        ${metricSelected === \"transactions\" ? `Transfers Sum: <span>${(0, _number.formatNumber)(totalY, 0)}</span>` : `Volume Sum: <span>$${isDesktop ? (0, _number.formatNumber)(totalY, 0) : (0, _number.numberToSuffix)(totalY)}</span>`}\n                      </div>\n                      <p class=\"chain-activity-chart-tooltip-chains\">Chains:</p>\n                      <div class=\"chain-activity-chart-tooltip-container\">\n                        ${allDataForDate.map((item)=>{\n                                                return `\n                                ${item?.emitter_chain === \"allChains\" ? `` : `\n                                      <div class=\"chain-activity-chart-tooltip-container-each-msg\">\n                                        <div class=\"chain-activity-chart-tooltip-container-each-msg-icon\" style=\"background-color: ${item?.color}\">\n                                        </div>\n                                        <div class=\"chain-activity-chart-tooltip-container-each-msg-name\">\n                                          ${(0, _wormhole.getChainName)({\n                                                    network: currentNetwork,\n                                                    chainId: item?.emitter_chain,\n                                                    acronym: +item?.emitter_chain === (0, _sdk.chainToChainId)(\"Bsc\")\n                                                })}:\n                                        </div>\n                                        <div class=\"chain-activity-chart-tooltip-container-each-msg-number\">\n                                          ${metricSelected === \"transactions\" ? (0, _number.formatNumber)(item?.y) : `$${(0, _number.numberToSuffix)(item?.volume)}`}\n                                        </div>\n                                      </div>\n                                      `}\n\n                          ${item?.details?.length > 0 && filters.sourceChain.every((chain)=>chain === \"All Chains\") ? `\n                                  ${item?.details.map((detail, i)=>{\n                                                    if (i > 10) return;\n                                                    if (i > 9) return `\n                                          <div class=\"chain-activity-chart-tooltip-container-each-msg\">\n                                            <div class=\"chain-activity-chart-tooltip-container-each-msg-icon\" style=\"background-color: ${(0, _chainActivityUtils.grayColors)[i]}\">\n                                            </div>\n                                            <div class=\"chain-activity-chart-tooltip-container-each-msg-name\">\n                                              Others:\n                                            </div>\n                                            <div class=\"chain-activity-chart-tooltip-container-each-msg-number\">\n                                              ${metricSelected === \"transactions\" ? (0, _number.formatNumber)(item?.details.slice(i).reduce((acc, item)=>acc + item?.count, 0)) : `$${(0, _number.numberToSuffix)(item?.details.slice(i).reduce((acc, item)=>acc + item?.volume, 0))}`}\n                                            </div>\n                                          </div>\n                                          `;\n                                                    return `\n                                        <div class=\"chain-activity-chart-tooltip-container-each-msg\">\n                                      <div class=\"chain-activity-chart-tooltip-container-each-msg-icon\" style=\"background-color: ${(0, _chainActivityUtils.grayColors)[i]}\">\n                                      </div>\n                                      <div class=\"chain-activity-chart-tooltip-container-each-msg-name\">\n                                        ${(0, _wormhole.getChainName)({\n                                                        acronym: +detail.emitter_chain === (0, _sdk.chainToChainId)(\"Bsc\"),\n                                                        network: currentNetwork,\n                                                        chainId: detail.emitter_chain\n                                                    })}:\n                                      </div>\n                                      <div class=\"chain-activity-chart-tooltip-container-each-msg-number\">\n                                        ${metricSelected === \"transactions\" ? (0, _number.formatNumber)(detail.count) : `$${(0, _number.numberToSuffix)(detail.volume)}`}\n                                      </div>\n                                      </div>\n                                      `;\n                                                }).join(\"\")}\n                                   ` : \"\"}\n                             `;\n                                            }).join(\"\")}\n                      </div>\n                    </div>`;\n                                        },\n                                        intersect: false,\n                                        shared: true\n                                    }\n                                }\n                            }, chartSelected)\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n};\nexports.default = ChainActivity;\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"react-apexcharts\":\"lEV8Y\",\"react-query\":\"dbjqN\",\"@wormhole-foundation/sdk\":\"cHYNT\",\"src/context/EnvironmentContext\":\"jjAhi\",\"src/analytics\":\"cr0zc\",\"src/components/atoms\":\"jMZmV\",\"src/components/molecules\":\"f5gIB\",\"src/utils/apexChartUtils\":\"dX5fx\",\"src/utils/wormhole\":\"6bzfn\",\"src/api/Client\":\"bTumr\",\"src/utils/hooks\":\"2VXdL\",\"src/utils/number\":\"c38zr\",\"src/icons/generic\":\"23xak\",\"src/utils/date\":\"9wAFB\",\"src/utils/filterUtils\":\"hmQ6c\",\"src/utils/chainActivityUtils\":\"dfbS4\",\"src/consts\":\"2l9qr\",\"./styles.scss\":\"2SVSJ\",\"react-datepicker/dist/react-datepicker.css\":\"chsuV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"2SVSJ\":[function() {},{}],\"chsuV\":[function() {},{}],\"3Vzfp\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _hooks = require(\"src/utils/hooks\");\nvar _error400 = require(\"./Error400\");\nvar _error400Default = parcelHelpers.interopDefault(_error400);\nvar _error500 = require(\"./Error500\");\nvar _error500Default = parcelHelpers.interopDefault(_error500);\nvar _error502 = require(\"./Error502\");\nvar _error502Default = parcelHelpers.interopDefault(_error502);\nvar _error503 = require(\"./Error503\");\nvar _error503Default = parcelHelpers.interopDefault(_error503);\nvar _stylesScss = require(\"./styles.scss\");\nconst SearchNotFound = ({ q, errorCode })=>{\n    const navigate = (0, _hooks.useNavigateCustom)();\n    const goHome = ()=>{\n        navigate(\"/\");\n    };\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n        children: [\n            errorCode !== 500 && errorCode !== 502 && errorCode !== 503 && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _error400Default.default), {\n                q: q,\n                goHome: goHome\n            }),\n            errorCode === 500 && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _error500Default.default), {\n                goHome: goHome\n            }),\n            errorCode === 502 && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _error502Default.default), {\n                goHome: goHome\n            }),\n            errorCode === 503 && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _error503Default.default), {\n                goHome: goHome\n            })\n        ]\n    });\n};\nexports.default = SearchNotFound;\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"src/utils/hooks\":\"2VXdL\",\"./Error400\":\"eA4ui\",\"./Error500\":\"kuNsI\",\"./Error502\":\"immIK\",\"./Error503\":\"gFnDW\",\"./styles.scss\":\"6UTAi\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"eA4ui\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nvar _searchNotFoundSvg = require(\"src/assets/search-not-found.svg\");\nvar _searchNotFoundSvgDefault = parcelHelpers.interopDefault(_searchNotFoundSvg);\nvar _consts = require(\"src/consts\");\nconst Error400 = ({ q, goHome })=>{\n    (0, _react.useEffect)(()=>{\n        (0, _analyticsDefault.default).page({\n            title: \"SEARCH_NOT_FOUND\"\n        });\n    }, []);\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n        className: \"error-page\",\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n            className: \"error-page-container\",\n            children: [\n                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h2\", {\n                    className: \"error-page-container-title-400\",\n                    children: \"Search not found\"\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                    className: \"error-page-container-image\",\n                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"img\", {\n                        className: \"error-page-container-image-400\",\n                        src: (0, _searchNotFoundSvgDefault.default),\n                        alt: \"Error 400\",\n                        loading: \"lazy\"\n                    })\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"error-page-container-body\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"p\", {\n                            className: \"error-page-container-body-description error-page-container-body-description-400\",\n                            children: [\n                                \"Sorry! We traversed all space-time for you, however, this is likely an invalid search string because we can't find any items that match:\",\n                                \" \",\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"strong\", {\n                                        children: q || \"empty string\"\n                                    })\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"p\", {\n                            className: \"error-page-container-body-description error-page-container-body-description-400\",\n                            children: [\n                                \"If you think this is a problem with us,\",\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"a\", {\n                                        className: \"info-link\",\n                                        href: (0, _consts.DISCORD_URL),\n                                        target: \"_blank\",\n                                        rel: \"noopener noreferrer\",\n                                        children: \"please tell us.\"\n                                    })\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                            className: \"error-page-container-body-button\",\n                            onClick: goHome,\n                            children: \"Back to Home\"\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n};\nexports.default = Error400;\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"src/analytics\":\"cr0zc\",\"src/assets/search-not-found.svg\":\"5Iy6C\",\"src/consts\":\"2l9qr\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"5Iy6C\":[function(require,module,exports,__globalThis) {\nmodule.exports = require(\"93b4141aef2bbc07\").getBundleURL('9Uv1n') + \"search-not-found.1dfcf840.svg\";\n\n},{\"93b4141aef2bbc07\":\"a2ypy\"}],\"a2ypy\":[function(require,module,exports,__globalThis) {\n\"use strict\";\nvar bundleURL = {};\nfunction getBundleURLCached(id) {\n    var value = bundleURL[id];\n    if (!value) {\n        value = getBundleURL();\n        bundleURL[id] = value;\n    }\n    return value;\n}\nfunction getBundleURL() {\n    try {\n        throw new Error();\n    } catch (err) {\n        var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n        if (matches) // The first two stack frames will be this function and getBundleURLCached.\n        // Use the 3rd one, which will be a runtime in the original bundle.\n        return getBaseURL(matches[2]);\n    }\n    return '/';\n}\nfunction getBaseURL(url) {\n    return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\nfunction getOrigin(url) {\n    var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n    if (!matches) throw new Error('Origin not found');\n    return matches[0];\n}\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;\n\n},{}],\"kuNsI\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nvar _astronautSvg = require(\"src/assets/astronaut.svg\");\nvar _astronautSvgDefault = parcelHelpers.interopDefault(_astronautSvg);\nvar _error500Svg = require(\"src/assets/error500.svg\");\nvar _error500SvgDefault = parcelHelpers.interopDefault(_error500Svg);\nconst Error500 = ({ goHome })=>{\n    (0, _react.useEffect)(()=>{\n        (0, _analyticsDefault.default).page({\n            title: \"ERROR_500\"\n        });\n    }, []);\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n        className: \"error-page error-page-bg-500\",\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n            className: \"error-page-container\",\n            children: [\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h2\", {\n                    className: \"error-page-container-title\",\n                    children: [\n                        \"Houston, \",\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                            children: \"we have a problem!\"\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"error-page-container-image\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"img\", {\n                            className: \"error-page-container-image-500\",\n                            src: (0, _error500SvgDefault.default),\n                            alt: \"Error 500\",\n                            loading: \"lazy\"\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"img\", {\n                            className: \"error-page-container-image-astronaut\",\n                            src: (0, _astronautSvgDefault.default),\n                            alt: \"\",\n                            loading: \"lazy\"\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"error-page-container-body\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"p\", {\n                            className: \"error-page-container-body-description error-page-container-body-description-500\",\n                            children: \"While traversing time and space we've encountered an issue, we'll overcome it shortly.\"\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"p\", {\n                            className: \"error-page-container-body-code\",\n                            children: \"Error code: 500\"\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                            className: \"error-page-container-body-button\",\n                            onClick: goHome,\n                            children: \"Back to Home\"\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n};\nexports.default = Error500;\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"src/analytics\":\"cr0zc\",\"src/assets/astronaut.svg\":\"7HgYI\",\"src/assets/error500.svg\":\"dtzWn\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"7HgYI\":[function(require,module,exports,__globalThis) {\nmodule.exports = require(\"49ab4c3c22dcd350\").getBundleURL('9Uv1n') + \"astronaut.e7ebb1a3.svg\";\n\n},{\"49ab4c3c22dcd350\":\"a2ypy\"}],\"dtzWn\":[function(require,module,exports,__globalThis) {\nmodule.exports = require(\"6204a3375acaab02\").getBundleURL('9Uv1n') + \"error500.7d253a89.svg\";\n\n},{\"6204a3375acaab02\":\"a2ypy\"}],\"immIK\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nvar _error502Svg = require(\"src/assets/error502.svg\");\nvar _error502SvgDefault = parcelHelpers.interopDefault(_error502Svg);\nconst Error502 = ({ goHome })=>{\n    (0, _react.useEffect)(()=>{\n        (0, _analyticsDefault.default).page({\n            title: \"ERROR_502\"\n        });\n    }, []);\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n        className: \"error-page\",\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n            className: \"error-page-container\",\n            children: [\n                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h2\", {\n                    className: \"error-page-container-title\",\n                    children: \"Bad pathway!\"\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"error-page-container-image\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h3\", {\n                            className: \"error-page-container-image-text\",\n                            children: [\n                                \"Error code\",\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                    children: \"502\"\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"img\", {\n                            className: \"error-page-container-image-502\",\n                            src: (0, _error502SvgDefault.default),\n                            alt: \"Error 502\",\n                            loading: \"lazy\"\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"error-page-container-body\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"p\", {\n                            className: \"error-page-container-body-description\",\n                            children: [\n                                \"We couldn't reach the other side, \",\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                    children: \"invalid response.\"\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                            className: \"error-page-container-body-button\",\n                            onClick: goHome,\n                            children: \"Back to Home\"\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n};\nexports.default = Error502;\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"src/analytics\":\"cr0zc\",\"src/assets/error502.svg\":\"9C0UO\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"9C0UO\":[function(require,module,exports,__globalThis) {\nmodule.exports = require(\"7a8482c7e377ed05\").getBundleURL('9Uv1n') + \"error502.ef641a85.svg\";\n\n},{\"7a8482c7e377ed05\":\"a2ypy\"}],\"gFnDW\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nvar _error503Svg = require(\"src/assets/error503.svg\");\nvar _error503SvgDefault = parcelHelpers.interopDefault(_error503Svg);\nvar _consts = require(\"src/consts\");\nconst Error503 = ({ goHome })=>{\n    (0, _react.useEffect)(()=>{\n        (0, _analyticsDefault.default).page({\n            title: \"ERROR_503\"\n        });\n    }, []);\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n        className: \"error-page error-page-bg-503\",\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n            className: \"error-page-container\",\n            children: [\n                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h2\", {\n                    className: \"error-page-container-title\",\n                    children: \"Systems down!\"\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"error-page-container-image\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h3\", {\n                            className: \"error-page-container-image-text\",\n                            children: [\n                                \"Error code\",\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                    children: \"503\"\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"img\", {\n                            className: \"error-page-container-image-500\",\n                            src: (0, _error503SvgDefault.default),\n                            alt: \"Error 503\",\n                            loading: \"lazy\"\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"error-page-container-body\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"p\", {\n                            className: \"error-page-container-body-description\",\n                            children: [\n                                \"The universe may be infinite but our capabilities aren't, unfortunately.\",\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"span\", {\n                                    children: [\n                                        \"We are currently experiencing service \",\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                            children: \"unavailability.\"\n                                        })\n                                    ]\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"p\", {\n                            className: \"error-page-container-body-description\",\n                            children: [\n                                \"If the problem persists, please reach\",\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"span\", {\n                                    children: [\n                                        \"out to us on\",\n                                        \" \",\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"a\", {\n                                            href: (0, _consts.DISCORD_URL),\n                                            target: \"_blank\",\n                                            rel: \"noopener noreferrer\",\n                                            children: \"discord.\"\n                                        })\n                                    ]\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                            className: \"error-page-container-body-button\",\n                            onClick: goHome,\n                            children: \"Back to Home\"\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n};\nexports.default = Error503;\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"src/analytics\":\"cr0zc\",\"src/assets/error503.svg\":\"9cBef\",\"src/consts\":\"2l9qr\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"9cBef\":[function(require,module,exports,__globalThis) {\nmodule.exports = require(\"e05041b4c6ebf7c2\").getBundleURL('9Uv1n') + \"error503.c3c1d880.svg\";\n\n},{\"e05041b4c6ebf7c2\":\"a2ypy\"}],\"6UTAi\":[function() {},{}],\"hREdT\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _reactTable = require(\"react-table\");\nvar _generic = require(\"src/icons/generic\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nvar _environmentContext = require(\"src/context/EnvironmentContext\");\nvar _atoms = require(\"src/components/atoms\");\nvar _hooks = require(\"src/utils/hooks\");\nvar _consts = require(\"src/consts\");\nvar _stylesScss = require(\"./styles.scss\");\nconst Table = ({ className, columns, data, defaultSortBy, emptyMessage = \"No items found.\", isLoading = false, numberOfColumns = 7, numberOfRows = 50, onRowClick, trackTxsSortBy = false })=>{\n    const { environment } = (0, _environmentContext.useEnvironment)();\n    const [openSortBy, setOpenSortBy] = (0, _react.useState)(false);\n    const [currentSortBy, setCurrentSortBy] = (0, _react.useState)(defaultSortBy);\n    const { width } = (0, _hooks.useWindowSize)();\n    const isDesktop = width >= (0, _consts.BREAKPOINTS).desktop;\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setSortBy } = (0, _reactTable.useTable)({\n        columns,\n        data,\n        initialState: {\n            sortBy: defaultSortBy ? [\n                defaultSortBy\n            ] : []\n        },\n        disableSortRemove: true\n    }, (0, _reactTable.useSortBy));\n    (0, _react.useEffect)(()=>{\n        const sortedColumn = headerGroups.flatMap((group)=>// @ts-expect-error Property 'isSorted' exists at runtime but TypeScript doesn't know about it\n            group.headers.filter((col)=>col.isSorted))[0];\n        if (sortedColumn) setCurrentSortBy({\n            id: sortedColumn.id,\n            // @ts-expect-error Property 'isSortedDesc' exists at runtime but TypeScript doesn't know about it\n            desc: sortedColumn.isSortedDesc || false\n        });\n    }, [\n        headerGroups\n    ]);\n    const handleReset = ()=>{\n        setSortBy([\n            defaultSortBy\n        ]);\n        setCurrentSortBy(defaultSortBy);\n        setOpenSortBy(false);\n    };\n    (0, _hooks.useLockBodyScroll)({\n        isLocked: !isDesktop && openSortBy\n    });\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n        children: [\n            defaultSortBy && /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: `table-mobile-filters-overlay ${openSortBy ? \"open\" : \"\"}`,\n                        onClick: ()=>setOpenSortBy(false)\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                        \"aria-expanded\": openSortBy,\n                        \"aria-label\": \"Sort by\",\n                        className: \"table-sort-by-btn\",\n                        onClick: ()=>setOpenSortBy(!openSortBy),\n                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.FilterListIcon), {\n                            width: 24\n                        })\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: `table-mobile-filters ${openSortBy ? \"open\" : \"\"}`,\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"table-mobile-filters-top\",\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                                        children: \"Sort by\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                                        className: \"table-mobile-filters-top-btn\",\n                                        onClick: ()=>setOpenSortBy(false),\n                                        \"aria-label\": \"Close sort options\",\n                                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.CrossIcon), {\n                                            width: 24\n                                        })\n                                    })\n                                ]\n                            }),\n                            headerGroups.map((headerGroup, index)=>{\n                                return /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _react.Fragment), {\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Select), {\n                                            ariaLabel: \"Sort column\",\n                                            className: \"table-mobile-filters-select\",\n                                            items: headerGroup.headers.filter((column)=>column.render(\"Header\").toString() !== \"View Details\").map((column)=>({\n                                                    value: column.id,\n                                                    label: column.render(\"Header\").toString()\n                                                })),\n                                            menuFixed: true,\n                                            menuListStyles: {\n                                                maxHeight: \"unset\"\n                                            },\n                                            name: \"Sort column\",\n                                            onValueChange: (selected)=>{\n                                                const selectedColumn = headerGroup.headers.find((col)=>col.id === selected.value);\n                                                if (selectedColumn) {\n                                                    setCurrentSortBy((prev)=>({\n                                                            id: selected.value,\n                                                            desc: prev.desc\n                                                        }));\n                                                    // @ts-expect-error Property 'toggleSortBy' exists at runtime but TypeScript doesn't know about it\n                                                    selectedColumn.toggleSortBy(currentSortBy.desc);\n                                                }\n                                            },\n                                            optionStyles: {\n                                                padding: 16\n                                            },\n                                            value: {\n                                                value: currentSortBy.id,\n                                                label: headerGroup.headers.find((column)=>column.id === currentSortBy.id)?.render(\"Header\") || \"Sort\"\n                                            }\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Select), {\n                                            ariaLabel: \"Sort order\",\n                                            className: \"table-mobile-filters-select\",\n                                            items: [\n                                                {\n                                                    value: false,\n                                                    label: \"Low to High\"\n                                                },\n                                                {\n                                                    value: true,\n                                                    label: \"High to Low\"\n                                                }\n                                            ],\n                                            menuFixed: true,\n                                            menuListStyles: {\n                                                maxHeight: \"unset\"\n                                            },\n                                            name: \"Sort order\",\n                                            onValueChange: (selected)=>{\n                                                setCurrentSortBy((prev)=>({\n                                                        ...prev,\n                                                        desc: selected.value\n                                                    }));\n                                                const column = headerGroup.headers.find((col)=>col.id === currentSortBy.id);\n                                                if (column) // @ts-expect-error Property 'toggleSortBy' exists at runtime but TypeScript doesn't know about it\n                                                column.toggleSortBy(selected.value);\n                                            },\n                                            optionStyles: {\n                                                padding: 16\n                                            },\n                                            value: {\n                                                value: currentSortBy.desc,\n                                                label: currentSortBy.desc ? \"High to Low\" : \"Low to High\"\n                                            }\n                                        })\n                                    ]\n                                }, index);\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"table-mobile-filters-btns\",\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                                        className: \"table-mobile-filters-btns-apply\",\n                                        onClick: ()=>setOpenSortBy(false),\n                                        children: \"Apply\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                                        className: \"table-mobile-filters-btns-reset\",\n                                        onClick: handleReset,\n                                        children: \"Reset\"\n                                    })\n                                ]\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"table\", {\n                ...getTableProps(),\n                className: `table ${defaultSortBy ? \"table-sortable\" : \"\"} ${onRowClick ? \"table-clickable\" : \"\"} ${className}`,\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"thead\", {\n                        className: \"table-head\",\n                        children: headerGroups.map((headerGroup, index)=>/*#__PURE__*/ (0, _jsxRuntime.jsx)(\"tr\", {\n                                ...headerGroup.getHeaderGroupProps(),\n                                onClick: ()=>{\n                                    if (trackTxsSortBy) setTimeout(()=>{\n                                        const sortedColumn = headerGroup.headers.find((header)=>header.isSorted);\n                                        (0, _analyticsDefault.default).track(\"txsSortBy\", {\n                                            network: environment.network,\n                                            selected: sortedColumn?.id,\n                                            // @ts-expect-error Property 'isSortedDesc' exists at runtime but TypeScript doesn't know about it\n                                            selectedType: sortedColumn?.isSortedDesc ? \"desc\" : \"asc\"\n                                        });\n                                    }, 0);\n                                },\n                                children: headerGroup.headers.map((column, index)=>{\n                                    const style = column.style;\n                                    const sortIcon = defaultSortBy && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                        className: \"table-head-th-container-arrow\",\n                                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.SortByIcon), {\n                                            sortBy: column.isSorted ? column.isSortedDesc ? \"DSC\" : \"ASC\" : null\n                                        })\n                                    });\n                                    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"th\", {\n                                        ...column.getHeaderProps(defaultSortBy ? column.getSortByToggleProps() : {}),\n                                        style: {\n                                            ...style,\n                                            color: column.isSorted ? \"var(--color-white)\" : \"var(--color-gray-400)\"\n                                        },\n                                        children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"table-head-th-container\",\n                                            children: [\n                                                column.render(\"Header\"),\n                                                \" \",\n                                                column?.Tooltip && column.Tooltip,\n                                                sortIcon\n                                            ]\n                                        })\n                                    }, index);\n                                })\n                            }, index))\n                    }),\n                    isLoading ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"tbody\", {\n                        children: [\n                            ...Array(numberOfRows)\n                        ].map((_, index)=>/*#__PURE__*/ (0, _jsxRuntime.jsx)(\"tr\", {\n                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"td\", {\n                                    className: \"table-row-loading\",\n                                    colSpan: numberOfColumns,\n                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                        className: \"loading-animation\"\n                                    })\n                                })\n                            }, index))\n                    }) : rows?.length > 0 && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"tbody\", {\n                        ...getTableBodyProps(),\n                        children: rows.map((row, index)=>{\n                            prepareRow(row);\n                            const justAppeared = row?.original?.justAppeared;\n                            const txHash = row?.original?.txHashId;\n                            if (justAppeared) setTimeout(()=>{\n                                row.original.justAppeared = false;\n                            });\n                            return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"tr\", {\n                                className: justAppeared ? \"appear\" : \"\",\n                                ...row.getRowProps(),\n                                onClick: ()=>onRowClick && onRowClick(row.original),\n                                children: row.cells.map((cell, index)=>{\n                                    const style = cell.column.style;\n                                    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"td\", {\n                                        ...cell.getCellProps(),\n                                        style: {\n                                            ...style\n                                        },\n                                        children: cell.render(\"Cell\")\n                                    }, index);\n                                })\n                            }, index + txHash);\n                        })\n                    })\n                ]\n            }),\n            !isLoading && rows?.length <= 0 && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"table-body-empty\",\n                children: emptyMessage\n            })\n        ]\n    });\n};\nexports.default = Table;\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"react-table\":\"7iEnb\",\"src/icons/generic\":\"23xak\",\"src/analytics\":\"cr0zc\",\"src/context/EnvironmentContext\":\"jjAhi\",\"src/components/atoms\":\"jMZmV\",\"src/utils/hooks\":\"2VXdL\",\"src/consts\":\"2l9qr\",\"./styles.scss\":\"aqEiX\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"7iEnb\":[function(require,module,exports,__globalThis) {\nmodule.exports = require(\"d444107b316e91c9\");\n\n},{\"d444107b316e91c9\":\"hvKI0\"}],\"hvKI0\":[function(require,module,exports,__globalThis) {\n(function(global, factory) {\n    factory(exports, require(\"aab375a33982b1d1\"));\n})(this, function(exports1, React) {\n    'use strict';\n    React = React && Object.prototype.hasOwnProperty.call(React, 'default') ? React['default'] : React;\n    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n        try {\n            var info = gen[key](arg);\n            var value = info.value;\n        } catch (error) {\n            reject(error);\n            return;\n        }\n        if (info.done) resolve(value);\n        else Promise.resolve(value).then(_next, _throw);\n    }\n    function _asyncToGenerator(fn) {\n        return function() {\n            var self = this, args = arguments;\n            return new Promise(function(resolve, reject) {\n                var gen = fn.apply(self, args);\n                function _next(value) {\n                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n                }\n                function _throw(err) {\n                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n                }\n                _next(undefined);\n            });\n        };\n    }\n    function _extends() {\n        _extends = Object.assign || function(target) {\n            for(var i = 1; i < arguments.length; i++){\n                var source = arguments[i];\n                for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n            }\n            return target;\n        };\n        return _extends.apply(this, arguments);\n    }\n    function _objectWithoutPropertiesLoose(source, excluded) {\n        if (source == null) return {};\n        var target = {};\n        var sourceKeys = Object.keys(source);\n        var key, i;\n        for(i = 0; i < sourceKeys.length; i++){\n            key = sourceKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            target[key] = source[key];\n        }\n        return target;\n    }\n    function _toPrimitive(input, hint) {\n        if (typeof input !== \"object\" || input === null) return input;\n        var prim = input[Symbol.toPrimitive];\n        if (prim !== undefined) {\n            var res = prim.call(input, hint || \"default\");\n            if (typeof res !== \"object\") return res;\n            throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n        }\n        return (hint === \"string\" ? String : Number)(input);\n    }\n    function _toPropertyKey(arg) {\n        var key = _toPrimitive(arg, \"string\");\n        return typeof key === \"symbol\" ? key : String(key);\n    }\n    var renderErr = \"Renderer Error \\u261D\\uFE0F\";\n    var actions = {\n        init: 'init'\n    };\n    var defaultRenderer = function defaultRenderer(_ref) {\n        var _ref$value = _ref.value, value = _ref$value === void 0 ? '' : _ref$value;\n        return value;\n    };\n    var emptyRenderer = function emptyRenderer() {\n        return React.createElement(React.Fragment, null, \"\\xA0\");\n    };\n    var defaultColumn = {\n        Cell: defaultRenderer,\n        width: 150,\n        minWidth: 0,\n        maxWidth: Number.MAX_SAFE_INTEGER\n    };\n    function mergeProps() {\n        for(var _len = arguments.length, propList = new Array(_len), _key = 0; _key < _len; _key++)propList[_key] = arguments[_key];\n        return propList.reduce(function(props, next) {\n            var style = next.style, className = next.className, rest = _objectWithoutPropertiesLoose(next, [\n                \"style\",\n                \"className\"\n            ]);\n            props = _extends({}, props, {}, rest);\n            if (style) props.style = props.style ? _extends({}, props.style || {}, {}, style || {}) : style;\n            if (className) props.className = props.className ? props.className + ' ' + className : className;\n            if (props.className === '') delete props.className;\n            return props;\n        }, {});\n    }\n    function handlePropGetter(prevProps, userProps, meta) {\n        // Handle a lambda, pass it the previous props\n        if (typeof userProps === 'function') return handlePropGetter({}, userProps(prevProps, meta));\n         // Handle an array, merge each item as separate props\n        if (Array.isArray(userProps)) return mergeProps.apply(void 0, [\n            prevProps\n        ].concat(userProps));\n         // Handle an object by default, merge the two objects\n        return mergeProps(prevProps, userProps);\n    }\n    var makePropGetter = function makePropGetter(hooks, meta) {\n        if (meta === void 0) meta = {};\n        return function(userProps) {\n            if (userProps === void 0) userProps = {};\n            return [].concat(hooks, [\n                userProps\n            ]).reduce(function(prev, next) {\n                return handlePropGetter(prev, next, _extends({}, meta, {\n                    userProps: userProps\n                }));\n            }, {});\n        };\n    };\n    var reduceHooks = function reduceHooks(hooks, initial, meta, allowUndefined) {\n        if (meta === void 0) meta = {};\n        return hooks.reduce(function(prev, next) {\n            var nextValue = next(prev, meta);\n            if (!allowUndefined && typeof nextValue === 'undefined') {\n                console.info(next);\n                throw new Error(\"React Table: A reducer hook \\u261D\\uFE0F just returned undefined! This is not allowed.\");\n            }\n            return nextValue;\n        }, initial);\n    };\n    var loopHooks = function loopHooks(hooks, context, meta) {\n        if (meta === void 0) meta = {};\n        return hooks.forEach(function(hook) {\n            var nextValue = hook(context, meta);\n            if (typeof nextValue !== 'undefined') {\n                console.info(hook, nextValue);\n                throw new Error(\"React Table: A loop-type hook \\u261D\\uFE0F just returned a value! This is not allowed.\");\n            }\n        });\n    };\n    function ensurePluginOrder(plugins, befores, pluginName, afters) {\n        if (afters) throw new Error(\"Defining plugins in the \\\"after\\\" section of ensurePluginOrder is no longer supported (see plugin \" + pluginName + \")\");\n        var pluginIndex = plugins.findIndex(function(plugin) {\n            return plugin.pluginName === pluginName;\n        });\n        if (pluginIndex === -1) throw new Error(\"The plugin \\\"\" + pluginName + \"\\\" was not found in the plugin list!\\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\\n\\n  \" + pluginName + \".pluginName = '\" + pluginName + \"'\\n\");\n        befores.forEach(function(before) {\n            var beforeIndex = plugins.findIndex(function(plugin) {\n                return plugin.pluginName === before;\n            });\n            if (beforeIndex > -1 && beforeIndex > pluginIndex) throw new Error(\"React Table: The \" + pluginName + \" plugin hook must be placed after the \" + before + \" plugin hook!\");\n        });\n    }\n    function functionalUpdate(updater, old) {\n        return typeof updater === 'function' ? updater(old) : updater;\n    }\n    function useGetLatest(obj) {\n        var ref = React.useRef();\n        ref.current = obj;\n        return React.useCallback(function() {\n            return ref.current;\n        }, []);\n    } // SSR has issues with useLayoutEffect still, so use useEffect during SSR\n    var safeUseLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n    function useMountedLayoutEffect(fn, deps) {\n        var mountedRef = React.useRef(false);\n        safeUseLayoutEffect(function() {\n            if (mountedRef.current) fn();\n            mountedRef.current = true; // eslint-disable-next-line\n        }, deps);\n    }\n    function useAsyncDebounce(defaultFn, defaultWait) {\n        if (defaultWait === void 0) defaultWait = 0;\n        var debounceRef = React.useRef({});\n        var getDefaultFn = useGetLatest(defaultFn);\n        var getDefaultWait = useGetLatest(defaultWait);\n        return React.useCallback(/*#__PURE__*/ function() {\n            var _ref2 = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee2() {\n                var _len2, args, _key2, _args2 = arguments;\n                return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while(true)switch(_context2.prev = _context2.next){\n                        case 0:\n                            for(_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = _args2[_key2];\n                            if (!debounceRef.current.promise) debounceRef.current.promise = new Promise(function(resolve, reject) {\n                                debounceRef.current.resolve = resolve;\n                                debounceRef.current.reject = reject;\n                            });\n                            if (debounceRef.current.timeout) clearTimeout(debounceRef.current.timeout);\n                            debounceRef.current.timeout = setTimeout(/*#__PURE__*/ _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee() {\n                                return regeneratorRuntime.wrap(function _callee$(_context) {\n                                    while(true)switch(_context.prev = _context.next){\n                                        case 0:\n                                            delete debounceRef.current.timeout;\n                                            _context.prev = 1;\n                                            _context.t0 = debounceRef.current;\n                                            _context.next = 5;\n                                            return getDefaultFn().apply(void 0, args);\n                                        case 5:\n                                            _context.t1 = _context.sent;\n                                            _context.t0.resolve.call(_context.t0, _context.t1);\n                                            _context.next = 12;\n                                            break;\n                                        case 9:\n                                            _context.prev = 9;\n                                            _context.t2 = _context[\"catch\"](1);\n                                            debounceRef.current.reject(_context.t2);\n                                        case 12:\n                                            _context.prev = 12;\n                                            delete debounceRef.current.promise;\n                                            return _context.finish(12);\n                                        case 15:\n                                        case \"end\":\n                                            return _context.stop();\n                                    }\n                                }, _callee, null, [\n                                    [\n                                        1,\n                                        9,\n                                        12,\n                                        15\n                                    ]\n                                ]);\n                            })), getDefaultWait());\n                            return _context2.abrupt(\"return\", debounceRef.current.promise);\n                        case 5:\n                        case \"end\":\n                            return _context2.stop();\n                    }\n                }, _callee2);\n            }));\n            return function() {\n                return _ref2.apply(this, arguments);\n            };\n        }(), [\n            getDefaultFn,\n            getDefaultWait\n        ]);\n    }\n    function makeRenderer(instance, column, meta) {\n        if (meta === void 0) meta = {};\n        return function(type, userProps) {\n            if (userProps === void 0) userProps = {};\n            var Comp = typeof type === 'string' ? column[type] : type;\n            if (typeof Comp === 'undefined') {\n                console.info(column);\n                throw new Error(renderErr);\n            }\n            return flexRender(Comp, _extends({}, instance, {\n                column: column\n            }, meta, {}, userProps));\n        };\n    }\n    function flexRender(Comp, props) {\n        return isReactComponent(Comp) ? React.createElement(Comp, props) : Comp;\n    }\n    function isReactComponent(component) {\n        return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);\n    }\n    function isClassComponent(component) {\n        return typeof component === 'function' && function() {\n            var proto = Object.getPrototypeOf(component);\n            return proto.prototype && proto.prototype.isReactComponent;\n        }();\n    }\n    function isExoticComponent(component) {\n        return typeof component === 'object' && typeof component.$$typeof === 'symbol' && [\n            'react.memo',\n            'react.forward_ref'\n        ].includes(component.$$typeof.description);\n    }\n    function linkColumnStructure(columns, parent, depth) {\n        if (depth === void 0) depth = 0;\n        return columns.map(function(column) {\n            column = _extends({}, column, {\n                parent: parent,\n                depth: depth\n            });\n            assignColumnAccessor(column);\n            if (column.columns) column.columns = linkColumnStructure(column.columns, column, depth + 1);\n            return column;\n        });\n    }\n    function flattenColumns(columns) {\n        return flattenBy(columns, 'columns');\n    }\n    function assignColumnAccessor(column) {\n        // First check for string accessor\n        var id = column.id, accessor = column.accessor, Header = column.Header;\n        if (typeof accessor === 'string') {\n            id = id || accessor;\n            var accessorPath = accessor.split('.');\n            accessor = function accessor(row) {\n                return getBy(row, accessorPath);\n            };\n        }\n        if (!id && typeof Header === 'string' && Header) id = Header;\n        if (!id && column.columns) {\n            console.error(column);\n            throw new Error('A column ID (or unique \"Header\" value) is required!');\n        }\n        if (!id) {\n            console.error(column);\n            throw new Error('A column ID (or string accessor) is required!');\n        }\n        Object.assign(column, {\n            id: id,\n            accessor: accessor\n        });\n        return column;\n    }\n    function decorateColumn(column, userDefaultColumn) {\n        if (!userDefaultColumn) throw new Error();\n        Object.assign(column, _extends({\n            // Make sure there is a fallback header, just in case\n            Header: emptyRenderer,\n            Footer: emptyRenderer\n        }, defaultColumn, {}, userDefaultColumn, {}, column));\n        Object.assign(column, {\n            originalWidth: column.width\n        });\n        return column;\n    } // Build the header groups from the bottom up\n    function makeHeaderGroups(allColumns, defaultColumn, additionalHeaderProperties) {\n        if (additionalHeaderProperties === void 0) additionalHeaderProperties = function additionalHeaderProperties() {\n            return {};\n        };\n        var headerGroups = [];\n        var scanColumns = allColumns;\n        var uid = 0;\n        var getUID = function getUID() {\n            return uid++;\n        };\n        var _loop = function _loop() {\n            // The header group we are creating\n            var headerGroup = {\n                headers: []\n            }; // The parent columns we're going to scan next\n            var parentColumns = [];\n            var hasParents = scanColumns.some(function(d) {\n                return d.parent;\n            }); // Scan each column for parents\n            scanColumns.forEach(function(column) {\n                // What is the latest (last) parent column?\n                var latestParentColumn = [].concat(parentColumns).reverse()[0];\n                var newParent;\n                if (hasParents) {\n                    // If the column has a parent, add it if necessary\n                    if (column.parent) newParent = _extends({}, column.parent, {\n                        originalId: column.parent.id,\n                        id: column.parent.id + \"_\" + getUID(),\n                        headers: [\n                            column\n                        ]\n                    }, additionalHeaderProperties(column));\n                    else {\n                        // If other columns have parents, we'll need to add a place holder if necessary\n                        var originalId = column.id + \"_placeholder\";\n                        newParent = decorateColumn(_extends({\n                            originalId: originalId,\n                            id: column.id + \"_placeholder_\" + getUID(),\n                            placeholderOf: column,\n                            headers: [\n                                column\n                            ]\n                        }, additionalHeaderProperties(column)), defaultColumn);\n                    } // If the resulting parent columns are the same, just add\n                    // the column and increment the header span\n                    if (latestParentColumn && latestParentColumn.originalId === newParent.originalId) latestParentColumn.headers.push(column);\n                    else parentColumns.push(newParent);\n                }\n                headerGroup.headers.push(column);\n            });\n            headerGroups.push(headerGroup); // Start scanning the parent columns\n            scanColumns = parentColumns;\n        };\n        while(scanColumns.length)_loop();\n        return headerGroups.reverse();\n    }\n    var pathObjCache = new Map();\n    function getBy(obj, path, def) {\n        if (!path) return obj;\n        var cacheKey = typeof path === 'function' ? path : JSON.stringify(path);\n        var pathObj = pathObjCache.get(cacheKey) || function() {\n            var pathObj = makePathArray(path);\n            pathObjCache.set(cacheKey, pathObj);\n            return pathObj;\n        }();\n        var val;\n        try {\n            val = pathObj.reduce(function(cursor, pathPart) {\n                return cursor[pathPart];\n            }, obj);\n        } catch (e) {}\n        return typeof val !== 'undefined' ? val : def;\n    }\n    function getFirstDefined() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];\n        for(var i = 0; i < args.length; i += 1){\n            if (typeof args[i] !== 'undefined') return args[i];\n        }\n    }\n    function isFunction(a) {\n        if (typeof a === 'function') return a;\n    }\n    function flattenBy(arr, key) {\n        var flat = [];\n        var recurse = function recurse(arr) {\n            arr.forEach(function(d) {\n                if (!d[key]) flat.push(d);\n                else recurse(d[key]);\n            });\n        };\n        recurse(arr);\n        return flat;\n    }\n    function expandRows(rows, _ref) {\n        var manualExpandedKey = _ref.manualExpandedKey, expanded = _ref.expanded, _ref$expandSubRows = _ref.expandSubRows, expandSubRows = _ref$expandSubRows === void 0 ? true : _ref$expandSubRows;\n        var expandedRows = [];\n        var handleRow = function handleRow(row, addToExpandedRows) {\n            if (addToExpandedRows === void 0) addToExpandedRows = true;\n            row.isExpanded = row.original && row.original[manualExpandedKey] || expanded[row.id];\n            row.canExpand = row.subRows && !!row.subRows.length;\n            if (addToExpandedRows) expandedRows.push(row);\n            if (row.subRows && row.subRows.length && row.isExpanded) row.subRows.forEach(function(row) {\n                return handleRow(row, expandSubRows);\n            });\n        };\n        rows.forEach(function(row) {\n            return handleRow(row);\n        });\n        return expandedRows;\n    }\n    function getFilterMethod(filter, userFilterTypes, filterTypes) {\n        return isFunction(filter) || userFilterTypes[filter] || filterTypes[filter] || filterTypes.text;\n    }\n    function shouldAutoRemoveFilter(autoRemove, value, column) {\n        return autoRemove ? autoRemove(value, column) : typeof value === 'undefined';\n    }\n    function unpreparedAccessWarning() {\n        throw new Error('React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.');\n    }\n    var passiveSupported = null;\n    function passiveEventSupported() {\n        // memoize support to avoid adding multiple test events\n        if (typeof passiveSupported === 'boolean') return passiveSupported;\n        var supported = false;\n        try {\n            var options = {\n                get passive () {\n                    supported = true;\n                    return false;\n                }\n            };\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        } catch (err) {\n            supported = false;\n        }\n        passiveSupported = supported;\n        return passiveSupported;\n    } //\n    var reOpenBracket = /\\[/g;\n    var reCloseBracket = /\\]/g;\n    function makePathArray(obj) {\n        return flattenDeep(obj) // remove all periods in parts\n        .map(function(d) {\n            return String(d).replace('.', '_');\n        }) // join parts using period\n        .join('.') // replace brackets with periods\n        .replace(reOpenBracket, '.').replace(reCloseBracket, '') // split it back out on periods\n        .split('.');\n    }\n    function flattenDeep(arr, newArr) {\n        if (newArr === void 0) newArr = [];\n        if (!Array.isArray(arr)) newArr.push(arr);\n        else for(var i = 0; i < arr.length; i += 1)flattenDeep(arr[i], newArr);\n        return newArr;\n    }\n    var defaultGetTableProps = function defaultGetTableProps(props) {\n        return _extends({\n            role: 'table'\n        }, props);\n    };\n    var defaultGetTableBodyProps = function defaultGetTableBodyProps(props) {\n        return _extends({\n            role: 'rowgroup'\n        }, props);\n    };\n    var defaultGetHeaderProps = function defaultGetHeaderProps(props, _ref) {\n        var column = _ref.column;\n        return _extends({\n            key: \"header_\" + column.id,\n            colSpan: column.totalVisibleHeaderCount,\n            role: 'columnheader'\n        }, props);\n    };\n    var defaultGetFooterProps = function defaultGetFooterProps(props, _ref2) {\n        var column = _ref2.column;\n        return _extends({\n            key: \"footer_\" + column.id,\n            colSpan: column.totalVisibleHeaderCount\n        }, props);\n    };\n    var defaultGetHeaderGroupProps = function defaultGetHeaderGroupProps(props, _ref3) {\n        var index = _ref3.index;\n        return _extends({\n            key: \"headerGroup_\" + index,\n            role: 'row'\n        }, props);\n    };\n    var defaultGetFooterGroupProps = function defaultGetFooterGroupProps(props, _ref4) {\n        var index = _ref4.index;\n        return _extends({\n            key: \"footerGroup_\" + index\n        }, props);\n    };\n    var defaultGetRowProps = function defaultGetRowProps(props, _ref5) {\n        var row = _ref5.row;\n        return _extends({\n            key: \"row_\" + row.id,\n            role: 'row'\n        }, props);\n    };\n    var defaultGetCellProps = function defaultGetCellProps(props, _ref6) {\n        var cell = _ref6.cell;\n        return _extends({\n            key: \"cell_\" + cell.row.id + \"_\" + cell.column.id,\n            role: 'cell'\n        }, props);\n    };\n    function makeDefaultPluginHooks() {\n        return {\n            useOptions: [],\n            stateReducers: [],\n            useControlledState: [],\n            columns: [],\n            columnsDeps: [],\n            allColumns: [],\n            allColumnsDeps: [],\n            accessValue: [],\n            materializedColumns: [],\n            materializedColumnsDeps: [],\n            useInstanceAfterData: [],\n            visibleColumns: [],\n            visibleColumnsDeps: [],\n            headerGroups: [],\n            headerGroupsDeps: [],\n            useInstanceBeforeDimensions: [],\n            useInstance: [],\n            prepareRow: [],\n            getTableProps: [\n                defaultGetTableProps\n            ],\n            getTableBodyProps: [\n                defaultGetTableBodyProps\n            ],\n            getHeaderGroupProps: [\n                defaultGetHeaderGroupProps\n            ],\n            getFooterGroupProps: [\n                defaultGetFooterGroupProps\n            ],\n            getHeaderProps: [\n                defaultGetHeaderProps\n            ],\n            getFooterProps: [\n                defaultGetFooterProps\n            ],\n            getRowProps: [\n                defaultGetRowProps\n            ],\n            getCellProps: [\n                defaultGetCellProps\n            ],\n            useFinalInstance: []\n        };\n    }\n    actions.resetHiddenColumns = 'resetHiddenColumns';\n    actions.toggleHideColumn = 'toggleHideColumn';\n    actions.setHiddenColumns = 'setHiddenColumns';\n    actions.toggleHideAllColumns = 'toggleHideAllColumns';\n    var useColumnVisibility = function useColumnVisibility(hooks) {\n        hooks.getToggleHiddenProps = [\n            defaultGetToggleHiddenProps\n        ];\n        hooks.getToggleHideAllColumnsProps = [\n            defaultGetToggleHideAllColumnsProps\n        ];\n        hooks.stateReducers.push(reducer);\n        hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);\n        hooks.headerGroupsDeps.push(function(deps, _ref) {\n            var instance = _ref.instance;\n            return [].concat(deps, [\n                instance.state.hiddenColumns\n            ]);\n        });\n        hooks.useInstance.push(useInstance);\n    };\n    useColumnVisibility.pluginName = 'useColumnVisibility';\n    var defaultGetToggleHiddenProps = function defaultGetToggleHiddenProps(props, _ref2) {\n        var column = _ref2.column;\n        return [\n            props,\n            {\n                onChange: function onChange(e) {\n                    column.toggleHidden(!e.target.checked);\n                },\n                style: {\n                    cursor: 'pointer'\n                },\n                checked: column.isVisible,\n                title: 'Toggle Column Visible'\n            }\n        ];\n    };\n    var defaultGetToggleHideAllColumnsProps = function defaultGetToggleHideAllColumnsProps(props, _ref3) {\n        var instance = _ref3.instance;\n        return [\n            props,\n            {\n                onChange: function onChange(e) {\n                    instance.toggleHideAllColumns(!e.target.checked);\n                },\n                style: {\n                    cursor: 'pointer'\n                },\n                checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n                title: 'Toggle All Columns Hidden',\n                indeterminate: !instance.allColumnsHidden && instance.state.hiddenColumns.length\n            }\n        ];\n    };\n    function reducer(state, action, previousState, instance) {\n        if (action.type === actions.init) return _extends({\n            hiddenColumns: []\n        }, state);\n        if (action.type === actions.resetHiddenColumns) return _extends({}, state, {\n            hiddenColumns: instance.initialState.hiddenColumns || []\n        });\n        if (action.type === actions.toggleHideColumn) {\n            var should = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.includes(action.columnId);\n            var hiddenColumns = should ? [].concat(state.hiddenColumns, [\n                action.columnId\n            ]) : state.hiddenColumns.filter(function(d) {\n                return d !== action.columnId;\n            });\n            return _extends({}, state, {\n                hiddenColumns: hiddenColumns\n            });\n        }\n        if (action.type === actions.setHiddenColumns) return _extends({}, state, {\n            hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)\n        });\n        if (action.type === actions.toggleHideAllColumns) {\n            var shouldAll = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.length;\n            return _extends({}, state, {\n                hiddenColumns: shouldAll ? instance.allColumns.map(function(d) {\n                    return d.id;\n                }) : []\n            });\n        }\n    }\n    function useInstanceBeforeDimensions(instance) {\n        var headers = instance.headers, hiddenColumns = instance.state.hiddenColumns;\n        var isMountedRef = React.useRef(false);\n        isMountedRef.current;\n        var handleColumn = function handleColumn(column, parentVisible) {\n            column.isVisible = parentVisible && !hiddenColumns.includes(column.id);\n            var totalVisibleHeaderCount = 0;\n            if (column.headers && column.headers.length) column.headers.forEach(function(subColumn) {\n                return totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible);\n            });\n            else totalVisibleHeaderCount = column.isVisible ? 1 : 0;\n            column.totalVisibleHeaderCount = totalVisibleHeaderCount;\n            return totalVisibleHeaderCount;\n        };\n        var totalVisibleHeaderCount = 0;\n        headers.forEach(function(subHeader) {\n            return totalVisibleHeaderCount += handleColumn(subHeader, true);\n        });\n    }\n    function useInstance(instance) {\n        var columns = instance.columns, flatHeaders = instance.flatHeaders, dispatch = instance.dispatch, allColumns = instance.allColumns, getHooks = instance.getHooks, hiddenColumns = instance.state.hiddenColumns, _instance$autoResetHi = instance.autoResetHiddenColumns, autoResetHiddenColumns = _instance$autoResetHi === void 0 ? true : _instance$autoResetHi;\n        var getInstance = useGetLatest(instance);\n        var allColumnsHidden = allColumns.length === hiddenColumns.length;\n        var toggleHideColumn = React.useCallback(function(columnId, value) {\n            return dispatch({\n                type: actions.toggleHideColumn,\n                columnId: columnId,\n                value: value\n            });\n        }, [\n            dispatch\n        ]);\n        var setHiddenColumns = React.useCallback(function(value) {\n            return dispatch({\n                type: actions.setHiddenColumns,\n                value: value\n            });\n        }, [\n            dispatch\n        ]);\n        var toggleHideAllColumns = React.useCallback(function(value) {\n            return dispatch({\n                type: actions.toggleHideAllColumns,\n                value: value\n            });\n        }, [\n            dispatch\n        ]);\n        var getToggleHideAllColumnsProps = makePropGetter(getHooks().getToggleHideAllColumnsProps, {\n            instance: getInstance()\n        });\n        flatHeaders.forEach(function(column) {\n            column.toggleHidden = function(value) {\n                dispatch({\n                    type: actions.toggleHideColumn,\n                    columnId: column.id,\n                    value: value\n                });\n            };\n            column.getToggleHiddenProps = makePropGetter(getHooks().getToggleHiddenProps, {\n                instance: getInstance(),\n                column: column\n            });\n        });\n        var getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns);\n        useMountedLayoutEffect(function() {\n            if (getAutoResetHiddenColumns()) dispatch({\n                type: actions.resetHiddenColumns\n            });\n        }, [\n            dispatch,\n            columns\n        ]);\n        Object.assign(instance, {\n            allColumnsHidden: allColumnsHidden,\n            toggleHideColumn: toggleHideColumn,\n            setHiddenColumns: setHiddenColumns,\n            toggleHideAllColumns: toggleHideAllColumns,\n            getToggleHideAllColumnsProps: getToggleHideAllColumnsProps\n        });\n    }\n    var defaultInitialState = {};\n    var defaultColumnInstance = {};\n    var defaultReducer = function defaultReducer(state, action, prevState) {\n        return state;\n    };\n    var defaultGetSubRows = function defaultGetSubRows(row, index) {\n        return row.subRows || [];\n    };\n    var defaultGetRowId = function defaultGetRowId(row, index, parent) {\n        return \"\" + (parent ? [\n            parent.id,\n            index\n        ].join('.') : index);\n    };\n    var defaultUseControlledState = function defaultUseControlledState(d) {\n        return d;\n    };\n    function applyDefaults(props) {\n        var _props$initialState = props.initialState, initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState, _props$defaultColumn = props.defaultColumn, defaultColumn = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn, _props$getSubRows = props.getSubRows, getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows, _props$getRowId = props.getRowId, getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId, _props$stateReducer = props.stateReducer, stateReducer = _props$stateReducer === void 0 ? defaultReducer : _props$stateReducer, _props$useControlledS = props.useControlledState, useControlledState = _props$useControlledS === void 0 ? defaultUseControlledState : _props$useControlledS, rest = _objectWithoutPropertiesLoose(props, [\n            \"initialState\",\n            \"defaultColumn\",\n            \"getSubRows\",\n            \"getRowId\",\n            \"stateReducer\",\n            \"useControlledState\"\n        ]);\n        return _extends({}, rest, {\n            initialState: initialState,\n            defaultColumn: defaultColumn,\n            getSubRows: getSubRows,\n            getRowId: getRowId,\n            stateReducer: stateReducer,\n            useControlledState: useControlledState\n        });\n    }\n    var useTable = function useTable(props) {\n        for(var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)plugins[_key - 1] = arguments[_key];\n        // Apply default props\n        props = applyDefaults(props); // Add core plugins\n        plugins = [\n            useColumnVisibility\n        ].concat(plugins); // Create the table instance\n        var instanceRef = React.useRef({}); // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n        var getInstance = useGetLatest(instanceRef.current); // Assign the props, plugins and hooks to the instance\n        Object.assign(getInstance(), _extends({}, props, {\n            plugins: plugins,\n            hooks: makeDefaultPluginHooks()\n        })); // Allow plugins to register hooks as early as possible\n        plugins.filter(Boolean).forEach(function(plugin) {\n            plugin(getInstance().hooks);\n        }); // Consume all hooks and make a getter for them\n        var getHooks = useGetLatest(getInstance().hooks);\n        getInstance().getHooks = getHooks;\n        delete getInstance().hooks; // Allow useOptions hooks to modify the options coming into the table\n        Object.assign(getInstance(), reduceHooks(getHooks().useOptions, applyDefaults(props)));\n        var _getInstance = getInstance(), data = _getInstance.data, userColumns = _getInstance.columns, initialState = _getInstance.initialState, defaultColumn = _getInstance.defaultColumn, getSubRows = _getInstance.getSubRows, getRowId = _getInstance.getRowId, stateReducer = _getInstance.stateReducer, useControlledState = _getInstance.useControlledState; // Setup user reducer ref\n        var getStateReducer = useGetLatest(stateReducer); // Build the reducer\n        var reducer = React.useCallback(function(state, action) {\n            // Detect invalid actions\n            if (!action.type) {\n                console.info({\n                    action: action\n                });\n                throw new Error(\"Unknown Action \\uD83D\\uDC46\");\n            } // Reduce the state from all plugin reducers\n            return [].concat(getHooks().stateReducers, Array.isArray(getStateReducer()) ? getStateReducer() : [\n                getStateReducer()\n            ]).reduce(function(s, handler) {\n                return handler(s, action, state, getInstance()) || s;\n            }, state);\n        }, [\n            getHooks,\n            getStateReducer,\n            getInstance\n        ]); // Start the reducer\n        var _React$useReducer = React.useReducer(reducer, undefined, function() {\n            return reducer(initialState, {\n                type: actions.init\n            });\n        }), reducerState = _React$useReducer[0], dispatch = _React$useReducer[1]; // Allow the user to control the final state with hooks\n        var state = reduceHooks([].concat(getHooks().useControlledState, [\n            useControlledState\n        ]), reducerState, {\n            instance: getInstance()\n        });\n        Object.assign(getInstance(), {\n            state: state,\n            dispatch: dispatch\n        }); // Decorate All the columns\n        var columns = React.useMemo(function() {\n            return linkColumnStructure(reduceHooks(getHooks().columns, userColumns, {\n                instance: getInstance()\n            }));\n        }, [\n            getHooks,\n            getInstance,\n            userColumns\n        ].concat(reduceHooks(getHooks().columnsDeps, [], {\n            instance: getInstance()\n        })));\n        getInstance().columns = columns; // Get the flat list of all columns and allow hooks to decorate\n        // those columns (and trigger this memoization via deps)\n        var allColumns = React.useMemo(function() {\n            return reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n                instance: getInstance()\n            }).map(assignColumnAccessor);\n        }, [\n            columns,\n            getHooks,\n            getInstance\n        ].concat(reduceHooks(getHooks().allColumnsDeps, [], {\n            instance: getInstance()\n        })));\n        getInstance().allColumns = allColumns; // Access the row model using initial columns\n        var _React$useMemo = React.useMemo(function() {\n            var rows = [];\n            var flatRows = [];\n            var rowsById = {};\n            var allColumnsQueue = [].concat(allColumns);\n            while(allColumnsQueue.length){\n                var column = allColumnsQueue.shift();\n                accessRowsForColumn({\n                    data: data,\n                    rows: rows,\n                    flatRows: flatRows,\n                    rowsById: rowsById,\n                    column: column,\n                    getRowId: getRowId,\n                    getSubRows: getSubRows,\n                    accessValueHooks: getHooks().accessValue,\n                    getInstance: getInstance\n                });\n            }\n            return [\n                rows,\n                flatRows,\n                rowsById\n            ];\n        }, [\n            allColumns,\n            data,\n            getRowId,\n            getSubRows,\n            getHooks,\n            getInstance\n        ]), rows = _React$useMemo[0], flatRows = _React$useMemo[1], rowsById = _React$useMemo[2];\n        Object.assign(getInstance(), {\n            rows: rows,\n            initialRows: [].concat(rows),\n            flatRows: flatRows,\n            rowsById: rowsById // materializedColumns,\n        });\n        loopHooks(getHooks().useInstanceAfterData, getInstance()); // Get the flat list of all columns AFTER the rows\n        // have been access, and allow hooks to decorate\n        // those columns (and trigger this memoization via deps)\n        var visibleColumns = React.useMemo(function() {\n            return reduceHooks(getHooks().visibleColumns, allColumns, {\n                instance: getInstance()\n            }).map(function(d) {\n                return decorateColumn(d, defaultColumn);\n            });\n        }, [\n            getHooks,\n            allColumns,\n            getInstance,\n            defaultColumn\n        ].concat(reduceHooks(getHooks().visibleColumnsDeps, [], {\n            instance: getInstance()\n        }))); // Combine new visible columns with all columns\n        allColumns = React.useMemo(function() {\n            var columns = [].concat(visibleColumns);\n            allColumns.forEach(function(column) {\n                if (!columns.find(function(d) {\n                    return d.id === column.id;\n                })) columns.push(column);\n            });\n            return columns;\n        }, [\n            allColumns,\n            visibleColumns\n        ]);\n        getInstance().allColumns = allColumns;\n        var duplicateColumns = allColumns.filter(function(column, i) {\n            return allColumns.findIndex(function(d) {\n                return d.id === column.id;\n            }) !== i;\n        });\n        if (duplicateColumns.length) {\n            console.info(allColumns);\n            throw new Error(\"Duplicate columns were found with ids: \\\"\" + duplicateColumns.map(function(d) {\n                return d.id;\n            }).join(', ') + \"\\\" in the columns array above\");\n        }\n        var headerGroups = React.useMemo(function() {\n            return reduceHooks(getHooks().headerGroups, makeHeaderGroups(visibleColumns, defaultColumn), getInstance());\n        }, [\n            getHooks,\n            visibleColumns,\n            defaultColumn,\n            getInstance\n        ].concat(reduceHooks(getHooks().headerGroupsDeps, [], {\n            instance: getInstance()\n        })));\n        getInstance().headerGroups = headerGroups; // Get the first level of headers\n        var headers = React.useMemo(function() {\n            return headerGroups.length ? headerGroups[0].headers : [];\n        }, [\n            headerGroups\n        ]);\n        getInstance().headers = headers; // Provide a flat header list for utilities\n        getInstance().flatHeaders = headerGroups.reduce(function(all, headerGroup) {\n            return [].concat(all, headerGroup.headers);\n        }, []);\n        loopHooks(getHooks().useInstanceBeforeDimensions, getInstance()); // Filter columns down to visible ones\n        var visibleColumnsDep = visibleColumns.filter(function(d) {\n            return d.isVisible;\n        }).map(function(d) {\n            return d.id;\n        }).sort().join('_');\n        visibleColumns = React.useMemo(function() {\n            return visibleColumns.filter(function(d) {\n                return d.isVisible;\n            });\n        }, [\n            visibleColumns,\n            visibleColumnsDep\n        ]);\n        getInstance().visibleColumns = visibleColumns; // Header Visibility is needed by this point\n        var _calculateHeaderWidth = calculateHeaderWidths(headers), totalColumnsMinWidth = _calculateHeaderWidth[0], totalColumnsWidth = _calculateHeaderWidth[1], totalColumnsMaxWidth = _calculateHeaderWidth[2];\n        getInstance().totalColumnsMinWidth = totalColumnsMinWidth;\n        getInstance().totalColumnsWidth = totalColumnsWidth;\n        getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth;\n        loopHooks(getHooks().useInstance, getInstance()) // Each materialized header needs to be assigned a render function and other\n        ;\n        [].concat(getInstance().flatHeaders, getInstance().allColumns).forEach(function(column) {\n            // Give columns/headers rendering power\n            column.render = makeRenderer(getInstance(), column); // Give columns/headers a default getHeaderProps\n            column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n                instance: getInstance(),\n                column: column\n            }); // Give columns/headers a default getFooterProps\n            column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n                instance: getInstance(),\n                column: column\n            });\n        });\n        getInstance().headerGroups = React.useMemo(function() {\n            return headerGroups.filter(function(headerGroup, i) {\n                // Filter out any headers and headerGroups that don't have visible columns\n                headerGroup.headers = headerGroup.headers.filter(function(column) {\n                    var recurse = function recurse(headers) {\n                        return headers.filter(function(column) {\n                            if (column.headers) return recurse(column.headers);\n                            return column.isVisible;\n                        }).length;\n                    };\n                    if (column.headers) return recurse(column.headers);\n                    return column.isVisible;\n                }); // Give headerGroups getRowProps\n                if (headerGroup.headers.length) {\n                    headerGroup.getHeaderGroupProps = makePropGetter(getHooks().getHeaderGroupProps, {\n                        instance: getInstance(),\n                        headerGroup: headerGroup,\n                        index: i\n                    });\n                    headerGroup.getFooterGroupProps = makePropGetter(getHooks().getFooterGroupProps, {\n                        instance: getInstance(),\n                        headerGroup: headerGroup,\n                        index: i\n                    });\n                    return true;\n                }\n                return false;\n            });\n        }, [\n            headerGroups,\n            getInstance,\n            getHooks\n        ]);\n        getInstance().footerGroups = [].concat(getInstance().headerGroups).reverse(); // The prepareRow function is absolutely necessary and MUST be called on\n        // any rows the user wishes to be displayed.\n        getInstance().prepareRow = React.useCallback(function(row) {\n            row.getRowProps = makePropGetter(getHooks().getRowProps, {\n                instance: getInstance(),\n                row: row\n            }); // Build the visible cells for each row\n            row.allCells = allColumns.map(function(column) {\n                var value = row.values[column.id];\n                var cell = {\n                    column: column,\n                    row: row,\n                    value: value\n                }; // Give each cell a getCellProps base\n                cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n                    instance: getInstance(),\n                    cell: cell\n                }); // Give each cell a renderer function (supports multiple renderers)\n                cell.render = makeRenderer(getInstance(), column, {\n                    row: row,\n                    cell: cell,\n                    value: value\n                });\n                return cell;\n            });\n            row.cells = visibleColumns.map(function(column) {\n                return row.allCells.find(function(cell) {\n                    return cell.column.id === column.id;\n                });\n            }); // need to apply any row specific hooks (useExpanded requires this)\n            loopHooks(getHooks().prepareRow, row, {\n                instance: getInstance()\n            });\n        }, [\n            getHooks,\n            getInstance,\n            allColumns,\n            visibleColumns\n        ]);\n        getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n            instance: getInstance()\n        });\n        getInstance().getTableBodyProps = makePropGetter(getHooks().getTableBodyProps, {\n            instance: getInstance()\n        });\n        loopHooks(getHooks().useFinalInstance, getInstance());\n        return getInstance();\n    };\n    function calculateHeaderWidths(headers, left) {\n        if (left === void 0) left = 0;\n        var sumTotalMinWidth = 0;\n        var sumTotalWidth = 0;\n        var sumTotalMaxWidth = 0;\n        var sumTotalFlexWidth = 0;\n        headers.forEach(function(header) {\n            var subHeaders = header.headers;\n            header.totalLeft = left;\n            if (subHeaders && subHeaders.length) {\n                var _calculateHeaderWidth2 = calculateHeaderWidths(subHeaders, left), totalMinWidth = _calculateHeaderWidth2[0], totalWidth = _calculateHeaderWidth2[1], totalMaxWidth = _calculateHeaderWidth2[2], totalFlexWidth = _calculateHeaderWidth2[3];\n                header.totalMinWidth = totalMinWidth;\n                header.totalWidth = totalWidth;\n                header.totalMaxWidth = totalMaxWidth;\n                header.totalFlexWidth = totalFlexWidth;\n            } else {\n                header.totalMinWidth = header.minWidth;\n                header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);\n                header.totalMaxWidth = header.maxWidth;\n                header.totalFlexWidth = header.canResize ? header.totalWidth : 0;\n            }\n            if (header.isVisible) {\n                left += header.totalWidth;\n                sumTotalMinWidth += header.totalMinWidth;\n                sumTotalWidth += header.totalWidth;\n                sumTotalMaxWidth += header.totalMaxWidth;\n                sumTotalFlexWidth += header.totalFlexWidth;\n            }\n        });\n        return [\n            sumTotalMinWidth,\n            sumTotalWidth,\n            sumTotalMaxWidth,\n            sumTotalFlexWidth\n        ];\n    }\n    function accessRowsForColumn(_ref) {\n        var data = _ref.data, rows = _ref.rows, flatRows = _ref.flatRows, rowsById = _ref.rowsById, column = _ref.column, getRowId = _ref.getRowId, getSubRows = _ref.getSubRows, accessValueHooks = _ref.accessValueHooks, getInstance = _ref.getInstance;\n        // Access the row's data column-by-column\n        // We do it this way so we can incrementally add materialized\n        // columns after the first pass and avoid excessive looping\n        var accessRow = function accessRow(originalRow, rowIndex, depth, parent, parentRows) {\n            if (depth === void 0) depth = 0;\n            // Keep the original reference around\n            var original = originalRow;\n            var id = getRowId(originalRow, rowIndex, parent);\n            var row = rowsById[id]; // If the row hasn't been created, let's make it\n            if (!row) {\n                row = {\n                    id: id,\n                    original: original,\n                    index: rowIndex,\n                    depth: depth,\n                    cells: [\n                        {}\n                    ] // This is a dummy cell\n                }; // Override common array functions (and the dummy cell's getCellProps function)\n                // to show an error if it is accessed without calling prepareRow\n                row.cells.map = unpreparedAccessWarning;\n                row.cells.filter = unpreparedAccessWarning;\n                row.cells.forEach = unpreparedAccessWarning;\n                row.cells[0].getCellProps = unpreparedAccessWarning; // Create the cells and values\n                row.values = {}; // Push this row into the parentRows array\n                parentRows.push(row); // Keep track of every row in a flat array\n                flatRows.push(row); // Also keep track of every row by its ID\n                rowsById[id] = row; // Get the original subrows\n                row.originalSubRows = getSubRows(originalRow, rowIndex); // Then recursively access them\n                if (row.originalSubRows) {\n                    var subRows = [];\n                    row.originalSubRows.forEach(function(d, i) {\n                        return accessRow(d, i, depth + 1, row, subRows);\n                    }); // Keep the new subRows array on the row\n                    row.subRows = subRows;\n                }\n            } else if (row.subRows) // If the row exists, then it's already been accessed\n            // Keep recursing, but don't worry about passing the\n            // accumlator array (those rows already exist)\n            row.originalSubRows.forEach(function(d, i) {\n                return accessRow(d, i, depth + 1, row);\n            });\n             // If the column has an accessor, use it to get a value\n            if (column.accessor) row.values[column.id] = column.accessor(originalRow, rowIndex, row, parentRows, data);\n             // Allow plugins to manipulate the column value\n            row.values[column.id] = reduceHooks(accessValueHooks, row.values[column.id], {\n                row: row,\n                column: column,\n                instance: getInstance()\n            }, true);\n        };\n        data.forEach(function(originalRow, rowIndex) {\n            return accessRow(originalRow, rowIndex, 0, undefined, rows);\n        });\n    }\n    actions.resetExpanded = 'resetExpanded';\n    actions.toggleRowExpanded = 'toggleRowExpanded';\n    actions.toggleAllRowsExpanded = 'toggleAllRowsExpanded';\n    var useExpanded = function useExpanded(hooks) {\n        hooks.getToggleAllRowsExpandedProps = [\n            defaultGetToggleAllRowsExpandedProps\n        ];\n        hooks.getToggleRowExpandedProps = [\n            defaultGetToggleRowExpandedProps\n        ];\n        hooks.stateReducers.push(reducer$1);\n        hooks.useInstance.push(useInstance$1);\n        hooks.prepareRow.push(prepareRow);\n    };\n    useExpanded.pluginName = 'useExpanded';\n    var defaultGetToggleAllRowsExpandedProps = function defaultGetToggleAllRowsExpandedProps(props, _ref) {\n        var instance = _ref.instance;\n        return [\n            props,\n            {\n                onClick: function onClick(e) {\n                    instance.toggleAllRowsExpanded();\n                },\n                style: {\n                    cursor: 'pointer'\n                },\n                title: 'Toggle All Rows Expanded'\n            }\n        ];\n    };\n    var defaultGetToggleRowExpandedProps = function defaultGetToggleRowExpandedProps(props, _ref2) {\n        var row = _ref2.row;\n        return [\n            props,\n            {\n                onClick: function onClick() {\n                    row.toggleRowExpanded();\n                },\n                style: {\n                    cursor: 'pointer'\n                },\n                title: 'Toggle Row Expanded'\n            }\n        ];\n    }; // Reducer\n    function reducer$1(state, action, previousState, instance) {\n        if (action.type === actions.init) return _extends({\n            expanded: {}\n        }, state);\n        if (action.type === actions.resetExpanded) return _extends({}, state, {\n            expanded: instance.initialState.expanded || {}\n        });\n        if (action.type === actions.toggleAllRowsExpanded) {\n            var value = action.value;\n            var rowsById = instance.rowsById;\n            var isAllRowsExpanded = Object.keys(rowsById).length === Object.keys(state.expanded).length;\n            var expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded;\n            if (expandAll) {\n                var expanded = {};\n                Object.keys(rowsById).forEach(function(rowId) {\n                    expanded[rowId] = true;\n                });\n                return _extends({}, state, {\n                    expanded: expanded\n                });\n            }\n            return _extends({}, state, {\n                expanded: {}\n            });\n        }\n        if (action.type === actions.toggleRowExpanded) {\n            var id = action.id, setExpanded = action.value;\n            var exists = state.expanded[id];\n            var shouldExist = typeof setExpanded !== 'undefined' ? setExpanded : !exists;\n            if (!exists && shouldExist) {\n                var _extends2;\n                return _extends({}, state, {\n                    expanded: _extends({}, state.expanded, (_extends2 = {}, _extends2[id] = true, _extends2))\n                });\n            } else if (exists && !shouldExist) {\n                var _state$expanded = state.expanded, _ = _state$expanded[id], rest = _objectWithoutPropertiesLoose(_state$expanded, [\n                    id\n                ].map(_toPropertyKey));\n                return _extends({}, state, {\n                    expanded: rest\n                });\n            } else return state;\n        }\n    }\n    function useInstance$1(instance) {\n        var data = instance.data, rows = instance.rows, rowsById = instance.rowsById, _instance$manualExpan = instance.manualExpandedKey, manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan, _instance$paginateExp = instance.paginateExpandedRows, paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp, _instance$expandSubRo = instance.expandSubRows, expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo, _instance$autoResetEx = instance.autoResetExpanded, autoResetExpanded = _instance$autoResetEx === void 0 ? true : _instance$autoResetEx, getHooks = instance.getHooks, plugins = instance.plugins, expanded = instance.state.expanded, dispatch = instance.dispatch;\n        ensurePluginOrder(plugins, [\n            'useSortBy',\n            'useGroupBy',\n            'usePivotColumns',\n            'useGlobalFilter'\n        ], 'useExpanded');\n        var getAutoResetExpanded = useGetLatest(autoResetExpanded);\n        var isAllRowsExpanded = Boolean(Object.keys(rowsById).length && Object.keys(expanded).length);\n        if (isAllRowsExpanded) {\n            if (Object.keys(rowsById).some(function(id) {\n                return !expanded[id];\n            })) isAllRowsExpanded = false;\n        } // Bypass any effects from firing when this changes\n        useMountedLayoutEffect(function() {\n            if (getAutoResetExpanded()) dispatch({\n                type: actions.resetExpanded\n            });\n        }, [\n            dispatch,\n            data\n        ]);\n        var toggleRowExpanded = React.useCallback(function(id, value) {\n            dispatch({\n                type: actions.toggleRowExpanded,\n                id: id,\n                value: value\n            });\n        }, [\n            dispatch\n        ]);\n        var toggleAllRowsExpanded = React.useCallback(function(value) {\n            return dispatch({\n                type: actions.toggleAllRowsExpanded,\n                value: value\n            });\n        }, [\n            dispatch\n        ]);\n        var expandedRows = React.useMemo(function() {\n            if (paginateExpandedRows) return expandRows(rows, {\n                manualExpandedKey: manualExpandedKey,\n                expanded: expanded,\n                expandSubRows: expandSubRows\n            });\n            return rows;\n        }, [\n            paginateExpandedRows,\n            rows,\n            manualExpandedKey,\n            expanded,\n            expandSubRows\n        ]);\n        var expandedDepth = React.useMemo(function() {\n            return findExpandedDepth(expanded);\n        }, [\n            expanded\n        ]);\n        var getInstance = useGetLatest(instance);\n        var getToggleAllRowsExpandedProps = makePropGetter(getHooks().getToggleAllRowsExpandedProps, {\n            instance: getInstance()\n        });\n        Object.assign(instance, {\n            preExpandedRows: rows,\n            expandedRows: expandedRows,\n            rows: expandedRows,\n            expandedDepth: expandedDepth,\n            isAllRowsExpanded: isAllRowsExpanded,\n            toggleRowExpanded: toggleRowExpanded,\n            toggleAllRowsExpanded: toggleAllRowsExpanded,\n            getToggleAllRowsExpandedProps: getToggleAllRowsExpandedProps\n        });\n    }\n    function prepareRow(row, _ref3) {\n        var getHooks = _ref3.instance.getHooks, instance = _ref3.instance;\n        row.toggleRowExpanded = function(set) {\n            return instance.toggleRowExpanded(row.id, set);\n        };\n        row.getToggleRowExpandedProps = makePropGetter(getHooks().getToggleRowExpandedProps, {\n            instance: instance,\n            row: row\n        });\n    }\n    function findExpandedDepth(expanded) {\n        var maxDepth = 0;\n        Object.keys(expanded).forEach(function(id) {\n            var splitId = id.split('.');\n            maxDepth = Math.max(maxDepth, splitId.length);\n        });\n        return maxDepth;\n    }\n    var text = function text(rows, ids, filterValue) {\n        rows = rows.filter(function(row) {\n            return ids.some(function(id) {\n                var rowValue = row.values[id];\n                return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());\n            });\n        });\n        return rows;\n    };\n    text.autoRemove = function(val) {\n        return !val;\n    };\n    var exactText = function exactText(rows, ids, filterValue) {\n        return rows.filter(function(row) {\n            return ids.some(function(id) {\n                var rowValue = row.values[id];\n                return rowValue !== undefined ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;\n            });\n        });\n    };\n    exactText.autoRemove = function(val) {\n        return !val;\n    };\n    var exactTextCase = function exactTextCase(rows, ids, filterValue) {\n        return rows.filter(function(row) {\n            return ids.some(function(id) {\n                var rowValue = row.values[id];\n                return rowValue !== undefined ? String(rowValue) === String(filterValue) : true;\n            });\n        });\n    };\n    exactTextCase.autoRemove = function(val) {\n        return !val;\n    };\n    var includes = function includes(rows, ids, filterValue) {\n        return rows.filter(function(row) {\n            return ids.some(function(id) {\n                var rowValue = row.values[id];\n                return rowValue.includes(filterValue);\n            });\n        });\n    };\n    includes.autoRemove = function(val) {\n        return !val || !val.length;\n    };\n    var includesAll = function includesAll(rows, ids, filterValue) {\n        return rows.filter(function(row) {\n            return ids.some(function(id) {\n                var rowValue = row.values[id];\n                return rowValue && rowValue.length && filterValue.every(function(val) {\n                    return rowValue.includes(val);\n                });\n            });\n        });\n    };\n    includesAll.autoRemove = function(val) {\n        return !val || !val.length;\n    };\n    var includesSome = function includesSome(rows, ids, filterValue) {\n        return rows.filter(function(row) {\n            return ids.some(function(id) {\n                var rowValue = row.values[id];\n                return rowValue && rowValue.length && filterValue.some(function(val) {\n                    return rowValue.includes(val);\n                });\n            });\n        });\n    };\n    includesSome.autoRemove = function(val) {\n        return !val || !val.length;\n    };\n    var includesValue = function includesValue(rows, ids, filterValue) {\n        return rows.filter(function(row) {\n            return ids.some(function(id) {\n                var rowValue = row.values[id];\n                return filterValue.includes(rowValue);\n            });\n        });\n    };\n    includesValue.autoRemove = function(val) {\n        return !val || !val.length;\n    };\n    var exact = function exact(rows, ids, filterValue) {\n        return rows.filter(function(row) {\n            return ids.some(function(id) {\n                var rowValue = row.values[id];\n                return rowValue === filterValue;\n            });\n        });\n    };\n    exact.autoRemove = function(val) {\n        return typeof val === 'undefined';\n    };\n    var equals = function equals(rows, ids, filterValue) {\n        return rows.filter(function(row) {\n            return ids.some(function(id) {\n                var rowValue = row.values[id]; // eslint-disable-next-line eqeqeq\n                return rowValue == filterValue;\n            });\n        });\n    };\n    equals.autoRemove = function(val) {\n        return val == null;\n    };\n    var between = function between(rows, ids, filterValue) {\n        var _ref = filterValue || [], min = _ref[0], max = _ref[1];\n        min = typeof min === 'number' ? min : -Infinity;\n        max = typeof max === 'number' ? max : Infinity;\n        if (min > max) {\n            var temp = min;\n            min = max;\n            max = temp;\n        }\n        return rows.filter(function(row) {\n            return ids.some(function(id) {\n                var rowValue = row.values[id];\n                return rowValue >= min && rowValue <= max;\n            });\n        });\n    };\n    between.autoRemove = function(val) {\n        return !val || typeof val[0] !== 'number' && typeof val[1] !== 'number';\n    };\n    var filterTypes = /*#__PURE__*/ Object.freeze({\n        __proto__: null,\n        text: text,\n        exactText: exactText,\n        exactTextCase: exactTextCase,\n        includes: includes,\n        includesAll: includesAll,\n        includesSome: includesSome,\n        includesValue: includesValue,\n        exact: exact,\n        equals: equals,\n        between: between\n    });\n    actions.resetFilters = 'resetFilters';\n    actions.setFilter = 'setFilter';\n    actions.setAllFilters = 'setAllFilters';\n    var useFilters = function useFilters(hooks) {\n        hooks.stateReducers.push(reducer$2);\n        hooks.useInstance.push(useInstance$2);\n    };\n    useFilters.pluginName = 'useFilters';\n    function reducer$2(state, action, previousState, instance) {\n        if (action.type === actions.init) return _extends({\n            filters: []\n        }, state);\n        if (action.type === actions.resetFilters) return _extends({}, state, {\n            filters: instance.initialState.filters || []\n        });\n        if (action.type === actions.setFilter) {\n            var columnId = action.columnId, filterValue = action.filterValue;\n            var allColumns = instance.allColumns, userFilterTypes = instance.filterTypes;\n            var column = allColumns.find(function(d) {\n                return d.id === columnId;\n            });\n            if (!column) throw new Error(\"React-Table: Could not find a column with id: \" + columnId);\n            var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n            var previousfilter = state.filters.find(function(d) {\n                return d.id === columnId;\n            });\n            var newFilter = functionalUpdate(filterValue, previousfilter && previousfilter.value); //\n            if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) return _extends({}, state, {\n                filters: state.filters.filter(function(d) {\n                    return d.id !== columnId;\n                })\n            });\n            if (previousfilter) return _extends({}, state, {\n                filters: state.filters.map(function(d) {\n                    if (d.id === columnId) return {\n                        id: columnId,\n                        value: newFilter\n                    };\n                    return d;\n                })\n            });\n            return _extends({}, state, {\n                filters: [].concat(state.filters, [\n                    {\n                        id: columnId,\n                        value: newFilter\n                    }\n                ])\n            });\n        }\n        if (action.type === actions.setAllFilters) {\n            var filters = action.filters;\n            var _allColumns = instance.allColumns, _userFilterTypes = instance.filterTypes;\n            return _extends({}, state, {\n                // Filter out undefined values\n                filters: functionalUpdate(filters, state.filters).filter(function(filter) {\n                    var column = _allColumns.find(function(d) {\n                        return d.id === filter.id;\n                    });\n                    var filterMethod = getFilterMethod(column.filter, _userFilterTypes || {}, filterTypes);\n                    if (shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)) return false;\n                    return true;\n                })\n            });\n        }\n    }\n    function useInstance$2(instance) {\n        var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns = instance.allColumns, userFilterTypes = instance.filterTypes, manualFilters = instance.manualFilters, _instance$defaultCanF = instance.defaultCanFilter, defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF, disableFilters = instance.disableFilters, filters = instance.state.filters, dispatch = instance.dispatch, _instance$autoResetFi = instance.autoResetFilters, autoResetFilters = _instance$autoResetFi === void 0 ? true : _instance$autoResetFi;\n        var setFilter = React.useCallback(function(columnId, filterValue) {\n            dispatch({\n                type: actions.setFilter,\n                columnId: columnId,\n                filterValue: filterValue\n            });\n        }, [\n            dispatch\n        ]);\n        var setAllFilters = React.useCallback(function(filters) {\n            dispatch({\n                type: actions.setAllFilters,\n                filters: filters\n            });\n        }, [\n            dispatch\n        ]);\n        allColumns.forEach(function(column) {\n            var id = column.id, accessor = column.accessor, columnDefaultCanFilter = column.defaultCanFilter, columnDisableFilters = column.disableFilters; // Determine if a column is filterable\n            column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : undefined, disableFilters === true ? false : undefined, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false); // Provide the column a way of updating the filter value\n            column.setFilter = function(val) {\n                return setFilter(column.id, val);\n            }; // Provide the current filter value to the column for\n            // convenience\n            var found = filters.find(function(d) {\n                return d.id === id;\n            });\n            column.filterValue = found && found.value;\n        });\n        var _React$useMemo = React.useMemo(function() {\n            if (manualFilters || !filters.length) return [\n                rows,\n                flatRows,\n                rowsById\n            ];\n            var filteredFlatRows = [];\n            var filteredRowsById = {}; // Filters top level and nested rows\n            var filterRows = function filterRows(rows, depth) {\n                if (depth === void 0) depth = 0;\n                var filteredRows = rows;\n                filteredRows = filters.reduce(function(filteredSoFar, _ref) {\n                    var columnId = _ref.id, filterValue = _ref.value;\n                    // Find the filters column\n                    var column = allColumns.find(function(d) {\n                        return d.id === columnId;\n                    });\n                    if (!column) return filteredSoFar;\n                    if (depth === 0) column.preFilteredRows = filteredSoFar;\n                    var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n                    if (!filterMethod) {\n                        console.warn(\"Could not find a valid 'column.filter' for column with the ID: \" + column.id + \".\");\n                        return filteredSoFar;\n                    } // Pass the rows, id, filterValue and column to the filterMethod\n                    // to get the filtered rows back\n                    column.filteredRows = filterMethod(filteredSoFar, [\n                        columnId\n                    ], filterValue);\n                    return column.filteredRows;\n                }, rows); // Apply the filter to any subRows\n                // We technically could do this recursively in the above loop,\n                // but that would severely hinder the API for the user, since they\n                // would be required to do that recursion in some scenarios\n                filteredRows.forEach(function(row) {\n                    filteredFlatRows.push(row);\n                    filteredRowsById[row.id] = row;\n                    if (!row.subRows) return;\n                    row.subRows = row.subRows && row.subRows.length > 0 ? filterRows(row.subRows, depth + 1) : row.subRows;\n                });\n                return filteredRows;\n            };\n            return [\n                filterRows(rows),\n                filteredFlatRows,\n                filteredRowsById\n            ];\n        }, [\n            manualFilters,\n            filters,\n            rows,\n            flatRows,\n            rowsById,\n            allColumns,\n            userFilterTypes\n        ]), filteredRows = _React$useMemo[0], filteredFlatRows = _React$useMemo[1], filteredRowsById = _React$useMemo[2];\n        React.useMemo(function() {\n            // Now that each filtered column has it's partially filtered rows,\n            // lets assign the final filtered rows to all of the other columns\n            var nonFilteredColumns = allColumns.filter(function(column) {\n                return !filters.find(function(d) {\n                    return d.id === column.id;\n                });\n            }); // This essentially enables faceted filter options to be built easily\n            // using every column's preFilteredRows value\n            nonFilteredColumns.forEach(function(column) {\n                column.preFilteredRows = filteredRows;\n                column.filteredRows = filteredRows;\n            });\n        }, [\n            filteredRows,\n            filters,\n            allColumns\n        ]);\n        var getAutoResetFilters = useGetLatest(autoResetFilters);\n        useMountedLayoutEffect(function() {\n            if (getAutoResetFilters()) dispatch({\n                type: actions.resetFilters\n            });\n        }, [\n            dispatch,\n            manualFilters ? null : data\n        ]);\n        Object.assign(instance, {\n            preFilteredRows: rows,\n            preFilteredFlatRows: flatRows,\n            preFilteredRowsById: rowsById,\n            filteredRows: filteredRows,\n            filteredFlatRows: filteredFlatRows,\n            filteredRowsById: filteredRowsById,\n            rows: filteredRows,\n            flatRows: filteredFlatRows,\n            rowsById: filteredRowsById,\n            setFilter: setFilter,\n            setAllFilters: setAllFilters\n        });\n    }\n    actions.resetGlobalFilter = 'resetGlobalFilter';\n    actions.setGlobalFilter = 'setGlobalFilter';\n    var useGlobalFilter = function useGlobalFilter(hooks) {\n        hooks.stateReducers.push(reducer$3);\n        hooks.useInstance.push(useInstance$3);\n    };\n    useGlobalFilter.pluginName = 'useGlobalFilter';\n    function reducer$3(state, action, previousState, instance) {\n        if (action.type === actions.resetGlobalFilter) return _extends({}, state, {\n            globalFilter: instance.initialState.globalFilter || undefined\n        });\n        if (action.type === actions.setGlobalFilter) {\n            var filterValue = action.filterValue;\n            var userFilterTypes = instance.userFilterTypes;\n            var filterMethod = getFilterMethod(instance.globalFilter, userFilterTypes || {}, filterTypes);\n            var newFilter = functionalUpdate(filterValue, state.globalFilter); //\n            if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n                var globalFilter = state.globalFilter, stateWithoutGlobalFilter = _objectWithoutPropertiesLoose(state, [\n                    \"globalFilter\"\n                ]);\n                return stateWithoutGlobalFilter;\n            }\n            return _extends({}, state, {\n                globalFilter: newFilter\n            });\n        }\n    }\n    function useInstance$3(instance) {\n        var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns = instance.allColumns, userFilterTypes = instance.filterTypes, globalFilter = instance.globalFilter, manualGlobalFilter = instance.manualGlobalFilter, globalFilterValue = instance.state.globalFilter, dispatch = instance.dispatch, _instance$autoResetGl = instance.autoResetGlobalFilter, autoResetGlobalFilter = _instance$autoResetGl === void 0 ? true : _instance$autoResetGl, disableGlobalFilter = instance.disableGlobalFilter;\n        var setGlobalFilter = React.useCallback(function(filterValue) {\n            dispatch({\n                type: actions.setGlobalFilter,\n                filterValue: filterValue\n            });\n        }, [\n            dispatch\n        ]); // TODO: Create a filter cache for incremental high speed multi-filtering\n        // This gets pretty complicated pretty fast, since you have to maintain a\n        // cache for each row group (top-level rows, and each row's recursive subrows)\n        // This would make multi-filtering a lot faster though. Too far?\n        var _React$useMemo = React.useMemo(function() {\n            if (manualGlobalFilter || typeof globalFilterValue === 'undefined') return [\n                rows,\n                flatRows,\n                rowsById\n            ];\n            var filteredFlatRows = [];\n            var filteredRowsById = {};\n            var filterMethod = getFilterMethod(globalFilter, userFilterTypes || {}, filterTypes);\n            if (!filterMethod) {\n                console.warn(\"Could not find a valid 'globalFilter' option.\");\n                return rows;\n            }\n            allColumns.forEach(function(column) {\n                var columnDisableGlobalFilter = column.disableGlobalFilter;\n                column.canFilter = getFirstDefined(columnDisableGlobalFilter === true ? false : undefined, disableGlobalFilter === true ? false : undefined, true);\n            });\n            var filterableColumns = allColumns.filter(function(c) {\n                return c.canFilter === true;\n            }); // Filters top level and nested rows\n            var filterRows = function filterRows(filteredRows) {\n                filteredRows = filterMethod(filteredRows, filterableColumns.map(function(d) {\n                    return d.id;\n                }), globalFilterValue);\n                filteredRows.forEach(function(row) {\n                    filteredFlatRows.push(row);\n                    filteredRowsById[row.id] = row;\n                    row.subRows = row.subRows && row.subRows.length ? filterRows(row.subRows) : row.subRows;\n                });\n                return filteredRows;\n            };\n            return [\n                filterRows(rows),\n                filteredFlatRows,\n                filteredRowsById\n            ];\n        }, [\n            manualGlobalFilter,\n            globalFilterValue,\n            globalFilter,\n            userFilterTypes,\n            allColumns,\n            rows,\n            flatRows,\n            rowsById,\n            disableGlobalFilter\n        ]), globalFilteredRows = _React$useMemo[0], globalFilteredFlatRows = _React$useMemo[1], globalFilteredRowsById = _React$useMemo[2];\n        var getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter);\n        useMountedLayoutEffect(function() {\n            if (getAutoResetGlobalFilter()) dispatch({\n                type: actions.resetGlobalFilter\n            });\n        }, [\n            dispatch,\n            manualGlobalFilter ? null : data\n        ]);\n        Object.assign(instance, {\n            preGlobalFilteredRows: rows,\n            preGlobalFilteredFlatRows: flatRows,\n            preGlobalFilteredRowsById: rowsById,\n            globalFilteredRows: globalFilteredRows,\n            globalFilteredFlatRows: globalFilteredFlatRows,\n            globalFilteredRowsById: globalFilteredRowsById,\n            rows: globalFilteredRows,\n            flatRows: globalFilteredFlatRows,\n            rowsById: globalFilteredRowsById,\n            setGlobalFilter: setGlobalFilter,\n            disableGlobalFilter: disableGlobalFilter\n        });\n    }\n    function sum(values, aggregatedValues) {\n        // It's faster to just add the aggregations together instead of\n        // process leaf nodes individually\n        return aggregatedValues.reduce(function(sum, next) {\n            return sum + (typeof next === 'number' ? next : 0);\n        }, 0);\n    }\n    function min(values) {\n        var min = values[0] || 0;\n        values.forEach(function(value) {\n            if (typeof value === 'number') min = Math.min(min, value);\n        });\n        return min;\n    }\n    function max(values) {\n        var max = values[0] || 0;\n        values.forEach(function(value) {\n            if (typeof value === 'number') max = Math.max(max, value);\n        });\n        return max;\n    }\n    function minMax(values) {\n        var min = values[0] || 0;\n        var max = values[0] || 0;\n        values.forEach(function(value) {\n            if (typeof value === 'number') {\n                min = Math.min(min, value);\n                max = Math.max(max, value);\n            }\n        });\n        return min + \"..\" + max;\n    }\n    function average(values) {\n        return sum(null, values) / values.length;\n    }\n    function median(values) {\n        if (!values.length) return null;\n        var mid = Math.floor(values.length / 2);\n        var nums = [].concat(values).sort(function(a, b) {\n            return a - b;\n        });\n        return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n    }\n    function unique(values) {\n        return Array.from(new Set(values).values());\n    }\n    function uniqueCount(values) {\n        return new Set(values).size;\n    }\n    function count(values) {\n        return values.length;\n    }\n    var aggregations = /*#__PURE__*/ Object.freeze({\n        __proto__: null,\n        sum: sum,\n        min: min,\n        max: max,\n        minMax: minMax,\n        average: average,\n        median: median,\n        unique: unique,\n        uniqueCount: uniqueCount,\n        count: count\n    });\n    var emptyArray = [];\n    var emptyObject = {}; // Actions\n    actions.resetGroupBy = 'resetGroupBy';\n    actions.setGroupBy = 'setGroupBy';\n    actions.toggleGroupBy = 'toggleGroupBy';\n    var useGroupBy = function useGroupBy(hooks) {\n        hooks.getGroupByToggleProps = [\n            defaultGetGroupByToggleProps\n        ];\n        hooks.stateReducers.push(reducer$4);\n        hooks.visibleColumnsDeps.push(function(deps, _ref) {\n            var instance = _ref.instance;\n            return [].concat(deps, [\n                instance.state.groupBy\n            ]);\n        });\n        hooks.visibleColumns.push(visibleColumns);\n        hooks.useInstance.push(useInstance$4);\n        hooks.prepareRow.push(prepareRow$1);\n    };\n    useGroupBy.pluginName = 'useGroupBy';\n    var defaultGetGroupByToggleProps = function defaultGetGroupByToggleProps(props, _ref2) {\n        var header = _ref2.header;\n        return [\n            props,\n            {\n                onClick: header.canGroupBy ? function(e) {\n                    e.persist();\n                    header.toggleGroupBy();\n                } : undefined,\n                style: {\n                    cursor: header.canGroupBy ? 'pointer' : undefined\n                },\n                title: 'Toggle GroupBy'\n            }\n        ];\n    }; // Reducer\n    function reducer$4(state, action, previousState, instance) {\n        if (action.type === actions.init) return _extends({\n            groupBy: []\n        }, state);\n        if (action.type === actions.resetGroupBy) return _extends({}, state, {\n            groupBy: instance.initialState.groupBy || []\n        });\n        if (action.type === actions.setGroupBy) {\n            var value = action.value;\n            return _extends({}, state, {\n                groupBy: value\n            });\n        }\n        if (action.type === actions.toggleGroupBy) {\n            var columnId = action.columnId, setGroupBy = action.value;\n            var resolvedGroupBy = typeof setGroupBy !== 'undefined' ? setGroupBy : !state.groupBy.includes(columnId);\n            if (resolvedGroupBy) return _extends({}, state, {\n                groupBy: [].concat(state.groupBy, [\n                    columnId\n                ])\n            });\n            return _extends({}, state, {\n                groupBy: state.groupBy.filter(function(d) {\n                    return d !== columnId;\n                })\n            });\n        }\n    }\n    function visibleColumns(columns, _ref3) {\n        var groupBy = _ref3.instance.state.groupBy;\n        // Sort grouped columns to the start of the column list\n        // before the headers are built\n        var groupByColumns = groupBy.map(function(g) {\n            return columns.find(function(col) {\n                return col.id === g;\n            });\n        }).filter(Boolean);\n        var nonGroupByColumns = columns.filter(function(col) {\n            return !groupBy.includes(col.id);\n        });\n        columns = [].concat(groupByColumns, nonGroupByColumns);\n        columns.forEach(function(column) {\n            column.isGrouped = groupBy.includes(column.id);\n            column.groupedIndex = groupBy.indexOf(column.id);\n        });\n        return columns;\n    }\n    var defaultUserAggregations = {};\n    function useInstance$4(instance) {\n        var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns = instance.allColumns, flatHeaders = instance.flatHeaders, _instance$groupByFn = instance.groupByFn, groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn, manualGroupBy = instance.manualGroupBy, _instance$aggregation = instance.aggregations, userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation, plugins = instance.plugins, groupBy = instance.state.groupBy, dispatch = instance.dispatch, _instance$autoResetGr = instance.autoResetGroupBy, autoResetGroupBy = _instance$autoResetGr === void 0 ? true : _instance$autoResetGr, disableGroupBy = instance.disableGroupBy, defaultCanGroupBy = instance.defaultCanGroupBy, getHooks = instance.getHooks;\n        ensurePluginOrder(plugins, [\n            'useColumnOrder',\n            'useFilters'\n        ], 'useGroupBy');\n        var getInstance = useGetLatest(instance);\n        allColumns.forEach(function(column) {\n            var accessor = column.accessor, defaultColumnGroupBy = column.defaultGroupBy, columnDisableGroupBy = column.disableGroupBy;\n            column.canGroupBy = accessor ? getFirstDefined(column.canGroupBy, columnDisableGroupBy === true ? false : undefined, disableGroupBy === true ? false : undefined, true) : getFirstDefined(column.canGroupBy, defaultColumnGroupBy, defaultCanGroupBy, false);\n            if (column.canGroupBy) column.toggleGroupBy = function() {\n                return instance.toggleGroupBy(column.id);\n            };\n            column.Aggregated = column.Aggregated || column.Cell;\n        });\n        var toggleGroupBy = React.useCallback(function(columnId, value) {\n            dispatch({\n                type: actions.toggleGroupBy,\n                columnId: columnId,\n                value: value\n            });\n        }, [\n            dispatch\n        ]);\n        var setGroupBy = React.useCallback(function(value) {\n            dispatch({\n                type: actions.setGroupBy,\n                value: value\n            });\n        }, [\n            dispatch\n        ]);\n        flatHeaders.forEach(function(header) {\n            header.getGroupByToggleProps = makePropGetter(getHooks().getGroupByToggleProps, {\n                instance: getInstance(),\n                header: header\n            });\n        });\n        var _React$useMemo = React.useMemo(function() {\n            if (manualGroupBy || !groupBy.length) return [\n                rows,\n                flatRows,\n                rowsById,\n                emptyArray,\n                emptyObject,\n                flatRows,\n                rowsById\n            ];\n             // Ensure that the list of filtered columns exist\n            var existingGroupBy = groupBy.filter(function(g) {\n                return allColumns.find(function(col) {\n                    return col.id === g;\n                });\n            }); // Find the columns that can or are aggregating\n            // Uses each column to aggregate rows into a single value\n            var aggregateRowsToValues = function aggregateRowsToValues(leafRows, groupedRows, depth) {\n                var values = {};\n                allColumns.forEach(function(column) {\n                    // Don't aggregate columns that are in the groupBy\n                    if (existingGroupBy.includes(column.id)) {\n                        values[column.id] = groupedRows[0] ? groupedRows[0].values[column.id] : null;\n                        return;\n                    } // Aggregate the values\n                    var aggregateFn = typeof column.aggregate === 'function' ? column.aggregate : userAggregations[column.aggregate] || aggregations[column.aggregate];\n                    if (aggregateFn) {\n                        // Get the columnValues to aggregate\n                        var groupedValues = groupedRows.map(function(row) {\n                            return row.values[column.id];\n                        }); // Get the columnValues to aggregate\n                        var leafValues = leafRows.map(function(row) {\n                            var columnValue = row.values[column.id];\n                            if (!depth && column.aggregateValue) {\n                                var aggregateValueFn = typeof column.aggregateValue === 'function' ? column.aggregateValue : userAggregations[column.aggregateValue] || aggregations[column.aggregateValue];\n                                if (!aggregateValueFn) {\n                                    console.info({\n                                        column: column\n                                    });\n                                    throw new Error(\"React Table: Invalid column.aggregateValue option for column listed above\");\n                                }\n                                columnValue = aggregateValueFn(columnValue, row, column);\n                            }\n                            return columnValue;\n                        });\n                        values[column.id] = aggregateFn(leafValues, groupedValues);\n                    } else if (column.aggregate) {\n                        console.info({\n                            column: column\n                        });\n                        throw new Error(\"React Table: Invalid column.aggregate option for column listed above\");\n                    } else values[column.id] = null;\n                });\n                return values;\n            };\n            var groupedFlatRows = [];\n            var groupedRowsById = {};\n            var onlyGroupedFlatRows = [];\n            var onlyGroupedRowsById = {};\n            var nonGroupedFlatRows = [];\n            var nonGroupedRowsById = {}; // Recursively group the data\n            var groupUpRecursively = function groupUpRecursively(rows, depth, parentId) {\n                if (depth === void 0) depth = 0;\n                // This is the last level, just return the rows\n                if (depth === existingGroupBy.length) return rows.map(function(row) {\n                    return _extends({}, row, {\n                        depth: depth\n                    });\n                });\n                var columnId = existingGroupBy[depth]; // Group the rows together for this level\n                var rowGroupsMap = groupByFn(rows, columnId); // Peform aggregations for each group\n                var aggregatedGroupedRows = Object.entries(rowGroupsMap).map(function(_ref4, index) {\n                    var groupByVal = _ref4[0], groupedRows = _ref4[1];\n                    var id = columnId + \":\" + groupByVal;\n                    id = parentId ? parentId + \">\" + id : id; // First, Recurse to group sub rows before aggregation\n                    var subRows = groupUpRecursively(groupedRows, depth + 1, id); // Flatten the leaf rows of the rows in this group\n                    var leafRows = depth ? flattenBy(groupedRows, 'leafRows') : groupedRows;\n                    var values = aggregateRowsToValues(leafRows, groupedRows, depth);\n                    var row = {\n                        id: id,\n                        isGrouped: true,\n                        groupByID: columnId,\n                        groupByVal: groupByVal,\n                        values: values,\n                        subRows: subRows,\n                        leafRows: leafRows,\n                        depth: depth,\n                        index: index\n                    };\n                    subRows.forEach(function(subRow) {\n                        groupedFlatRows.push(subRow);\n                        groupedRowsById[subRow.id] = subRow;\n                        if (subRow.isGrouped) {\n                            onlyGroupedFlatRows.push(subRow);\n                            onlyGroupedRowsById[subRow.id] = subRow;\n                        } else {\n                            nonGroupedFlatRows.push(subRow);\n                            nonGroupedRowsById[subRow.id] = subRow;\n                        }\n                    });\n                    return row;\n                });\n                return aggregatedGroupedRows;\n            };\n            var groupedRows = groupUpRecursively(rows);\n            groupedRows.forEach(function(subRow) {\n                groupedFlatRows.push(subRow);\n                groupedRowsById[subRow.id] = subRow;\n                if (subRow.isGrouped) {\n                    onlyGroupedFlatRows.push(subRow);\n                    onlyGroupedRowsById[subRow.id] = subRow;\n                } else {\n                    nonGroupedFlatRows.push(subRow);\n                    nonGroupedRowsById[subRow.id] = subRow;\n                }\n            }); // Assign the new data\n            return [\n                groupedRows,\n                groupedFlatRows,\n                groupedRowsById,\n                onlyGroupedFlatRows,\n                onlyGroupedRowsById,\n                nonGroupedFlatRows,\n                nonGroupedRowsById\n            ];\n        }, [\n            manualGroupBy,\n            groupBy,\n            rows,\n            flatRows,\n            rowsById,\n            allColumns,\n            userAggregations,\n            groupByFn\n        ]), groupedRows = _React$useMemo[0], groupedFlatRows = _React$useMemo[1], groupedRowsById = _React$useMemo[2], onlyGroupedFlatRows = _React$useMemo[3], onlyGroupedRowsById = _React$useMemo[4], nonGroupedFlatRows = _React$useMemo[5], nonGroupedRowsById = _React$useMemo[6];\n        var getAutoResetGroupBy = useGetLatest(autoResetGroupBy);\n        useMountedLayoutEffect(function() {\n            if (getAutoResetGroupBy()) dispatch({\n                type: actions.resetGroupBy\n            });\n        }, [\n            dispatch,\n            manualGroupBy ? null : data\n        ]);\n        Object.assign(instance, {\n            preGroupedRows: rows,\n            preGroupedFlatRow: flatRows,\n            preGroupedRowsById: rowsById,\n            groupedRows: groupedRows,\n            groupedFlatRows: groupedFlatRows,\n            groupedRowsById: groupedRowsById,\n            onlyGroupedFlatRows: onlyGroupedFlatRows,\n            onlyGroupedRowsById: onlyGroupedRowsById,\n            nonGroupedFlatRows: nonGroupedFlatRows,\n            nonGroupedRowsById: nonGroupedRowsById,\n            rows: groupedRows,\n            flatRows: groupedFlatRows,\n            rowsById: groupedRowsById,\n            toggleGroupBy: toggleGroupBy,\n            setGroupBy: setGroupBy\n        });\n    }\n    function prepareRow$1(row) {\n        row.allCells.forEach(function(cell) {\n            var _row$subRows;\n            // Grouped cells are in the groupBy and the pivot cell for the row\n            cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID; // Placeholder cells are any columns in the groupBy that are not grouped\n            cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped; // Aggregated cells are not grouped, not repeated, but still have subRows\n            cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && ((_row$subRows = row.subRows) == null ? void 0 : _row$subRows.length);\n        });\n    }\n    function defaultGroupByFn(rows, columnId) {\n        return rows.reduce(function(prev, row, i) {\n            // TODO: Might want to implement a key serializer here so\n            // irregular column values can still be grouped if needed?\n            var resKey = \"\" + row.values[columnId];\n            prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];\n            prev[resKey].push(row);\n            return prev;\n        }, {});\n    }\n    var reSplitAlphaNumeric = /([0-9]+)/gm; // Mixed sorting is slow, but very inclusive of many edge cases.\n    // It handles numbers, mixed alphanumeric combinations, and even\n    // null, undefined, and Infinity\n    var alphanumeric = function alphanumeric(rowA, rowB, columnId) {\n        var _getRowValuesByColumn = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn[0], b = _getRowValuesByColumn[1]; // Force to strings (or \"\" for unsupported types)\n        a = toString(a);\n        b = toString(b); // Split on number groups, but keep the delimiter\n        // Then remove falsey split values\n        a = a.split(reSplitAlphaNumeric).filter(Boolean);\n        b = b.split(reSplitAlphaNumeric).filter(Boolean); // While\n        while(a.length && b.length){\n            var aa = a.shift();\n            var bb = b.shift();\n            var an = parseInt(aa, 10);\n            var bn = parseInt(bb, 10);\n            var combo = [\n                an,\n                bn\n            ].sort(); // Both are string\n            if (isNaN(combo[0])) {\n                if (aa > bb) return 1;\n                if (bb > aa) return -1;\n                continue;\n            } // One is a string, one is a number\n            if (isNaN(combo[1])) return isNaN(an) ? -1 : 1;\n             // Both are numbers\n            if (an > bn) return 1;\n            if (bn > an) return -1;\n        }\n        return a.length - b.length;\n    };\n    function datetime(rowA, rowB, columnId) {\n        var _getRowValuesByColumn2 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn2[0], b = _getRowValuesByColumn2[1];\n        a = a.getTime();\n        b = b.getTime();\n        return compareBasic(a, b);\n    }\n    function basic(rowA, rowB, columnId) {\n        var _getRowValuesByColumn3 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn3[0], b = _getRowValuesByColumn3[1];\n        return compareBasic(a, b);\n    }\n    function string(rowA, rowB, columnId) {\n        var _getRowValuesByColumn4 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn4[0], b = _getRowValuesByColumn4[1];\n        a = a.split('').filter(Boolean);\n        b = b.split('').filter(Boolean);\n        while(a.length && b.length){\n            var aa = a.shift();\n            var bb = b.shift();\n            var alower = aa.toLowerCase();\n            var blower = bb.toLowerCase(); // Case insensitive comparison until characters match\n            if (alower > blower) return 1;\n            if (blower > alower) return -1;\n             // If lowercase characters are identical\n            if (aa > bb) return 1;\n            if (bb > aa) return -1;\n            continue;\n        }\n        return a.length - b.length;\n    }\n    function number(rowA, rowB, columnId) {\n        var _getRowValuesByColumn5 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn5[0], b = _getRowValuesByColumn5[1];\n        var replaceNonNumeric = /[^0-9.]/gi;\n        a = Number(String(a).replace(replaceNonNumeric, ''));\n        b = Number(String(b).replace(replaceNonNumeric, ''));\n        return compareBasic(a, b);\n    } // Utils\n    function compareBasic(a, b) {\n        return a === b ? 0 : a > b ? 1 : -1;\n    }\n    function getRowValuesByColumnID(row1, row2, columnId) {\n        return [\n            row1.values[columnId],\n            row2.values[columnId]\n        ];\n    }\n    function toString(a) {\n        if (typeof a === 'number') {\n            if (isNaN(a) || a === Infinity || a === -Infinity) return '';\n            return String(a);\n        }\n        if (typeof a === 'string') return a;\n        return '';\n    }\n    var sortTypes = /*#__PURE__*/ Object.freeze({\n        __proto__: null,\n        alphanumeric: alphanumeric,\n        datetime: datetime,\n        basic: basic,\n        string: string,\n        number: number\n    });\n    actions.resetSortBy = 'resetSortBy';\n    actions.setSortBy = 'setSortBy';\n    actions.toggleSortBy = 'toggleSortBy';\n    actions.clearSortBy = 'clearSortBy';\n    defaultColumn.sortType = 'alphanumeric';\n    defaultColumn.sortDescFirst = false;\n    var useSortBy = function useSortBy(hooks) {\n        hooks.getSortByToggleProps = [\n            defaultGetSortByToggleProps\n        ];\n        hooks.stateReducers.push(reducer$5);\n        hooks.useInstance.push(useInstance$5);\n    };\n    useSortBy.pluginName = 'useSortBy';\n    var defaultGetSortByToggleProps = function defaultGetSortByToggleProps(props, _ref) {\n        var instance = _ref.instance, column = _ref.column;\n        var _instance$isMultiSort = instance.isMultiSortEvent, isMultiSortEvent = _instance$isMultiSort === void 0 ? function(e) {\n            return e.shiftKey;\n        } : _instance$isMultiSort;\n        return [\n            props,\n            {\n                onClick: column.canSort ? function(e) {\n                    e.persist();\n                    column.toggleSortBy(undefined, !instance.disableMultiSort && isMultiSortEvent(e));\n                } : undefined,\n                style: {\n                    cursor: column.canSort ? 'pointer' : undefined\n                },\n                title: column.canSort ? 'Toggle SortBy' : undefined\n            }\n        ];\n    }; // Reducer\n    function reducer$5(state, action, previousState, instance) {\n        if (action.type === actions.init) return _extends({\n            sortBy: []\n        }, state);\n        if (action.type === actions.resetSortBy) return _extends({}, state, {\n            sortBy: instance.initialState.sortBy || []\n        });\n        if (action.type === actions.clearSortBy) {\n            var sortBy = state.sortBy;\n            var newSortBy = sortBy.filter(function(d) {\n                return d.id !== action.columnId;\n            });\n            return _extends({}, state, {\n                sortBy: newSortBy\n            });\n        }\n        if (action.type === actions.setSortBy) {\n            var _sortBy = action.sortBy;\n            return _extends({}, state, {\n                sortBy: _sortBy\n            });\n        }\n        if (action.type === actions.toggleSortBy) {\n            var columnId = action.columnId, desc = action.desc, multi = action.multi;\n            var allColumns = instance.allColumns, disableMultiSort = instance.disableMultiSort, disableSortRemove = instance.disableSortRemove, disableMultiRemove = instance.disableMultiRemove, _instance$maxMultiSor = instance.maxMultiSortColCount, maxMultiSortColCount = _instance$maxMultiSor === void 0 ? Number.MAX_SAFE_INTEGER : _instance$maxMultiSor;\n            var _sortBy2 = state.sortBy; // Find the column for this columnId\n            var column = allColumns.find(function(d) {\n                return d.id === columnId;\n            });\n            var sortDescFirst = column.sortDescFirst; // Find any existing sortBy for this column\n            var existingSortBy = _sortBy2.find(function(d) {\n                return d.id === columnId;\n            });\n            var existingIndex = _sortBy2.findIndex(function(d) {\n                return d.id === columnId;\n            });\n            var hasDescDefined = typeof desc !== 'undefined' && desc !== null;\n            var _newSortBy = []; // What should we do with this sort action?\n            var sortAction;\n            if (!disableMultiSort && multi) {\n                if (existingSortBy) sortAction = 'toggle';\n                else sortAction = 'add';\n            } else {\n                // Normal mode\n                if (existingIndex !== _sortBy2.length - 1 || _sortBy2.length !== 1) sortAction = 'replace';\n                else if (existingSortBy) sortAction = 'toggle';\n                else sortAction = 'replace';\n            } // Handle toggle states that will remove the sortBy\n            if (sortAction === 'toggle' && // Must be toggling\n            !disableSortRemove && // If disableSortRemove, disable in general\n            !hasDescDefined && (multi ? !disableMultiRemove : true) && (existingSortBy && // Finally, detect if it should indeed be removed\n            existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) sortAction = 'remove';\n            if (sortAction === 'replace') _newSortBy = [\n                {\n                    id: columnId,\n                    desc: hasDescDefined ? desc : sortDescFirst\n                }\n            ];\n            else if (sortAction === 'add') {\n                _newSortBy = [].concat(_sortBy2, [\n                    {\n                        id: columnId,\n                        desc: hasDescDefined ? desc : sortDescFirst\n                    }\n                ]); // Take latest n columns\n                _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);\n            } else if (sortAction === 'toggle') // This flips (or sets) the\n            _newSortBy = _sortBy2.map(function(d) {\n                if (d.id === columnId) return _extends({}, d, {\n                    desc: hasDescDefined ? desc : !existingSortBy.desc\n                });\n                return d;\n            });\n            else if (sortAction === 'remove') _newSortBy = _sortBy2.filter(function(d) {\n                return d.id !== columnId;\n            });\n            return _extends({}, state, {\n                sortBy: _newSortBy\n            });\n        }\n    }\n    function useInstance$5(instance) {\n        var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, allColumns = instance.allColumns, _instance$orderByFn = instance.orderByFn, orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn, userSortTypes = instance.sortTypes, manualSortBy = instance.manualSortBy, defaultCanSort = instance.defaultCanSort, disableSortBy = instance.disableSortBy, flatHeaders = instance.flatHeaders, sortBy = instance.state.sortBy, dispatch = instance.dispatch, plugins = instance.plugins, getHooks = instance.getHooks, _instance$autoResetSo = instance.autoResetSortBy, autoResetSortBy = _instance$autoResetSo === void 0 ? true : _instance$autoResetSo;\n        ensurePluginOrder(plugins, [\n            'useFilters',\n            'useGlobalFilter',\n            'useGroupBy',\n            'usePivotColumns'\n        ], 'useSortBy');\n        var setSortBy = React.useCallback(function(sortBy) {\n            dispatch({\n                type: actions.setSortBy,\n                sortBy: sortBy\n            });\n        }, [\n            dispatch\n        ]); // Updates sorting based on a columnId, desc flag and multi flag\n        var toggleSortBy = React.useCallback(function(columnId, desc, multi) {\n            dispatch({\n                type: actions.toggleSortBy,\n                columnId: columnId,\n                desc: desc,\n                multi: multi\n            });\n        }, [\n            dispatch\n        ]); // use reference to avoid memory leak in #1608\n        var getInstance = useGetLatest(instance); // Add the getSortByToggleProps method to columns and headers\n        flatHeaders.forEach(function(column) {\n            var accessor = column.accessor, defaultColumnCanSort = column.canSort, columnDisableSortBy = column.disableSortBy, id = column.id;\n            var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : undefined, disableSortBy === true ? false : undefined, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);\n            column.canSort = canSort;\n            if (column.canSort) {\n                column.toggleSortBy = function(desc, multi) {\n                    return toggleSortBy(column.id, desc, multi);\n                };\n                column.clearSortBy = function() {\n                    dispatch({\n                        type: actions.clearSortBy,\n                        columnId: column.id\n                    });\n                };\n            }\n            column.getSortByToggleProps = makePropGetter(getHooks().getSortByToggleProps, {\n                instance: getInstance(),\n                column: column\n            });\n            var columnSort = sortBy.find(function(d) {\n                return d.id === id;\n            });\n            column.isSorted = !!columnSort;\n            column.sortedIndex = sortBy.findIndex(function(d) {\n                return d.id === id;\n            });\n            column.isSortedDesc = column.isSorted ? columnSort.desc : undefined;\n        });\n        var _React$useMemo = React.useMemo(function() {\n            if (manualSortBy || !sortBy.length) return [\n                rows,\n                flatRows\n            ];\n            var sortedFlatRows = []; // Filter out sortBys that correspond to non existing columns\n            var availableSortBy = sortBy.filter(function(sort) {\n                return allColumns.find(function(col) {\n                    return col.id === sort.id;\n                });\n            });\n            var sortData = function sortData(rows) {\n                // Use the orderByFn to compose multiple sortBy's together.\n                // This will also perform a stable sorting using the row index\n                // if needed.\n                var sortedData = orderByFn(rows, availableSortBy.map(function(sort) {\n                    // Support custom sorting methods for each column\n                    var column = allColumns.find(function(d) {\n                        return d.id === sort.id;\n                    });\n                    if (!column) throw new Error(\"React-Table: Could not find a column with id: \" + sort.id + \" while sorting\");\n                    var sortType = column.sortType; // Look up sortBy functions in this order:\n                    // column function\n                    // column string lookup on user sortType\n                    // column string lookup on built-in sortType\n                    // default function\n                    // default string lookup on user sortType\n                    // default string lookup on built-in sortType\n                    var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];\n                    if (!sortMethod) throw new Error(\"React-Table: Could not find a valid sortType of '\" + sortType + \"' for column '\" + sort.id + \"'.\");\n                     // Return the correct sortFn.\n                    // This function should always return in ascending order\n                    return function(a, b) {\n                        return sortMethod(a, b, sort.id, sort.desc);\n                    };\n                }), availableSortBy.map(function(sort) {\n                    // Detect and use the sortInverted option\n                    var column = allColumns.find(function(d) {\n                        return d.id === sort.id;\n                    });\n                    if (column && column.sortInverted) return sort.desc;\n                    return !sort.desc;\n                })); // If there are sub-rows, sort them\n                sortedData.forEach(function(row) {\n                    sortedFlatRows.push(row);\n                    if (!row.subRows || row.subRows.length === 0) return;\n                    row.subRows = sortData(row.subRows);\n                });\n                return sortedData;\n            };\n            return [\n                sortData(rows),\n                sortedFlatRows\n            ];\n        }, [\n            manualSortBy,\n            sortBy,\n            rows,\n            flatRows,\n            allColumns,\n            orderByFn,\n            userSortTypes\n        ]), sortedRows = _React$useMemo[0], sortedFlatRows = _React$useMemo[1];\n        var getAutoResetSortBy = useGetLatest(autoResetSortBy);\n        useMountedLayoutEffect(function() {\n            if (getAutoResetSortBy()) dispatch({\n                type: actions.resetSortBy\n            });\n        }, [\n            manualSortBy ? null : data\n        ]);\n        Object.assign(instance, {\n            preSortedRows: rows,\n            preSortedFlatRows: flatRows,\n            sortedRows: sortedRows,\n            sortedFlatRows: sortedFlatRows,\n            rows: sortedRows,\n            flatRows: sortedFlatRows,\n            setSortBy: setSortBy,\n            toggleSortBy: toggleSortBy\n        });\n    }\n    function defaultOrderByFn(arr, funcs, dirs) {\n        return [].concat(arr).sort(function(rowA, rowB) {\n            for(var i = 0; i < funcs.length; i += 1){\n                var sortFn = funcs[i];\n                var desc = dirs[i] === false || dirs[i] === 'desc';\n                var sortInt = sortFn(rowA, rowB);\n                if (sortInt !== 0) return desc ? -sortInt : sortInt;\n            }\n            return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;\n        });\n    }\n    var pluginName = 'usePagination'; // Actions\n    actions.resetPage = 'resetPage';\n    actions.gotoPage = 'gotoPage';\n    actions.setPageSize = 'setPageSize';\n    var usePagination = function usePagination(hooks) {\n        hooks.stateReducers.push(reducer$6);\n        hooks.useInstance.push(useInstance$6);\n    };\n    usePagination.pluginName = pluginName;\n    function reducer$6(state, action, previousState, instance) {\n        if (action.type === actions.init) return _extends({\n            pageSize: 10,\n            pageIndex: 0\n        }, state);\n        if (action.type === actions.resetPage) return _extends({}, state, {\n            pageIndex: instance.initialState.pageIndex || 0\n        });\n        if (action.type === actions.gotoPage) {\n            var pageCount = instance.pageCount, page = instance.page;\n            var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);\n            var canNavigate = false;\n            if (newPageIndex > state.pageIndex) // next page\n            canNavigate = pageCount === -1 ? page.length >= state.pageSize : newPageIndex < pageCount;\n            else if (newPageIndex < state.pageIndex) // prev page\n            canNavigate = newPageIndex > -1;\n            if (!canNavigate) return state;\n            return _extends({}, state, {\n                pageIndex: newPageIndex\n            });\n        }\n        if (action.type === actions.setPageSize) {\n            var pageSize = action.pageSize;\n            var topRowIndex = state.pageSize * state.pageIndex;\n            var pageIndex = Math.floor(topRowIndex / pageSize);\n            return _extends({}, state, {\n                pageIndex: pageIndex,\n                pageSize: pageSize\n            });\n        }\n    }\n    function useInstance$6(instance) {\n        var rows = instance.rows, _instance$autoResetPa = instance.autoResetPage, autoResetPage = _instance$autoResetPa === void 0 ? true : _instance$autoResetPa, _instance$manualExpan = instance.manualExpandedKey, manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan, plugins = instance.plugins, userPageCount = instance.pageCount, _instance$paginateExp = instance.paginateExpandedRows, paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp, _instance$expandSubRo = instance.expandSubRows, expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo, _instance$state = instance.state, pageSize = _instance$state.pageSize, pageIndex = _instance$state.pageIndex, expanded = _instance$state.expanded, globalFilter = _instance$state.globalFilter, filters = _instance$state.filters, groupBy = _instance$state.groupBy, sortBy = _instance$state.sortBy, dispatch = instance.dispatch, data = instance.data, manualPagination = instance.manualPagination;\n        ensurePluginOrder(plugins, [\n            'useGlobalFilter',\n            'useFilters',\n            'useGroupBy',\n            'useSortBy',\n            'useExpanded'\n        ], 'usePagination');\n        var getAutoResetPage = useGetLatest(autoResetPage);\n        useMountedLayoutEffect(function() {\n            if (getAutoResetPage()) dispatch({\n                type: actions.resetPage\n            });\n        }, [\n            dispatch,\n            manualPagination ? null : data,\n            globalFilter,\n            filters,\n            groupBy,\n            sortBy\n        ]);\n        var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);\n        var pageOptions = React.useMemo(function() {\n            return pageCount > 0 ? [].concat(new Array(pageCount)).fill(null).map(function(d, i) {\n                return i;\n            }) : [];\n        }, [\n            pageCount\n        ]);\n        var page = React.useMemo(function() {\n            var page;\n            if (manualPagination) page = rows;\n            else {\n                var pageStart = pageSize * pageIndex;\n                var pageEnd = pageStart + pageSize;\n                page = rows.slice(pageStart, pageEnd);\n            }\n            if (paginateExpandedRows) return page;\n            return expandRows(page, {\n                manualExpandedKey: manualExpandedKey,\n                expanded: expanded,\n                expandSubRows: expandSubRows\n            });\n        }, [\n            expandSubRows,\n            expanded,\n            manualExpandedKey,\n            manualPagination,\n            pageIndex,\n            pageSize,\n            paginateExpandedRows,\n            rows\n        ]);\n        var canPreviousPage = pageIndex > 0;\n        var canNextPage = pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1;\n        var gotoPage = React.useCallback(function(pageIndex) {\n            dispatch({\n                type: actions.gotoPage,\n                pageIndex: pageIndex\n            });\n        }, [\n            dispatch\n        ]);\n        var previousPage = React.useCallback(function() {\n            return gotoPage(function(old) {\n                return old - 1;\n            });\n        }, [\n            gotoPage\n        ]);\n        var nextPage = React.useCallback(function() {\n            return gotoPage(function(old) {\n                return old + 1;\n            });\n        }, [\n            gotoPage\n        ]);\n        var setPageSize = React.useCallback(function(pageSize) {\n            dispatch({\n                type: actions.setPageSize,\n                pageSize: pageSize\n            });\n        }, [\n            dispatch\n        ]);\n        Object.assign(instance, {\n            pageOptions: pageOptions,\n            pageCount: pageCount,\n            page: page,\n            canPreviousPage: canPreviousPage,\n            canNextPage: canNextPage,\n            gotoPage: gotoPage,\n            previousPage: previousPage,\n            nextPage: nextPage,\n            setPageSize: setPageSize\n        });\n    }\n    actions.resetPivot = 'resetPivot';\n    actions.togglePivot = 'togglePivot';\n    var _UNSTABLE_usePivotColumns = function _UNSTABLE_usePivotColumns(hooks) {\n        hooks.getPivotToggleProps = [\n            defaultGetPivotToggleProps\n        ];\n        hooks.stateReducers.push(reducer$7);\n        hooks.useInstanceAfterData.push(useInstanceAfterData);\n        hooks.allColumns.push(allColumns);\n        hooks.accessValue.push(accessValue);\n        hooks.materializedColumns.push(materializedColumns);\n        hooks.materializedColumnsDeps.push(materializedColumnsDeps);\n        hooks.visibleColumns.push(visibleColumns$1);\n        hooks.visibleColumnsDeps.push(visibleColumnsDeps);\n        hooks.useInstance.push(useInstance$7);\n        hooks.prepareRow.push(prepareRow$2);\n    };\n    _UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns';\n    var defaultPivotColumns = [];\n    var defaultGetPivotToggleProps = function defaultGetPivotToggleProps(props, _ref) {\n        var header = _ref.header;\n        return [\n            props,\n            {\n                onClick: header.canPivot ? function(e) {\n                    e.persist();\n                    header.togglePivot();\n                } : undefined,\n                style: {\n                    cursor: header.canPivot ? 'pointer' : undefined\n                },\n                title: 'Toggle Pivot'\n            }\n        ];\n    }; // Reducer\n    function reducer$7(state, action, previousState, instance) {\n        if (action.type === actions.init) return _extends({\n            pivotColumns: defaultPivotColumns\n        }, state);\n        if (action.type === actions.resetPivot) return _extends({}, state, {\n            pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns\n        });\n        if (action.type === actions.togglePivot) {\n            var columnId = action.columnId, setPivot = action.value;\n            var resolvedPivot = typeof setPivot !== 'undefined' ? setPivot : !state.pivotColumns.includes(columnId);\n            if (resolvedPivot) return _extends({}, state, {\n                pivotColumns: [].concat(state.pivotColumns, [\n                    columnId\n                ])\n            });\n            return _extends({}, state, {\n                pivotColumns: state.pivotColumns.filter(function(d) {\n                    return d !== columnId;\n                })\n            });\n        }\n    }\n    function useInstanceAfterData(instance) {\n        instance.allColumns.forEach(function(column) {\n            column.isPivotSource = instance.state.pivotColumns.includes(column.id);\n        });\n    }\n    function allColumns(columns, _ref2) {\n        var instance = _ref2.instance;\n        columns.forEach(function(column) {\n            column.isPivotSource = instance.state.pivotColumns.includes(column.id);\n            column.uniqueValues = new Set();\n        });\n        return columns;\n    }\n    function accessValue(value, _ref3) {\n        var column = _ref3.column;\n        if (column.uniqueValues && typeof value !== 'undefined') column.uniqueValues.add(value);\n        return value;\n    }\n    function materializedColumns(materialized, _ref4) {\n        var instance = _ref4.instance;\n        var allColumns = instance.allColumns, state = instance.state;\n        if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) return materialized;\n        var pivotColumns = state.pivotColumns.map(function(id) {\n            return allColumns.find(function(d) {\n                return d.id === id;\n            });\n        }).filter(Boolean);\n        var sourceColumns = allColumns.filter(function(d) {\n            return !d.isPivotSource && !state.groupBy.includes(d.id) && !state.pivotColumns.includes(d.id);\n        });\n        var buildPivotColumns = function buildPivotColumns(depth, parent, pivotFilters) {\n            if (depth === void 0) depth = 0;\n            if (pivotFilters === void 0) pivotFilters = [];\n            var pivotColumn = pivotColumns[depth];\n            if (!pivotColumn) return sourceColumns.map(function(sourceColumn) {\n                // TODO: We could offer support here for renesting pivoted\n                // columns inside copies of their header groups. For now,\n                // that seems like it would be (1) overkill on nesting, considering\n                // you already get nesting for every pivot level and (2)\n                // really hard. :)\n                return _extends({}, sourceColumn, {\n                    canPivot: false,\n                    isPivoted: true,\n                    parent: parent,\n                    depth: depth,\n                    id: \"\" + (parent ? parent.id + \".\" + sourceColumn.id : sourceColumn.id),\n                    accessor: function accessor(originalRow, i, row) {\n                        if (pivotFilters.every(function(filter) {\n                            return filter(row);\n                        })) return row.values[sourceColumn.id];\n                    }\n                });\n            });\n            var uniqueValues = Array.from(pivotColumn.uniqueValues).sort();\n            return uniqueValues.map(function(uniqueValue) {\n                var columnGroup = _extends({}, pivotColumn, {\n                    Header: pivotColumn.PivotHeader || typeof pivotColumn.header === 'string' ? pivotColumn.Header + \": \" + uniqueValue : uniqueValue,\n                    isPivotGroup: true,\n                    parent: parent,\n                    depth: depth,\n                    id: parent ? parent.id + \".\" + pivotColumn.id + \".\" + uniqueValue : pivotColumn.id + \".\" + uniqueValue,\n                    pivotValue: uniqueValue\n                });\n                columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [].concat(pivotFilters, [\n                    function(row) {\n                        return row.values[pivotColumn.id] === uniqueValue;\n                    }\n                ]));\n                return columnGroup;\n            });\n        };\n        var newMaterialized = flattenColumns(buildPivotColumns());\n        return [].concat(materialized, newMaterialized);\n    }\n    function materializedColumnsDeps(deps, _ref5) {\n        var _ref5$instance$state = _ref5.instance.state, pivotColumns = _ref5$instance$state.pivotColumns, groupBy = _ref5$instance$state.groupBy;\n        return [].concat(deps, [\n            pivotColumns,\n            groupBy\n        ]);\n    }\n    function visibleColumns$1(visibleColumns, _ref6) {\n        var state = _ref6.instance.state;\n        visibleColumns = visibleColumns.filter(function(d) {\n            return !d.isPivotSource;\n        });\n        if (state.pivotColumns.length && state.groupBy && state.groupBy.length) visibleColumns = visibleColumns.filter(function(column) {\n            return column.isGrouped || column.isPivoted;\n        });\n        return visibleColumns;\n    }\n    function visibleColumnsDeps(deps, _ref7) {\n        var instance = _ref7.instance;\n        return [].concat(deps, [\n            instance.state.pivotColumns,\n            instance.state.groupBy\n        ]);\n    }\n    function useInstance$7(instance) {\n        var columns = instance.columns, allColumns = instance.allColumns, flatHeaders = instance.flatHeaders, getHooks = instance.getHooks, plugins = instance.plugins, dispatch = instance.dispatch, _instance$autoResetPi = instance.autoResetPivot, autoResetPivot = _instance$autoResetPi === void 0 ? true : _instance$autoResetPi, manaulPivot = instance.manaulPivot, disablePivot = instance.disablePivot, defaultCanPivot = instance.defaultCanPivot;\n        ensurePluginOrder(plugins, [\n            'useGroupBy'\n        ], 'usePivotColumns');\n        var getInstance = useGetLatest(instance);\n        allColumns.forEach(function(column) {\n            var accessor = column.accessor, defaultColumnPivot = column.defaultPivot, columnDisablePivot = column.disablePivot;\n            column.canPivot = accessor ? getFirstDefined(column.canPivot, columnDisablePivot === true ? false : undefined, disablePivot === true ? false : undefined, true) : getFirstDefined(column.canPivot, defaultColumnPivot, defaultCanPivot, false);\n            if (column.canPivot) column.togglePivot = function() {\n                return instance.togglePivot(column.id);\n            };\n            column.Aggregated = column.Aggregated || column.Cell;\n        });\n        var togglePivot = function togglePivot(columnId, value) {\n            dispatch({\n                type: actions.togglePivot,\n                columnId: columnId,\n                value: value\n            });\n        };\n        flatHeaders.forEach(function(header) {\n            header.getPivotToggleProps = makePropGetter(getHooks().getPivotToggleProps, {\n                instance: getInstance(),\n                header: header\n            });\n        });\n        var getAutoResetPivot = useGetLatest(autoResetPivot);\n        useMountedLayoutEffect(function() {\n            if (getAutoResetPivot()) dispatch({\n                type: actions.resetPivot\n            });\n        }, [\n            dispatch,\n            manaulPivot ? null : columns\n        ]);\n        Object.assign(instance, {\n            togglePivot: togglePivot\n        });\n    }\n    function prepareRow$2(row) {\n        row.allCells.forEach(function(cell) {\n            // Grouped cells are in the pivotColumns and the pivot cell for the row\n            cell.isPivoted = cell.column.isPivoted;\n        });\n    }\n    var pluginName$1 = 'useRowSelect'; // Actions\n    actions.resetSelectedRows = 'resetSelectedRows';\n    actions.toggleAllRowsSelected = 'toggleAllRowsSelected';\n    actions.toggleRowSelected = 'toggleRowSelected';\n    actions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected';\n    var useRowSelect = function useRowSelect(hooks) {\n        hooks.getToggleRowSelectedProps = [\n            defaultGetToggleRowSelectedProps\n        ];\n        hooks.getToggleAllRowsSelectedProps = [\n            defaultGetToggleAllRowsSelectedProps\n        ];\n        hooks.getToggleAllPageRowsSelectedProps = [\n            defaultGetToggleAllPageRowsSelectedProps\n        ];\n        hooks.stateReducers.push(reducer$8);\n        hooks.useInstance.push(useInstance$8);\n        hooks.prepareRow.push(prepareRow$3);\n    };\n    useRowSelect.pluginName = pluginName$1;\n    var defaultGetToggleRowSelectedProps = function defaultGetToggleRowSelectedProps(props, _ref) {\n        var instance = _ref.instance, row = _ref.row;\n        var _instance$manualRowSe = instance.manualRowSelectedKey, manualRowSelectedKey = _instance$manualRowSe === void 0 ? 'isSelected' : _instance$manualRowSe;\n        var checked = false;\n        if (row.original && row.original[manualRowSelectedKey]) checked = true;\n        else checked = row.isSelected;\n        return [\n            props,\n            {\n                onChange: function onChange(e) {\n                    row.toggleRowSelected(e.target.checked);\n                },\n                style: {\n                    cursor: 'pointer'\n                },\n                checked: checked,\n                title: 'Toggle Row Selected',\n                indeterminate: row.isSomeSelected\n            }\n        ];\n    };\n    var defaultGetToggleAllRowsSelectedProps = function defaultGetToggleAllRowsSelectedProps(props, _ref2) {\n        var instance = _ref2.instance;\n        return [\n            props,\n            {\n                onChange: function onChange(e) {\n                    instance.toggleAllRowsSelected(e.target.checked);\n                },\n                style: {\n                    cursor: 'pointer'\n                },\n                checked: instance.isAllRowsSelected,\n                title: 'Toggle All Rows Selected',\n                indeterminate: Boolean(!instance.isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)\n            }\n        ];\n    };\n    var defaultGetToggleAllPageRowsSelectedProps = function defaultGetToggleAllPageRowsSelectedProps(props, _ref3) {\n        var instance = _ref3.instance;\n        return [\n            props,\n            {\n                onChange: function onChange(e) {\n                    instance.toggleAllPageRowsSelected(e.target.checked);\n                },\n                style: {\n                    cursor: 'pointer'\n                },\n                checked: instance.isAllPageRowsSelected,\n                title: 'Toggle All Current Page Rows Selected',\n                indeterminate: Boolean(!instance.isAllPageRowsSelected && instance.page.some(function(_ref4) {\n                    var id = _ref4.id;\n                    return instance.state.selectedRowIds[id];\n                }))\n            }\n        ];\n    }; // eslint-disable-next-line max-params\n    function reducer$8(state, action, previousState, instance) {\n        if (action.type === actions.init) return _extends({\n            selectedRowIds: {}\n        }, state);\n        if (action.type === actions.resetSelectedRows) return _extends({}, state, {\n            selectedRowIds: instance.initialState.selectedRowIds || {}\n        });\n        if (action.type === actions.toggleAllRowsSelected) {\n            var setSelected = action.value;\n            var isAllRowsSelected = instance.isAllRowsSelected, rowsById = instance.rowsById, _instance$nonGroupedR = instance.nonGroupedRowsById, nonGroupedRowsById = _instance$nonGroupedR === void 0 ? rowsById : _instance$nonGroupedR;\n            var selectAll = typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected; // Only remove/add the rows that are visible on the screen\n            //  Leave all the other rows that are selected alone.\n            var selectedRowIds = Object.assign({}, state.selectedRowIds);\n            if (selectAll) Object.keys(nonGroupedRowsById).forEach(function(rowId) {\n                selectedRowIds[rowId] = true;\n            });\n            else Object.keys(nonGroupedRowsById).forEach(function(rowId) {\n                delete selectedRowIds[rowId];\n            });\n            return _extends({}, state, {\n                selectedRowIds: selectedRowIds\n            });\n        }\n        if (action.type === actions.toggleRowSelected) {\n            var id = action.id, _setSelected = action.value;\n            var _rowsById = instance.rowsById, _instance$selectSubRo = instance.selectSubRows, selectSubRows = _instance$selectSubRo === void 0 ? true : _instance$selectSubRo, getSubRows = instance.getSubRows;\n            var isSelected = state.selectedRowIds[id];\n            var shouldExist = typeof _setSelected !== 'undefined' ? _setSelected : !isSelected;\n            if (isSelected === shouldExist) return state;\n            var newSelectedRowIds = _extends({}, state.selectedRowIds);\n            var handleRowById = function handleRowById(id) {\n                var row = _rowsById[id];\n                if (row) {\n                    if (!row.isGrouped) {\n                        if (shouldExist) newSelectedRowIds[id] = true;\n                        else delete newSelectedRowIds[id];\n                    }\n                    if (selectSubRows && getSubRows(row)) return getSubRows(row).forEach(function(row) {\n                        return handleRowById(row.id);\n                    });\n                }\n            };\n            handleRowById(id);\n            return _extends({}, state, {\n                selectedRowIds: newSelectedRowIds\n            });\n        }\n        if (action.type === actions.toggleAllPageRowsSelected) {\n            var _setSelected2 = action.value;\n            var page = instance.page, _rowsById2 = instance.rowsById, _instance$selectSubRo2 = instance.selectSubRows, _selectSubRows = _instance$selectSubRo2 === void 0 ? true : _instance$selectSubRo2, isAllPageRowsSelected = instance.isAllPageRowsSelected, _getSubRows = instance.getSubRows;\n            var _selectAll = typeof _setSelected2 !== 'undefined' ? _setSelected2 : !isAllPageRowsSelected;\n            var _newSelectedRowIds = _extends({}, state.selectedRowIds);\n            var _handleRowById = function _handleRowById(id) {\n                var row = _rowsById2[id];\n                if (!row.isGrouped) {\n                    if (_selectAll) _newSelectedRowIds[id] = true;\n                    else delete _newSelectedRowIds[id];\n                }\n                if (_selectSubRows && _getSubRows(row)) return _getSubRows(row).forEach(function(row) {\n                    return _handleRowById(row.id);\n                });\n            };\n            page.forEach(function(row) {\n                return _handleRowById(row.id);\n            });\n            return _extends({}, state, {\n                selectedRowIds: _newSelectedRowIds\n            });\n        }\n        return state;\n    }\n    function useInstance$8(instance) {\n        var data = instance.data, rows = instance.rows, getHooks = instance.getHooks, plugins = instance.plugins, rowsById = instance.rowsById, _instance$nonGroupedR2 = instance.nonGroupedRowsById, nonGroupedRowsById = _instance$nonGroupedR2 === void 0 ? rowsById : _instance$nonGroupedR2, _instance$autoResetSe = instance.autoResetSelectedRows, autoResetSelectedRows = _instance$autoResetSe === void 0 ? true : _instance$autoResetSe, selectedRowIds = instance.state.selectedRowIds, _instance$selectSubRo3 = instance.selectSubRows, selectSubRows = _instance$selectSubRo3 === void 0 ? true : _instance$selectSubRo3, dispatch = instance.dispatch, page = instance.page, getSubRows = instance.getSubRows;\n        ensurePluginOrder(plugins, [\n            'useFilters',\n            'useGroupBy',\n            'useSortBy',\n            'useExpanded',\n            'usePagination'\n        ], 'useRowSelect');\n        var selectedFlatRows = React.useMemo(function() {\n            var selectedFlatRows = [];\n            rows.forEach(function(row) {\n                var isSelected = selectSubRows ? getRowIsSelected(row, selectedRowIds, getSubRows) : !!selectedRowIds[row.id];\n                row.isSelected = !!isSelected;\n                row.isSomeSelected = isSelected === null;\n                if (isSelected) selectedFlatRows.push(row);\n            });\n            return selectedFlatRows;\n        }, [\n            rows,\n            selectSubRows,\n            selectedRowIds,\n            getSubRows\n        ]);\n        var isAllRowsSelected = Boolean(Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length);\n        var isAllPageRowsSelected = isAllRowsSelected;\n        if (isAllRowsSelected) {\n            if (Object.keys(nonGroupedRowsById).some(function(id) {\n                return !selectedRowIds[id];\n            })) isAllRowsSelected = false;\n        }\n        if (!isAllRowsSelected) {\n            if (page && page.length && page.some(function(_ref5) {\n                var id = _ref5.id;\n                return !selectedRowIds[id];\n            })) isAllPageRowsSelected = false;\n        }\n        var getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);\n        useMountedLayoutEffect(function() {\n            if (getAutoResetSelectedRows()) dispatch({\n                type: actions.resetSelectedRows\n            });\n        }, [\n            dispatch,\n            data\n        ]);\n        var toggleAllRowsSelected = React.useCallback(function(value) {\n            return dispatch({\n                type: actions.toggleAllRowsSelected,\n                value: value\n            });\n        }, [\n            dispatch\n        ]);\n        var toggleAllPageRowsSelected = React.useCallback(function(value) {\n            return dispatch({\n                type: actions.toggleAllPageRowsSelected,\n                value: value\n            });\n        }, [\n            dispatch\n        ]);\n        var toggleRowSelected = React.useCallback(function(id, value) {\n            return dispatch({\n                type: actions.toggleRowSelected,\n                id: id,\n                value: value\n            });\n        }, [\n            dispatch\n        ]);\n        var getInstance = useGetLatest(instance);\n        var getToggleAllRowsSelectedProps = makePropGetter(getHooks().getToggleAllRowsSelectedProps, {\n            instance: getInstance()\n        });\n        var getToggleAllPageRowsSelectedProps = makePropGetter(getHooks().getToggleAllPageRowsSelectedProps, {\n            instance: getInstance()\n        });\n        Object.assign(instance, {\n            selectedFlatRows: selectedFlatRows,\n            isAllRowsSelected: isAllRowsSelected,\n            isAllPageRowsSelected: isAllPageRowsSelected,\n            toggleRowSelected: toggleRowSelected,\n            toggleAllRowsSelected: toggleAllRowsSelected,\n            getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps,\n            getToggleAllPageRowsSelectedProps: getToggleAllPageRowsSelectedProps,\n            toggleAllPageRowsSelected: toggleAllPageRowsSelected\n        });\n    }\n    function prepareRow$3(row, _ref6) {\n        var instance = _ref6.instance;\n        row.toggleRowSelected = function(set) {\n            return instance.toggleRowSelected(row.id, set);\n        };\n        row.getToggleRowSelectedProps = makePropGetter(instance.getHooks().getToggleRowSelectedProps, {\n            instance: instance,\n            row: row\n        });\n    }\n    function getRowIsSelected(row, selectedRowIds, getSubRows) {\n        if (selectedRowIds[row.id]) return true;\n        var subRows = getSubRows(row);\n        if (subRows && subRows.length) {\n            var allChildrenSelected = true;\n            var someSelected = false;\n            subRows.forEach(function(subRow) {\n                // Bail out early if we know both of these\n                if (someSelected && !allChildrenSelected) return;\n                if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) someSelected = true;\n                else allChildrenSelected = false;\n            });\n            return allChildrenSelected ? true : someSelected ? null : false;\n        }\n        return false;\n    }\n    var defaultInitialRowStateAccessor = function defaultInitialRowStateAccessor(row) {\n        return {};\n    };\n    var defaultInitialCellStateAccessor = function defaultInitialCellStateAccessor(cell) {\n        return {};\n    }; // Actions\n    actions.setRowState = 'setRowState';\n    actions.setCellState = 'setCellState';\n    actions.resetRowState = 'resetRowState';\n    var useRowState = function useRowState(hooks) {\n        hooks.stateReducers.push(reducer$9);\n        hooks.useInstance.push(useInstance$9);\n        hooks.prepareRow.push(prepareRow$4);\n    };\n    useRowState.pluginName = 'useRowState';\n    function reducer$9(state, action, previousState, instance) {\n        var _instance$initialRowS = instance.initialRowStateAccessor, initialRowStateAccessor = _instance$initialRowS === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS, _instance$initialCell = instance.initialCellStateAccessor, initialCellStateAccessor = _instance$initialCell === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell, rowsById = instance.rowsById;\n        if (action.type === actions.init) return _extends({\n            rowState: {}\n        }, state);\n        if (action.type === actions.resetRowState) return _extends({}, state, {\n            rowState: instance.initialState.rowState || {}\n        });\n        if (action.type === actions.setRowState) {\n            var _extends2;\n            var rowId = action.rowId, value = action.value;\n            var oldRowState = typeof state.rowState[rowId] !== 'undefined' ? state.rowState[rowId] : initialRowStateAccessor(rowsById[rowId]);\n            return _extends({}, state, {\n                rowState: _extends({}, state.rowState, (_extends2 = {}, _extends2[rowId] = functionalUpdate(value, oldRowState), _extends2))\n            });\n        }\n        if (action.type === actions.setCellState) {\n            var _oldRowState$cellStat, _rowsById$_rowId, _rowsById$_rowId$cell, _extends3, _extends4;\n            var _rowId = action.rowId, columnId = action.columnId, _value = action.value;\n            var _oldRowState = typeof state.rowState[_rowId] !== 'undefined' ? state.rowState[_rowId] : initialRowStateAccessor(rowsById[_rowId]);\n            var oldCellState = typeof (_oldRowState == null ? void 0 : (_oldRowState$cellStat = _oldRowState.cellState) == null ? void 0 : _oldRowState$cellStat[columnId]) !== 'undefined' ? _oldRowState.cellState[columnId] : initialCellStateAccessor((_rowsById$_rowId = rowsById[_rowId]) == null ? void 0 : (_rowsById$_rowId$cell = _rowsById$_rowId.cells) == null ? void 0 : _rowsById$_rowId$cell.find(function(cell) {\n                return cell.column.id === columnId;\n            }));\n            return _extends({}, state, {\n                rowState: _extends({}, state.rowState, (_extends4 = {}, _extends4[_rowId] = _extends({}, _oldRowState, {\n                    cellState: _extends({}, _oldRowState.cellState || {}, (_extends3 = {}, _extends3[columnId] = functionalUpdate(_value, oldCellState), _extends3))\n                }), _extends4))\n            });\n        }\n    }\n    function useInstance$9(instance) {\n        var _instance$autoResetRo = instance.autoResetRowState, autoResetRowState = _instance$autoResetRo === void 0 ? true : _instance$autoResetRo, data = instance.data, dispatch = instance.dispatch;\n        var setRowState = React.useCallback(function(rowId, value) {\n            return dispatch({\n                type: actions.setRowState,\n                rowId: rowId,\n                value: value\n            });\n        }, [\n            dispatch\n        ]);\n        var setCellState = React.useCallback(function(rowId, columnId, value) {\n            return dispatch({\n                type: actions.setCellState,\n                rowId: rowId,\n                columnId: columnId,\n                value: value\n            });\n        }, [\n            dispatch\n        ]);\n        var getAutoResetRowState = useGetLatest(autoResetRowState);\n        useMountedLayoutEffect(function() {\n            if (getAutoResetRowState()) dispatch({\n                type: actions.resetRowState\n            });\n        }, [\n            data\n        ]);\n        Object.assign(instance, {\n            setRowState: setRowState,\n            setCellState: setCellState\n        });\n    }\n    function prepareRow$4(row, _ref) {\n        var instance = _ref.instance;\n        var _instance$initialRowS2 = instance.initialRowStateAccessor, initialRowStateAccessor = _instance$initialRowS2 === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS2, _instance$initialCell2 = instance.initialCellStateAccessor, initialCellStateAccessor = _instance$initialCell2 === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell2, rowState = instance.state.rowState;\n        if (row) {\n            row.state = typeof rowState[row.id] !== 'undefined' ? rowState[row.id] : initialRowStateAccessor(row);\n            row.setState = function(updater) {\n                return instance.setRowState(row.id, updater);\n            };\n            row.cells.forEach(function(cell) {\n                if (!row.state.cellState) row.state.cellState = {};\n                cell.state = typeof row.state.cellState[cell.column.id] !== 'undefined' ? row.state.cellState[cell.column.id] : initialCellStateAccessor(cell);\n                cell.setState = function(updater) {\n                    return instance.setCellState(row.id, cell.column.id, updater);\n                };\n            });\n        }\n    }\n    actions.resetColumnOrder = 'resetColumnOrder';\n    actions.setColumnOrder = 'setColumnOrder';\n    var useColumnOrder = function useColumnOrder(hooks) {\n        hooks.stateReducers.push(reducer$a);\n        hooks.visibleColumnsDeps.push(function(deps, _ref) {\n            var instance = _ref.instance;\n            return [].concat(deps, [\n                instance.state.columnOrder\n            ]);\n        });\n        hooks.visibleColumns.push(visibleColumns$2);\n        hooks.useInstance.push(useInstance$a);\n    };\n    useColumnOrder.pluginName = 'useColumnOrder';\n    function reducer$a(state, action, previousState, instance) {\n        if (action.type === actions.init) return _extends({\n            columnOrder: []\n        }, state);\n        if (action.type === actions.resetColumnOrder) return _extends({}, state, {\n            columnOrder: instance.initialState.columnOrder || []\n        });\n        if (action.type === actions.setColumnOrder) return _extends({}, state, {\n            columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)\n        });\n    }\n    function visibleColumns$2(columns, _ref2) {\n        var columnOrder = _ref2.instance.state.columnOrder;\n        // If there is no order, return the normal columns\n        if (!columnOrder || !columnOrder.length) return columns;\n        var columnOrderCopy = [].concat(columnOrder); // If there is an order, make a copy of the columns\n        var columnsCopy = [].concat(columns); // And make a new ordered array of the columns\n        var columnsInOrder = []; // Loop over the columns and place them in order into the new array\n        var _loop = function _loop() {\n            var targetColumnId = columnOrderCopy.shift();\n            var foundIndex = columnsCopy.findIndex(function(d) {\n                return d.id === targetColumnId;\n            });\n            if (foundIndex > -1) columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);\n        };\n        while(columnsCopy.length && columnOrderCopy.length)_loop();\n         // If there are any columns left, add them to the end\n        return [].concat(columnsInOrder, columnsCopy);\n    }\n    function useInstance$a(instance) {\n        var dispatch = instance.dispatch;\n        instance.setColumnOrder = React.useCallback(function(columnOrder) {\n            return dispatch({\n                type: actions.setColumnOrder,\n                columnOrder: columnOrder\n            });\n        }, [\n            dispatch\n        ]);\n    }\n    defaultColumn.canResize = true; // Actions\n    actions.columnStartResizing = 'columnStartResizing';\n    actions.columnResizing = 'columnResizing';\n    actions.columnDoneResizing = 'columnDoneResizing';\n    actions.resetResize = 'resetResize';\n    var useResizeColumns = function useResizeColumns(hooks) {\n        hooks.getResizerProps = [\n            defaultGetResizerProps\n        ];\n        hooks.getHeaderProps.push({\n            style: {\n                position: 'relative'\n            }\n        });\n        hooks.stateReducers.push(reducer$b);\n        hooks.useInstance.push(useInstance$b);\n        hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions$1);\n    };\n    var defaultGetResizerProps = function defaultGetResizerProps(props, _ref) {\n        var instance = _ref.instance, header = _ref.header;\n        var dispatch = instance.dispatch;\n        var onResizeStart = function onResizeStart(e, header) {\n            var isTouchEvent = false;\n            if (e.type === 'touchstart') {\n                // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n                if (e.touches && e.touches.length > 1) return;\n                isTouchEvent = true;\n            }\n            var headersToResize = getLeafHeaders(header);\n            var headerIdWidths = headersToResize.map(function(d) {\n                return [\n                    d.id,\n                    d.totalWidth\n                ];\n            });\n            var clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX;\n            var raf;\n            var mostRecentClientX;\n            var dispatchEnd = function dispatchEnd() {\n                window.cancelAnimationFrame(raf);\n                raf = null;\n                dispatch({\n                    type: actions.columnDoneResizing\n                });\n            };\n            var dispatchMove = function dispatchMove() {\n                window.cancelAnimationFrame(raf);\n                raf = null;\n                dispatch({\n                    type: actions.columnResizing,\n                    clientX: mostRecentClientX\n                });\n            };\n            var scheduleDispatchMoveOnNextAnimationFrame = function scheduleDispatchMoveOnNextAnimationFrame(clientXPos) {\n                mostRecentClientX = clientXPos;\n                if (!raf) raf = window.requestAnimationFrame(dispatchMove);\n            };\n            var handlersAndEvents = {\n                mouse: {\n                    moveEvent: 'mousemove',\n                    moveHandler: function moveHandler(e) {\n                        return scheduleDispatchMoveOnNextAnimationFrame(e.clientX);\n                    },\n                    upEvent: 'mouseup',\n                    upHandler: function upHandler(e) {\n                        document.removeEventListener('mousemove', handlersAndEvents.mouse.moveHandler);\n                        document.removeEventListener('mouseup', handlersAndEvents.mouse.upHandler);\n                        dispatchEnd();\n                    }\n                },\n                touch: {\n                    moveEvent: 'touchmove',\n                    moveHandler: function moveHandler(e) {\n                        if (e.cancelable) {\n                            e.preventDefault();\n                            e.stopPropagation();\n                        }\n                        scheduleDispatchMoveOnNextAnimationFrame(e.touches[0].clientX);\n                        return false;\n                    },\n                    upEvent: 'touchend',\n                    upHandler: function upHandler(e) {\n                        document.removeEventListener(handlersAndEvents.touch.moveEvent, handlersAndEvents.touch.moveHandler);\n                        document.removeEventListener(handlersAndEvents.touch.upEvent, handlersAndEvents.touch.moveHandler);\n                        dispatchEnd();\n                    }\n                }\n            };\n            var events = isTouchEvent ? handlersAndEvents.touch : handlersAndEvents.mouse;\n            var passiveIfSupported = passiveEventSupported() ? {\n                passive: false\n            } : false;\n            document.addEventListener(events.moveEvent, events.moveHandler, passiveIfSupported);\n            document.addEventListener(events.upEvent, events.upHandler, passiveIfSupported);\n            dispatch({\n                type: actions.columnStartResizing,\n                columnId: header.id,\n                columnWidth: header.totalWidth,\n                headerIdWidths: headerIdWidths,\n                clientX: clientX\n            });\n        };\n        return [\n            props,\n            {\n                onMouseDown: function onMouseDown(e) {\n                    return e.persist() || onResizeStart(e, header);\n                },\n                onTouchStart: function onTouchStart(e) {\n                    return e.persist() || onResizeStart(e, header);\n                },\n                style: {\n                    cursor: 'col-resize'\n                },\n                draggable: false,\n                role: 'separator'\n            }\n        ];\n    };\n    useResizeColumns.pluginName = 'useResizeColumns';\n    function reducer$b(state, action) {\n        if (action.type === actions.init) return _extends({\n            columnResizing: {\n                columnWidths: {}\n            }\n        }, state);\n        if (action.type === actions.resetResize) return _extends({}, state, {\n            columnResizing: {\n                columnWidths: {}\n            }\n        });\n        if (action.type === actions.columnStartResizing) {\n            var clientX = action.clientX, columnId = action.columnId, columnWidth = action.columnWidth, headerIdWidths = action.headerIdWidths;\n            return _extends({}, state, {\n                columnResizing: _extends({}, state.columnResizing, {\n                    startX: clientX,\n                    headerIdWidths: headerIdWidths,\n                    columnWidth: columnWidth,\n                    isResizingColumn: columnId\n                })\n            });\n        }\n        if (action.type === actions.columnResizing) {\n            var _clientX = action.clientX;\n            var _state$columnResizing = state.columnResizing, startX = _state$columnResizing.startX, _columnWidth = _state$columnResizing.columnWidth, _state$columnResizing2 = _state$columnResizing.headerIdWidths, _headerIdWidths = _state$columnResizing2 === void 0 ? [] : _state$columnResizing2;\n            var deltaX = _clientX - startX;\n            var percentageDeltaX = deltaX / _columnWidth;\n            var newColumnWidths = {};\n            _headerIdWidths.forEach(function(_ref2) {\n                var headerId = _ref2[0], headerWidth = _ref2[1];\n                newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);\n            });\n            return _extends({}, state, {\n                columnResizing: _extends({}, state.columnResizing, {\n                    columnWidths: _extends({}, state.columnResizing.columnWidths, {}, newColumnWidths)\n                })\n            });\n        }\n        if (action.type === actions.columnDoneResizing) return _extends({}, state, {\n            columnResizing: _extends({}, state.columnResizing, {\n                startX: null,\n                isResizingColumn: null\n            })\n        });\n    }\n    var useInstanceBeforeDimensions$1 = function useInstanceBeforeDimensions(instance) {\n        var flatHeaders = instance.flatHeaders, disableResizing = instance.disableResizing, getHooks = instance.getHooks, columnResizing = instance.state.columnResizing;\n        var getInstance = useGetLatest(instance);\n        flatHeaders.forEach(function(header) {\n            var canResize = getFirstDefined(header.disableResizing === true ? false : undefined, disableResizing === true ? false : undefined, true);\n            header.canResize = canResize;\n            header.width = columnResizing.columnWidths[header.id] || header.originalWidth || header.width;\n            header.isResizing = columnResizing.isResizingColumn === header.id;\n            if (canResize) header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n                instance: getInstance(),\n                header: header\n            });\n        });\n    };\n    function useInstance$b(instance) {\n        var plugins = instance.plugins, dispatch = instance.dispatch, _instance$autoResetRe = instance.autoResetResize, autoResetResize = _instance$autoResetRe === void 0 ? true : _instance$autoResetRe, columns = instance.columns;\n        ensurePluginOrder(plugins, [\n            'useAbsoluteLayout'\n        ], 'useResizeColumns');\n        var getAutoResetResize = useGetLatest(autoResetResize);\n        useMountedLayoutEffect(function() {\n            if (getAutoResetResize()) dispatch({\n                type: actions.resetResize\n            });\n        }, [\n            columns\n        ]);\n        var resetResizing = React.useCallback(function() {\n            return dispatch({\n                type: actions.resetResize\n            });\n        }, [\n            dispatch\n        ]);\n        Object.assign(instance, {\n            resetResizing: resetResizing\n        });\n    }\n    function getLeafHeaders(header) {\n        var leafHeaders = [];\n        var recurseHeader = function recurseHeader(header) {\n            if (header.columns && header.columns.length) header.columns.map(recurseHeader);\n            leafHeaders.push(header);\n        };\n        recurseHeader(header);\n        return leafHeaders;\n    }\n    var cellStyles = {\n        position: 'absolute',\n        top: 0\n    };\n    var useAbsoluteLayout = function useAbsoluteLayout(hooks) {\n        hooks.getTableBodyProps.push(getRowStyles);\n        hooks.getRowProps.push(getRowStyles);\n        hooks.getHeaderGroupProps.push(getRowStyles);\n        hooks.getFooterGroupProps.push(getRowStyles);\n        hooks.getHeaderProps.push(function(props, _ref) {\n            var column = _ref.column;\n            return [\n                props,\n                {\n                    style: _extends({}, cellStyles, {\n                        left: column.totalLeft + \"px\",\n                        width: column.totalWidth + \"px\"\n                    })\n                }\n            ];\n        });\n        hooks.getCellProps.push(function(props, _ref2) {\n            var cell = _ref2.cell;\n            return [\n                props,\n                {\n                    style: _extends({}, cellStyles, {\n                        left: cell.column.totalLeft + \"px\",\n                        width: cell.column.totalWidth + \"px\"\n                    })\n                }\n            ];\n        });\n        hooks.getFooterProps.push(function(props, _ref3) {\n            var column = _ref3.column;\n            return [\n                props,\n                {\n                    style: _extends({}, cellStyles, {\n                        left: column.totalLeft + \"px\",\n                        width: column.totalWidth + \"px\"\n                    })\n                }\n            ];\n        });\n    };\n    useAbsoluteLayout.pluginName = 'useAbsoluteLayout';\n    var getRowStyles = function getRowStyles(props, _ref4) {\n        var instance = _ref4.instance;\n        return [\n            props,\n            {\n                style: {\n                    position: 'relative',\n                    width: instance.totalColumnsWidth + \"px\"\n                }\n            }\n        ];\n    };\n    var cellStyles$1 = {\n        display: 'inline-block',\n        boxSizing: 'border-box'\n    };\n    var getRowStyles$1 = function getRowStyles(props, _ref) {\n        var instance = _ref.instance;\n        return [\n            props,\n            {\n                style: {\n                    display: 'flex',\n                    width: instance.totalColumnsWidth + \"px\"\n                }\n            }\n        ];\n    };\n    var useBlockLayout = function useBlockLayout(hooks) {\n        hooks.getRowProps.push(getRowStyles$1);\n        hooks.getHeaderGroupProps.push(getRowStyles$1);\n        hooks.getFooterGroupProps.push(getRowStyles$1);\n        hooks.getHeaderProps.push(function(props, _ref2) {\n            var column = _ref2.column;\n            return [\n                props,\n                {\n                    style: _extends({}, cellStyles$1, {\n                        width: column.totalWidth + \"px\"\n                    })\n                }\n            ];\n        });\n        hooks.getCellProps.push(function(props, _ref3) {\n            var cell = _ref3.cell;\n            return [\n                props,\n                {\n                    style: _extends({}, cellStyles$1, {\n                        width: cell.column.totalWidth + \"px\"\n                    })\n                }\n            ];\n        });\n        hooks.getFooterProps.push(function(props, _ref4) {\n            var column = _ref4.column;\n            return [\n                props,\n                {\n                    style: _extends({}, cellStyles$1, {\n                        width: column.totalWidth + \"px\"\n                    })\n                }\n            ];\n        });\n    };\n    useBlockLayout.pluginName = 'useBlockLayout';\n    function useFlexLayout(hooks) {\n        hooks.getTableProps.push(getTableProps);\n        hooks.getRowProps.push(getRowStyles$2);\n        hooks.getHeaderGroupProps.push(getRowStyles$2);\n        hooks.getFooterGroupProps.push(getRowStyles$2);\n        hooks.getHeaderProps.push(getHeaderProps);\n        hooks.getCellProps.push(getCellProps);\n        hooks.getFooterProps.push(getFooterProps);\n    }\n    useFlexLayout.pluginName = 'useFlexLayout';\n    var getTableProps = function getTableProps(props, _ref) {\n        var instance = _ref.instance;\n        return [\n            props,\n            {\n                style: {\n                    minWidth: instance.totalColumnsMinWidth + \"px\"\n                }\n            }\n        ];\n    };\n    var getRowStyles$2 = function getRowStyles(props, _ref2) {\n        var instance = _ref2.instance;\n        return [\n            props,\n            {\n                style: {\n                    display: 'flex',\n                    flex: '1 0 auto',\n                    minWidth: instance.totalColumnsMinWidth + \"px\"\n                }\n            }\n        ];\n    };\n    var getHeaderProps = function getHeaderProps(props, _ref3) {\n        var column = _ref3.column;\n        return [\n            props,\n            {\n                style: {\n                    boxSizing: 'border-box',\n                    flex: column.totalFlexWidth ? column.totalFlexWidth + \" 0 auto\" : undefined,\n                    minWidth: column.totalMinWidth + \"px\",\n                    width: column.totalWidth + \"px\"\n                }\n            }\n        ];\n    };\n    var getCellProps = function getCellProps(props, _ref4) {\n        var cell = _ref4.cell;\n        return [\n            props,\n            {\n                style: {\n                    boxSizing: 'border-box',\n                    flex: cell.column.totalFlexWidth + \" 0 auto\",\n                    minWidth: cell.column.totalMinWidth + \"px\",\n                    width: cell.column.totalWidth + \"px\"\n                }\n            }\n        ];\n    };\n    var getFooterProps = function getFooterProps(props, _ref5) {\n        var column = _ref5.column;\n        return [\n            props,\n            {\n                style: {\n                    boxSizing: 'border-box',\n                    flex: column.totalFlexWidth ? column.totalFlexWidth + \" 0 auto\" : undefined,\n                    minWidth: column.totalMinWidth + \"px\",\n                    width: column.totalWidth + \"px\"\n                }\n            }\n        ];\n    };\n    actions.columnStartResizing = 'columnStartResizing';\n    actions.columnResizing = 'columnResizing';\n    actions.columnDoneResizing = 'columnDoneResizing';\n    actions.resetResize = 'resetResize';\n    function useGridLayout(hooks) {\n        hooks.stateReducers.push(reducer$c);\n        hooks.getTableProps.push(getTableProps$1);\n        hooks.getHeaderProps.push(getHeaderProps$1);\n        hooks.getRowProps.push(getRowProps);\n    }\n    useGridLayout.pluginName = 'useGridLayout';\n    var getTableProps$1 = function getTableProps(props, _ref) {\n        var instance = _ref.instance;\n        var gridTemplateColumns = instance.visibleColumns.map(function(column) {\n            var _instance$state$colum;\n            if (instance.state.gridLayout.columnWidths[column.id]) return instance.state.gridLayout.columnWidths[column.id] + \"px\"; // When resizing, lock the width of all unset columns\n            // instead of using user-provided width or defaultColumn width,\n            // which could potentially be 'auto' or 'fr' units that don't scale linearly\n            if ((_instance$state$colum = instance.state.columnResizing) == null ? void 0 : _instance$state$colum.isResizingColumn) return instance.state.gridLayout.startWidths[column.id] + \"px\";\n            if (typeof column.width === 'number') return column.width + \"px\";\n            return column.width;\n        });\n        return [\n            props,\n            {\n                style: {\n                    display: \"grid\",\n                    gridTemplateColumns: gridTemplateColumns.join(\" \")\n                }\n            }\n        ];\n    };\n    var getHeaderProps$1 = function getHeaderProps(props, _ref2) {\n        var column = _ref2.column;\n        return [\n            props,\n            {\n                id: \"header-cell-\" + column.id,\n                style: {\n                    position: \"sticky\",\n                    //enables a scroll wrapper to be placed around the table and have sticky headers\n                    gridColumn: \"span \" + column.totalVisibleHeaderCount\n                }\n            }\n        ];\n    };\n    var getRowProps = function getRowProps(props, _ref3) {\n        var row = _ref3.row;\n        if (row.isExpanded) return [\n            props,\n            {\n                style: {\n                    gridColumn: \"1 / \" + (row.cells.length + 1)\n                }\n            }\n        ];\n        return [\n            props,\n            {}\n        ];\n    };\n    function reducer$c(state, action, previousState, instance) {\n        if (action.type === actions.init) return _extends({\n            gridLayout: {\n                columnWidths: {}\n            }\n        }, state);\n        if (action.type === actions.resetResize) return _extends({}, state, {\n            gridLayout: {\n                columnWidths: {}\n            }\n        });\n        if (action.type === actions.columnStartResizing) {\n            var columnId = action.columnId, headerIdWidths = action.headerIdWidths;\n            var columnWidth = getElementWidth(columnId);\n            if (columnWidth !== undefined) {\n                var startWidths = instance.visibleColumns.reduce(function(acc, column) {\n                    var _extends2;\n                    return _extends({}, acc, (_extends2 = {}, _extends2[column.id] = getElementWidth(column.id), _extends2));\n                }, {});\n                var minWidths = instance.visibleColumns.reduce(function(acc, column) {\n                    var _extends3;\n                    return _extends({}, acc, (_extends3 = {}, _extends3[column.id] = column.minWidth, _extends3));\n                }, {});\n                var maxWidths = instance.visibleColumns.reduce(function(acc, column) {\n                    var _extends4;\n                    return _extends({}, acc, (_extends4 = {}, _extends4[column.id] = column.maxWidth, _extends4));\n                }, {});\n                var headerIdGridWidths = headerIdWidths.map(function(_ref4) {\n                    var headerId = _ref4[0];\n                    return [\n                        headerId,\n                        getElementWidth(headerId)\n                    ];\n                });\n                return _extends({}, state, {\n                    gridLayout: _extends({}, state.gridLayout, {\n                        startWidths: startWidths,\n                        minWidths: minWidths,\n                        maxWidths: maxWidths,\n                        headerIdGridWidths: headerIdGridWidths,\n                        columnWidth: columnWidth\n                    })\n                });\n            } else return state;\n        }\n        if (action.type === actions.columnResizing) {\n            var clientX = action.clientX;\n            var startX = state.columnResizing.startX;\n            var _state$gridLayout = state.gridLayout, _columnWidth = _state$gridLayout.columnWidth, _minWidths = _state$gridLayout.minWidths, _maxWidths = _state$gridLayout.maxWidths, _state$gridLayout$hea = _state$gridLayout.headerIdGridWidths, _headerIdGridWidths = _state$gridLayout$hea === void 0 ? [] : _state$gridLayout$hea;\n            var deltaX = clientX - startX;\n            var percentageDeltaX = deltaX / _columnWidth;\n            var newColumnWidths = {};\n            _headerIdGridWidths.forEach(function(_ref5) {\n                var headerId = _ref5[0], headerWidth = _ref5[1];\n                newColumnWidths[headerId] = Math.min(Math.max(_minWidths[headerId], headerWidth + headerWidth * percentageDeltaX), _maxWidths[headerId]);\n            });\n            return _extends({}, state, {\n                gridLayout: _extends({}, state.gridLayout, {\n                    columnWidths: _extends({}, state.gridLayout.columnWidths, {}, newColumnWidths)\n                })\n            });\n        }\n        if (action.type === actions.columnDoneResizing) return _extends({}, state, {\n            gridLayout: _extends({}, state.gridLayout, {\n                startWidths: {},\n                minWidths: {},\n                maxWidths: {}\n            })\n        });\n    }\n    function getElementWidth(columnId) {\n        var _document$getElementB;\n        var width = (_document$getElementB = document.getElementById(\"header-cell-\" + columnId)) == null ? void 0 : _document$getElementB.offsetWidth;\n        if (width !== undefined) return width;\n    }\n    exports1._UNSTABLE_usePivotColumns = _UNSTABLE_usePivotColumns;\n    exports1.actions = actions;\n    exports1.defaultColumn = defaultColumn;\n    exports1.defaultGroupByFn = defaultGroupByFn;\n    exports1.defaultOrderByFn = defaultOrderByFn;\n    exports1.defaultRenderer = defaultRenderer;\n    exports1.emptyRenderer = emptyRenderer;\n    exports1.ensurePluginOrder = ensurePluginOrder;\n    exports1.flexRender = flexRender;\n    exports1.functionalUpdate = functionalUpdate;\n    exports1.loopHooks = loopHooks;\n    exports1.makePropGetter = makePropGetter;\n    exports1.makeRenderer = makeRenderer;\n    exports1.reduceHooks = reduceHooks;\n    exports1.safeUseLayoutEffect = safeUseLayoutEffect;\n    exports1.useAbsoluteLayout = useAbsoluteLayout;\n    exports1.useAsyncDebounce = useAsyncDebounce;\n    exports1.useBlockLayout = useBlockLayout;\n    exports1.useColumnOrder = useColumnOrder;\n    exports1.useExpanded = useExpanded;\n    exports1.useFilters = useFilters;\n    exports1.useFlexLayout = useFlexLayout;\n    exports1.useGetLatest = useGetLatest;\n    exports1.useGlobalFilter = useGlobalFilter;\n    exports1.useGridLayout = useGridLayout;\n    exports1.useGroupBy = useGroupBy;\n    exports1.useMountedLayoutEffect = useMountedLayoutEffect;\n    exports1.usePagination = usePagination;\n    exports1.useResizeColumns = useResizeColumns;\n    exports1.useRowSelect = useRowSelect;\n    exports1.useRowState = useRowState;\n    exports1.useSortBy = useSortBy;\n    exports1.useTable = useTable;\n    Object.defineProperty(exports1, '__esModule', {\n        value: true\n    });\n});\n\n},{\"aab375a33982b1d1\":\"9njXz\"}],\"aqEiX\":[function() {},{}],\"7VEW8\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _reactQuery = require(\"react-query\");\nvar _consts = require(\"src/consts\");\nvar _environmentContext = require(\"src/context/EnvironmentContext\");\nvar _generic = require(\"src/icons/generic\");\nvar _atoms = require(\"src/components/atoms\");\nvar _molecules = require(\"src/components/molecules\");\nvar _hooks = require(\"src/utils/hooks\");\nvar _token = require(\"src/utils/token\");\nvar _number = require(\"src/utils/number\");\nvar _date = require(\"src/utils/date\");\nvar _wormhole = require(\"src/utils/wormhole\");\nvar _filterUtils = require(\"src/utils/filterUtils\");\nvar _client = require(\"src/api/Client\");\nvar _chart = require(\"./Chart\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nvar _stylesScss = require(\"./styles.scss\");\nconst METRIC_CHART_LIST = [\n    {\n        label: \"Volume\",\n        value: \"volume\",\n        ariaLabel: \"Volume\"\n    },\n    {\n        label: \"Transfers\",\n        value: \"transactions\",\n        ariaLabel: \"Transfers\"\n    }\n];\nconst SCALE_CHART_LIST = [\n    {\n        label: \"Logarithmic\",\n        value: \"logarithmic\",\n        ariaLabel: \"Logarithmic\"\n    },\n    {\n        label: \"Linear\",\n        value: \"linear\",\n        ariaLabel: \"Linear\"\n    }\n];\nconst RANGE_LIST = [\n    {\n        label: \"Last 7 days\",\n        value: (0, _date.getISODateZeroed)(7),\n        timespan: \"1d\",\n        timeRange: \"7d\"\n    },\n    {\n        label: \"Last 14 days\",\n        value: (0, _date.getISODateZeroed)(14),\n        timespan: \"1d\",\n        timeRange: \"14d\"\n    },\n    {\n        label: \"Last 30 days\",\n        value: (0, _date.getISODateZeroed)(30),\n        timespan: \"1d\",\n        timeRange: \"30d\"\n    },\n    {\n        label: \"Last 90 days\",\n        value: (0, _date.getISODateZeroed)(90),\n        timespan: \"1d\",\n        timeRange: \"90d\"\n    }\n];\nconst TokenActivity = ({ isHomePage = false })=>{\n    const { environment } = (0, _environmentContext.useEnvironment)();\n    const currentNetwork = environment.network;\n    const isMainnet = currentNetwork === \"Mainnet\";\n    const filterContainerRef = (0, _react.useRef)(null);\n    const orderedChains = isMainnet ? (0, _filterUtils.ChainFilterMainnet) : (0, _filterUtils.ChainFilterTestnet);\n    const { width } = (0, _hooks.useWindowSize)();\n    const isDesktop = width >= (0, _consts.BREAKPOINTS).desktop;\n    const [selectedTopAssetTimeRange, setSelectedTopAssetTimeRange] = (0, _react.useState)(RANGE_LIST[0]);\n    const [scaleSelected, setScaleSelectedState] = (0, _react.useState)(\"linear\");\n    const setScaleSelected = (value, track)=>{\n        setScaleSelectedState(value);\n        if (track) (0, _analyticsDefault.default).track(\"scaleSelected\", {\n            selected: value,\n            selectedType: \"tokenActivity\"\n        });\n    };\n    const [chartSelected, setChartSelected] = (0, _react.useState)(\"area\");\n    const [metricSelected, setMetricSelected] = (0, _react.useState)(\"volume\");\n    const [openFilters, setOpenFilters] = (0, _react.useState)(false);\n    const [rowSelected, setRowSelected] = (0, _react.useState)(0);\n    const [tokenSelectedByUser, setTokenSelectedByUser] = (0, _react.useState)(false);\n    const [filters, setFiltersState] = (0, _react.useState)({\n        from: (0, _date.getISODateZeroed)(7),\n        to: (0, _date.todayISOString),\n        timespan: \"1d\",\n        sourceChain: [],\n        targetChain: [],\n        symbol: {\n            label: \"\",\n            value: \"\"\n        }\n    });\n    const setFilters = (newFilters, timeRange)=>{\n        (0, _analyticsDefault.default).track(\"tokenActivity\", {\n            network: currentNetwork,\n            selectedType: metricSelected,\n            chain: (filters.sourceChain?.length > 0 ? filters.sourceChain.map((chain)=>chain.label).join(\", \") : \"Unset\") + (filters.targetChain?.length > 0 ? \" -> \" + filters.targetChain.map((chain)=>chain.label).join(\", \") : \"\"),\n            symbol: newFilters?.symbol?.label,\n            selectedTimeRange: timeRange ? timeRange : selectedTopAssetTimeRange?.label\n        });\n        setFiltersState(newFilters);\n    };\n    const sourceChains = filters.sourceChain.map(({ value })=>Number(value));\n    const targetChains = filters.targetChain.map(({ value })=>Number(value));\n    const CHAIN_LIST = orderedChains.map((chainId)=>({\n            icon: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                background: \"var(--color-white-10)\",\n                chainId: chainId,\n                colorless: true,\n                lazy: false,\n                network: currentNetwork,\n                size: 24\n            }),\n            label: (0, _wormhole.getChainName)({\n                network: currentNetwork,\n                chainId\n            }),\n            value: String(chainId)\n        }));\n    const { isFetching: isFetchingList, isError: isErrorList, data: dataList } = (0, _reactQuery.useQuery)([\n        \"tokensSymbolVolume\",\n        currentNetwork,\n        selectedTopAssetTimeRange\n    ], async ()=>{\n        const response = await (0, _client.getClient)().guardianNetwork.getTokensSymbolVolume({\n            limit: 10,\n            timeRange: selectedTopAssetTimeRange?.timeRange\n        });\n        return response;\n    }, {\n        onSuccess: (response)=>{\n            const updateFiltersAndSelection = (index)=>{\n                const newSymbol = response[index]?.symbol;\n                if (rowSelected !== index) setRowSelected(index);\n                if (filters.symbol.value !== newSymbol) setFilters({\n                    ...filters,\n                    symbol: {\n                        label: newSymbol,\n                        value: newSymbol\n                    }\n                });\n            };\n            // find the index of the selected symbol in the response, or use the first symbol if not found or not selected by the user\n            const symbolIndex = response.findIndex((item)=>item.symbol === filters.symbol.value);\n            updateFiltersAndSelection(!tokenSelectedByUser || symbolIndex === -1 ? 0 : symbolIndex);\n        }\n    });\n    const { isLoading: isLoadingChart, isError: isErrorChart, data: dataChart } = (0, _reactQuery.useQuery)([\n        \"tokensSymbolActivity\",\n        filters.from,\n        filters.to,\n        filters.symbol.value,\n        filters.timespan,\n        sourceChains,\n        targetChains\n    ], ()=>(0, _client.getClient)().guardianNetwork.getTokensSymbolActivity({\n            from: filters.from,\n            to: (0, _date.todayISOString),\n            symbol: filters.symbol.value,\n            timespan: filters.timespan,\n            sourceChain: sourceChains,\n            targetChain: targetChains\n        }), {\n        enabled: !!dataList && dataList.length > 0 && !isFetchingList\n    });\n    const applyFilters = ()=>{\n        setOpenFilters(false);\n    };\n    const resetFilters = ()=>{\n        setFilters({\n            ...filters,\n            sourceChain: [],\n            targetChain: []\n        });\n        setOpenFilters(false);\n    };\n    const handleRowSelected = (rowIndex)=>{\n        setFilters({\n            ...filters,\n            symbol: {\n                label: dataList[rowIndex].symbol,\n                value: dataList[rowIndex].symbol\n            }\n        });\n        setRowSelected(!isDesktop && rowIndex === rowSelected ? -1 : rowIndex);\n        setTokenSelectedByUser(true);\n    };\n    (0, _react.useEffect)(()=>{\n        if (!isMainnet) setMetricSelected(\"transactions\");\n    }, [\n        isMainnet\n    ]);\n    (0, _hooks.useOutsideClick)({\n        ref: filterContainerRef,\n        callback: ()=>setOpenFilters(false)\n    });\n    (0, _hooks.useLockBodyScroll)({\n        isLocked: !isDesktop && openFilters,\n        scrollableClasses: [\n            \"select__option\"\n        ]\n    });\n    const fullscreenBtnRef = (0, _react.useRef)(null);\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _atoms.Fullscreenable), {\n        className: \"token-activity\",\n        buttonRef: fullscreenBtnRef,\n        itemName: \"tokenActivity\",\n        children: [\n            openFilters && !isDesktop && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"token-activity-bg\"\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h3\", {\n                className: \"token-activity-title\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.ActivityIcon), {}),\n                    \" Top 10 Tokens Transferred\",\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"token-activity-title-fullscreen\",\n                        ref: fullscreenBtnRef,\n                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.FullscreenIcon), {\n                            width: 20\n                        })\n                    }),\n                    isHomePage && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.NavLink), {\n                        className: \"token-activity-title-link\",\n                        to: \"/analytics/tokens\",\n                        onClick: ()=>{\n                            (0, _analyticsDefault.default).track(\"viewMore\", {\n                                network: currentNetwork,\n                                selected: \"Token Activity\"\n                            });\n                        },\n                        children: \"View More\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"token-activity-container\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"token-activity-container-top\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: `token-activity-container-top-menu ${openFilters ? \"open\" : \"\"}`,\n                                ref: filterContainerRef,\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                                        className: \"token-activity-container-top-menu-title\",\n                                        children: \"Filters\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                                        className: \"token-activity-container-top-menu-close-btn\",\n                                        onClick: ()=>setOpenFilters(false),\n                                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.CrossIcon), {\n                                            width: 24\n                                        })\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Select), {\n                                        ariaLabel: \"Select Source Chain\",\n                                        buttonStyles: {\n                                            width: \"100%\",\n                                            justifyContent: \"space-between\",\n                                            height: isDesktop ? 36 : 48\n                                        },\n                                        items: CHAIN_LIST,\n                                        menuFixed: !isDesktop,\n                                        menuListStyles: {\n                                            maxHeight: isDesktop ? 264 : 180\n                                        },\n                                        name: \"topAssetTimeRange\",\n                                        onValueChange: (value)=>setFilters({\n                                                ...filters,\n                                                sourceChain: value\n                                            }),\n                                        optionStyles: {\n                                            padding: 16\n                                        },\n                                        text: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"token-activity-container-top-menu-select-text\",\n                                            children: [\n                                                filters.sourceChain.length > 0 && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Counter), {\n                                                    children: filters.sourceChain.length\n                                                }),\n                                                \"Source chain\"\n                                            ]\n                                        }),\n                                        type: \"searchable\",\n                                        value: filters.sourceChain\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Select), {\n                                        ariaLabel: \"Select Target Chain\",\n                                        buttonStyles: {\n                                            width: \"100%\",\n                                            justifyContent: \"space-between\",\n                                            height: isDesktop ? 36 : 48\n                                        },\n                                        items: CHAIN_LIST,\n                                        menuFixed: !isDesktop,\n                                        menuListStyles: {\n                                            maxHeight: isDesktop ? 264 : 180\n                                        },\n                                        name: \"topAssetTimeRange\",\n                                        onValueChange: (value)=>setFilters({\n                                                ...filters,\n                                                targetChain: value\n                                            }),\n                                        optionStyles: {\n                                            padding: 16\n                                        },\n                                        text: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"token-activity-container-top-menu-select-text\",\n                                            children: [\n                                                filters.targetChain.length > 0 && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Counter), {\n                                                    children: filters.targetChain.length\n                                                }),\n                                                \"Target chain\"\n                                            ]\n                                        }),\n                                        type: \"searchable\",\n                                        value: filters.targetChain\n                                    }),\n                                    !isDesktop && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                        ariaLabel: \"Select metric type (volume or transfers)\",\n                                        className: \"token-activity-container-top-toggle\",\n                                        items: isMainnet ? METRIC_CHART_LIST : [\n                                            METRIC_CHART_LIST[1]\n                                        ],\n                                        onValueChange: (value)=>{\n                                            if (value === \"transactions\") setScaleSelected(\"linear\", false);\n                                            setMetricSelected(value);\n                                            (0, _analyticsDefault.default).track(\"metricSelected\", {\n                                                network: currentNetwork,\n                                                selected: value,\n                                                selectedType: \"tokenActivity\"\n                                            });\n                                        },\n                                        value: metricSelected\n                                    }),\n                                    !isDesktop && chartSelected === \"area\" && metricSelected === \"volume\" && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                        ariaLabel: \"Select scale (linear or logarithmic)\",\n                                        className: \"token-activity-container-top-toggle\",\n                                        // className=\"token-activity-chart-top-scale\"\n                                        items: SCALE_CHART_LIST,\n                                        onValueChange: (value)=>setScaleSelected(value, true),\n                                        value: scaleSelected\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                        className: \"token-activity-container-top-menu-buttons\",\n                                        children: [\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                                                className: \"apply-btn\",\n                                                onClick: applyFilters,\n                                                children: \"Apply Filters\"\n                                            }),\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                                                className: \"reset-btn\",\n                                                disabled: filters.sourceChain.length === 0 && filters.targetChain.length === 0,\n                                                onClick: resetFilters,\n                                                children: \"Reset Filters\"\n                                            })\n                                        ]\n                                    })\n                                ]\n                            }),\n                            isDesktop && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                ariaLabel: \"Select metric type (volume or transfers)\",\n                                className: \"token-activity-container-top-toggle\",\n                                items: isMainnet ? METRIC_CHART_LIST : [\n                                    METRIC_CHART_LIST[1]\n                                ],\n                                onValueChange: (value)=>{\n                                    if (value === \"transactions\") setScaleSelected(\"linear\", false);\n                                    setMetricSelected(value);\n                                    (0, _analyticsDefault.default).track(\"metricSelected\", {\n                                        network: currentNetwork,\n                                        selected: value,\n                                        selectedType: \"tokenActivity\"\n                                    });\n                                },\n                                value: metricSelected\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Select), {\n                                ariaLabel: \"Select Time Range\",\n                                className: \"token-activity-container-top-select\",\n                                items: RANGE_LIST,\n                                name: \"topAssetTimeRange\",\n                                onValueChange: (value)=>{\n                                    setSelectedTopAssetTimeRange(value);\n                                    setFilters({\n                                        ...filters,\n                                        from: value.value,\n                                        timespan: value.timespan\n                                    }, value?.label);\n                                },\n                                value: selectedTopAssetTimeRange\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"button\", {\n                                className: \"token-activity-container-top-filters-btn\",\n                                onClick: ()=>setOpenFilters(true),\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.FilterListIcon), {}),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                        className: \"token-activity-container-top-filters-btn-txt\",\n                                        children: \"Filters\"\n                                    }),\n                                    (filters.sourceChain.length > 0 || filters.targetChain.length > 0) && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Counter), {\n                                        children: filters.sourceChain.length > 0 && filters.targetChain.length > 0 ? 2 : 1\n                                    })\n                                ]\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"token-activity-container-content\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"token-activity-container-content-list\",\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"token-activity-container-content-list-title\",\n                                        children: \"Tokens List\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                        className: \"token-activity-container-content-list-header\",\n                                        children: [\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                children: \"SYMBOL\"\n                                            }),\n                                            \" \",\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                children: \"VOLUME\"\n                                            })\n                                        ]\n                                    }),\n                                    isErrorList ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.ErrorPlaceholder), {}) : isFetchingList ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"token-activity-container-content-list-loader\",\n                                        children: Array.from({\n                                            length: 10\n                                        }).map((_, i)=>/*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                className: \"token-activity-container-content-list-loader-row\"\n                                            }, i))\n                                    }) : dataList?.map((item, rowIndex)=>/*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _react.Fragment), {\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                                    className: `token-activity-container-content-list-row row-${rowIndex} ${rowIndex === rowSelected ? \"open\" : \"\"}`,\n                                                    onClick: ()=>handleRowSelected(rowIndex),\n                                                    children: [\n                                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                                            className: \"token-activity-container-content-list-row-symbol\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"img\", {\n                                                                    src: (0, _token.getTokenIcon)(item.symbol),\n                                                                    alt: `${item.symbol} icon`,\n                                                                    height: \"24\",\n                                                                    width: \"24\",\n                                                                    className: \"top-asset-list-row-item-to-icon\",\n                                                                    loading: \"lazy\"\n                                                                }),\n                                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                                                    children: item.symbol\n                                                                })\n                                                            ]\n                                                        }),\n                                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                                            className: \"token-activity-container-content-list-row-volume\",\n                                                            children: [\n                                                                \"$\",\n                                                                (0, _number.formatNumber)(item.volume, 0),\n                                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.ChevronDownIcon), {})\n                                                            ]\n                                                        })\n                                                    ]\n                                                }),\n                                                width < (0, _consts.BREAKPOINTS).desktop && rowSelected === rowIndex && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _chart.Chart), {\n                                                    data: dataChart,\n                                                    filters: filters,\n                                                    isError: isErrorChart,\n                                                    isLoading: isLoadingChart,\n                                                    metricSelected: metricSelected,\n                                                    rowSelected: rowSelected,\n                                                    setScaleSelected: setScaleSelected,\n                                                    scaleSelected: scaleSelected,\n                                                    chartSelected: chartSelected,\n                                                    setChartSelected: setChartSelected\n                                                })\n                                            ]\n                                        }, rowIndex))\n                                ]\n                            }),\n                            width >= (0, _consts.BREAKPOINTS).desktop && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _chart.Chart), {\n                                data: dataChart,\n                                filters: filters,\n                                isError: isErrorChart,\n                                isLoading: isLoadingChart,\n                                metricSelected: metricSelected,\n                                rowSelected: rowSelected,\n                                setScaleSelected: setScaleSelected,\n                                scaleSelected: scaleSelected,\n                                setChartSelected: setChartSelected,\n                                chartSelected: chartSelected\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n};\nexports.default = TokenActivity;\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"react-query\":\"dbjqN\",\"src/consts\":\"2l9qr\",\"src/context/EnvironmentContext\":\"jjAhi\",\"src/icons/generic\":\"23xak\",\"src/components/atoms\":\"jMZmV\",\"src/components/molecules\":\"f5gIB\",\"src/utils/hooks\":\"2VXdL\",\"src/utils/token\":\"4G1MX\",\"src/utils/number\":\"c38zr\",\"src/utils/date\":\"9wAFB\",\"src/utils/wormhole\":\"6bzfn\",\"src/utils/filterUtils\":\"hmQ6c\",\"src/api/Client\":\"bTumr\",\"./Chart\":\"4mJxU\",\"src/analytics\":\"cr0zc\",\"./styles.scss\":\"4xaf7\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"4mJxU\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"Chart\", ()=>Chart);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _reactApexcharts = require(\"react-apexcharts\");\nvar _reactApexchartsDefault = parcelHelpers.interopDefault(_reactApexcharts);\nvar _consts = require(\"src/consts\");\nvar _atoms = require(\"src/components/atoms\");\nvar _molecules = require(\"src/components/molecules\");\nvar _apexChartUtils = require(\"src/utils/apexChartUtils\");\nvar _hooks = require(\"src/utils/hooks\");\nvar _generic = require(\"src/icons/generic\");\nvar _number = require(\"src/utils/number\");\nvar _date = require(\"src/utils/date\");\nvar _stylesScss = require(\"./styles.scss\");\nconst TYPE_CHART_LIST = [\n    {\n        label: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.ActivityIcon), {\n            width: 24\n        }),\n        value: \"area\",\n        ariaLabel: \"Area\"\n    },\n    {\n        label: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.AnalyticsIcon), {\n            width: 24\n        }),\n        value: \"bar\",\n        ariaLabel: \"Bar\"\n    }\n];\nconst SCALE_CHART_LIST = [\n    {\n        label: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.LogarithmicIcon), {\n            width: 22\n        }),\n        value: \"logarithmic\",\n        ariaLabel: \"Logarithmic\"\n    },\n    {\n        label: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.LinearIcon), {\n            width: 22\n        }),\n        value: \"linear\",\n        ariaLabel: \"Linear\"\n    }\n];\nconst Chart = ({ data, filters, isError, isLoading, metricSelected, setScaleSelected, scaleSelected, chartSelected, setChartSelected })=>{\n    const chartRef = (0, _react.useRef)(null);\n    const { width } = (0, _hooks.useWindowSize)();\n    const isTablet = width >= (0, _consts.BREAKPOINTS).tablet;\n    const isDesktop = width >= (0, _consts.BREAKPOINTS).desktop;\n    const isBigDesktop = width >= (0, _consts.BREAKPOINTS).bigDesktop;\n    const token = data?.tokens?.length ? data.tokens[0] : null;\n    const dataTransformed = token ? token.time_range_data?.map((item)=>({\n            from: new Date(item.from).toISOString(),\n            to: new Date(item.to).toISOString(),\n            symbol: token.token_symbol,\n            volume: item.total_value_transferred,\n            transactions: item.total_messages\n        })) : null;\n    const fromDateFormatted = (0, _date.toLocaleDate)(dataTransformed?.[0]?.from);\n    const toDateFormatted = (0, _date.toLocaleDate)(dataTransformed?.[dataTransformed.length - 1]?.to);\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n        className: \"token-activity-chart\",\n        ref: chartRef,\n        children: [\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"token-activity-chart-title\",\n                children: [\n                    \"Token Activity\",\n                    \" \",\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"token-activity-chart-title-range\",\n                        children: fromDateFormatted && toDateFormatted && /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                            children: [\n                                fromDateFormatted,\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.ArrowRightIcon), {}),\n                                toDateFormatted\n                            ]\n                        })\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"token-activity-chart-graph\",\n                children: isError ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.ErrorPlaceholder), {\n                    errorType: \"chart\"\n                }) : isLoading ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Loader), {}) : /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.WormholeScanBrand), {}),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                            className: \"token-activity-chart-top\",\n                            children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"token-activity-chart-top-toggles\",\n                                children: [\n                                    isDesktop && chartSelected === \"area\" && metricSelected === \"volume\" && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                        ariaLabel: \"Select scale\",\n                                        items: SCALE_CHART_LIST,\n                                        onValueChange: (value)=>setScaleSelected(value, true),\n                                        type: \"secondary\",\n                                        value: scaleSelected\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                        ariaLabel: \"Select type\",\n                                        items: TYPE_CHART_LIST,\n                                        onValueChange: (value)=>setChartSelected(value),\n                                        type: \"secondary\",\n                                        value: chartSelected\n                                    })\n                                ]\n                            })\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _reactApexchartsDefault.default), {\n                            type: chartSelected,\n                            height: isDesktop ? 630 : 415,\n                            width: \"100%\",\n                            series: [\n                                {\n                                    name: \"Volume or Transfers\",\n                                    color: \"var(--color-lime)\",\n                                    data: dataTransformed ? metricSelected === \"volume\" ? dataTransformed?.map(({ volume })=>volume) : dataTransformed?.map(({ transactions })=>transactions) : []\n                                }\n                            ],\n                            options: {\n                                chart: {\n                                    events: chartSelected === \"bar\" ? {\n                                        mouseLeave: ()=>{\n                                            (0, _apexChartUtils.changePathOpacity)({\n                                                ref: chartRef,\n                                                opacity: 1\n                                            });\n                                        },\n                                        mouseMove (e, chart, options) {\n                                            if (options.dataPointIndex < 0) (0, _apexChartUtils.changePathOpacity)({\n                                                ref: chartRef,\n                                                opacity: 1\n                                            });\n                                        }\n                                    } : {},\n                                    toolbar: {\n                                        show: false\n                                    },\n                                    zoom: {\n                                        enabled: false\n                                    }\n                                },\n                                dataLabels: {\n                                    enabled: false\n                                },\n                                fill: {\n                                    type: chartSelected === \"area\" ? \"gradient\" : \"solid\",\n                                    gradient: {\n                                        opacityFrom: 0.4,\n                                        opacityTo: 0,\n                                        shadeIntensity: 0,\n                                        stops: [\n                                            0,\n                                            100\n                                        ],\n                                        type: \"vertical\"\n                                    }\n                                },\n                                grid: {\n                                    borderColor: \"var(--color-gray-900)\",\n                                    padding: {\n                                        bottom: 0,\n                                        left: 32,\n                                        right: 16,\n                                        top: 64\n                                    },\n                                    show: true,\n                                    strokeDashArray: 5\n                                },\n                                labels: dataTransformed?.map(({ from })=>from),\n                                states: {\n                                    hover: {\n                                        filter: {\n                                            type: \"none\"\n                                        }\n                                    },\n                                    active: {\n                                        filter: {\n                                            type: \"none\"\n                                        }\n                                    }\n                                },\n                                stroke: {\n                                    curve: \"smooth\",\n                                    width: chartSelected === \"area\" ? 2 : 0\n                                },\n                                tooltip: {\n                                    custom: function({ series, seriesIndex, dataPointIndex, w }) {\n                                        const dataPoint = dataTransformed[dataPointIndex];\n                                        const { from, to, volume, symbol, transactions } = dataPoint;\n                                        if (chartSelected === \"bar\") (0, _apexChartUtils.updatePathStyles)({\n                                            chartRef,\n                                            dataPointIndex\n                                        });\n                                        return `<div class='token-activity-chart-tooltip'>\n                              <div class='token-activity-chart-tooltip-date'>\n                                <div>\n                                  From:\n                                  ${new Date(from).toLocaleString(\"en-GB\", {\n                                            hour: \"2-digit\",\n                                            minute: \"2-digit\"\n                                        })},\n                                  ${new Date(from).toLocaleString(\"en-GB\", {\n                                            day: \"2-digit\",\n                                            month: \"long\",\n                                            year: \"numeric\"\n                                        })}\n                                </div>\n                                <div>\n                                  To:\n                                  ${new Date(to).toLocaleString(\"en-GB\", {\n                                            hour: \"2-digit\",\n                                            minute: \"2-digit\"\n                                        })},\n                                  ${new Date(to).toLocaleString(\"en-GB\", {\n                                            day: \"2-digit\",\n                                            month: \"long\",\n                                            year: \"numeric\"\n                                        })}\n                                </div>\n                              </div>\n                              <div class='token-activity-chart-tooltip-info'>\n                                ${symbol} Transferred:\n                                <span>\n                                  ${metricSelected === \"volume\" ? `$${(0, _number.formatNumber)(volume)}` : transactions}\n                                </span>\n                              </div>\n                            </div>`;\n                                    },\n                                    followCursor: isDesktop,\n                                    intersect: false,\n                                    shared: true\n                                },\n                                xaxis: {\n                                    axisBorder: {\n                                        show: false\n                                    },\n                                    axisTicks: {\n                                        show: false\n                                    },\n                                    crosshairs: {\n                                        show: true\n                                    },\n                                    labels: {\n                                        formatter: (value)=>{\n                                            let date = \"\";\n                                            if (filters.timespan === \"1h\") date = new Date(value).toLocaleString(\"en-GB\", {\n                                                hour: \"2-digit\",\n                                                minute: \"2-digit\"\n                                            });\n                                            else if (filters.timespan === \"1d\") date = new Date(value).toLocaleString(\"en-GB\", {\n                                                day: \"2-digit\",\n                                                month: \"short\"\n                                            });\n                                            else date = new Date(value).toLocaleString(\"en-GB\", {\n                                                month: \"short\",\n                                                year: \"2-digit\"\n                                            });\n                                            return date;\n                                        },\n                                        hideOverlappingLabels: true,\n                                        offsetX: 0,\n                                        rotate: 0,\n                                        style: {\n                                            colors: \"var(--color-gray-400)\",\n                                            fontFamily: \"Roboto Mono, Roboto, sans-serif\",\n                                            fontSize: \"12px\",\n                                            fontWeight: 400\n                                        },\n                                        trim: false\n                                    },\n                                    tickAmount: isBigDesktop ? 10 : isDesktop ? 6 : isTablet ? 4 : 2,\n                                    tooltip: {\n                                        enabled: false\n                                    }\n                                },\n                                yaxis: {\n                                    axisBorder: {\n                                        show: false\n                                    },\n                                    axisTicks: {\n                                        show: false\n                                    },\n                                    labels: {\n                                        formatter: (val, opts)=>{\n                                            if (metricSelected === \"volume\") return `$${(0, _apexChartUtils.formatterYAxis)(val, opts)}`;\n                                            else return (0, _apexChartUtils.formatterYAxis)(val, opts);\n                                        },\n                                        align: \"left\",\n                                        style: {\n                                            colors: \"var(--color-gray-400)\",\n                                            fontFamily: \"Roboto Mono, Roboto, sans-serif\",\n                                            fontSize: \"12px\",\n                                            fontWeight: 400\n                                        }\n                                    },\n                                    logarithmic: scaleSelected === \"logarithmic\" && chartSelected === \"area\",\n                                    forceNiceScale: scaleSelected === \"logarithmic\" && chartSelected === \"area\",\n                                    min: 0,\n                                    opposite: true,\n                                    tickAmount: 8\n                                }\n                            }\n                        }, chartSelected + token?.token_symbol + metricSelected)\n                    ]\n                })\n            })\n        ]\n    });\n};\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"react-apexcharts\":\"lEV8Y\",\"src/consts\":\"2l9qr\",\"src/components/atoms\":\"jMZmV\",\"src/components/molecules\":\"f5gIB\",\"src/utils/apexChartUtils\":\"dX5fx\",\"src/utils/hooks\":\"2VXdL\",\"src/icons/generic\":\"23xak\",\"src/utils/number\":\"c38zr\",\"src/utils/date\":\"9wAFB\",\"./styles.scss\":\"4xaf7\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"4xaf7\":[function() {},{}],\"4xaf7\":[function() {},{}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=Home.afadaf2e.js.map\n","export { default as ChainActivity } from \"./ChainActivity\";\nexport { default as SearchNotFound } from \"./SearchNotFound\";\nexport { default as Table } from \"./Table\";\nexport { default as TokenActivity } from \"./TokenActivity\";\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { useQuery } from \"react-query\";\nimport { ChainId, chainToChainId } from \"@wormhole-foundation/sdk\";\nimport { useEnvironment } from \"src/context/EnvironmentContext\";\nimport analytics from \"src/analytics\";\nimport {\n  BlockchainIcon,\n  Counter,\n  Fullscreenable,\n  Loader,\n  Select,\n  ToggleGroup,\n} from \"src/components/atoms\";\nimport { Calendar, ErrorPlaceholder, WormholeScanBrand } from \"src/components/molecules\";\nimport { changePathOpacity, formatterYAxis, updatePathStyles } from \"src/utils/apexChartUtils\";\nimport { getChainName } from \"src/utils/wormhole\";\nimport { getClient } from \"src/api/Client\";\nimport { useWindowSize, useLockBodyScroll } from \"src/utils/hooks\";\nimport { formatNumber, numberToSuffix } from \"src/utils/number\";\nimport {\n  ActivityIcon,\n  AnalyticsIcon,\n  ArrowRightIcon,\n  CrossIcon,\n  FilterListIcon,\n  FullscreenIcon,\n  GlobeIcon,\n  LinearIcon,\n  LogarithmicIcon,\n} from \"src/icons/generic\";\nimport { IChainActivity, IChainActivityInput } from \"src/api/guardian-network/types\";\nimport {\n  calculateDateDifferenceInDays,\n  getNextDate,\n  startOfDayUTC,\n  startOfMonthUTC,\n  toLocaleDate,\n} from \"src/utils/date\";\nimport { ChainFilterMainnet, ChainFilterTestnet } from \"src/utils/filterUtils\";\nimport {\n  colors,\n  DAY_IN_MILLISECONDS,\n  formatXaxisLabels,\n  grayColors,\n  IAccumulator,\n  IChainList,\n  ICompleteData,\n  MEDIUM_TIMESPAN_LIMIT,\n  SHORT_TIMESPAN_LIMIT,\n  TSelectedPeriod,\n} from \"src/utils/chainActivityUtils\";\nimport { BREAKPOINTS } from \"src/consts\";\nimport \"./styles.scss\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst TYPE_CHART_LIST = [\n  { label: <ActivityIcon width={24} />, value: \"area\", ariaLabel: \"Area\" },\n  { label: <AnalyticsIcon width={24} />, value: \"bar\", ariaLabel: \"Bar\" },\n];\n\nconst SCALE_CHART_LIST = [\n  { label: <LogarithmicIcon width={22} />, value: \"logarithmic\", ariaLabel: \"Logarithmic\" },\n  { label: <LinearIcon width={22} />, value: \"linear\", ariaLabel: \"Linear\" },\n];\n\nconst SCALE_CHART_LIST_TEXT = [\n  { label: \"Logarithmic\", value: \"logarithmic\", ariaLabel: \"Logarithmic\" },\n  { label: \"Linear\", value: \"linear\", ariaLabel: \"Linear\" },\n];\n\nconst METRIC_CHART_LIST = [\n  { label: \"Volume\", value: \"volume\", ariaLabel: \"Volume\" },\n  { label: \"Transfers\", value: \"transactions\", ariaLabel: \"Transfers\" },\n];\n\nconst ChainActivity = () => {\n  const { width } = useWindowSize();\n  const isTablet = width >= BREAKPOINTS.tablet;\n  const isDesktop = width >= BREAKPOINTS.desktop;\n  const isBigDesktop = width >= BREAKPOINTS.bigDesktop;\n\n  const { environment } = useEnvironment();\n  const currentNetwork = environment.network;\n  const isMainnet = currentNetwork === \"Mainnet\";\n\n  const chartRef = useRef(null);\n\n  const [someZeroValue, setSomeZeroValue] = useState(false);\n  const [chartSelected, setChartSelected] = useState<\"area\" | \"bar\">(\"area\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [scaleSelected, setScaleSelectedState] = useState<\"linear\" | \"logarithmic\">(\"linear\");\n  const setScaleSelected = (value: \"linear\" | \"logarithmic\", track: boolean) => {\n    setScaleSelectedState(value);\n\n    if (track) {\n      analytics.track(\"scaleSelected\", {\n        selected: value,\n        selectedType: \"chainActivity\",\n      });\n    }\n  };\n\n  const [metricSelected, setMetricSelected] = useState<\"volume\" | \"transactions\">(\"volume\");\n\n  const initialDataDate = new Date(new Date().setFullYear(new Date().getFullYear() - 1));\n\n  const [startDate, setStartDate] = useState(initialDataDate);\n  const [endDate, setEndDate] = useState(new Date());\n  const [startDateDisplayed, setStartDateDisplayed] = useState(initialDataDate);\n  const [endDateDisplayed, setEndDateDisplayed] = useState(new Date());\n\n  const [showAllSourceChains, setShowAllSourceChains] = useState(true);\n  const [showAllTargetChains, setShowAllTargetChains] = useState(true);\n  const [allChainsSerie, setAllChainsSerie] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [messagesNumber, setMessagesNumber] = useState(0);\n  const [allMessagesNumber, setAllMessagesNumber] = useState(0);\n  const [volumeNumber, setVolumeNumber] = useState(0);\n  const [allVolumeNumber, setAllVolumeNumber] = useState(0);\n\n  const [lastBtnSelected, setLastBtnSelected] = useState<TSelectedPeriod>(\"year\");\n  const [openFilters, setOpenFilters] = useState(false);\n\n  const timeRangeData = series?.[0]?.data || [];\n  const fromDateFormatted = toLocaleDate(timeRangeData[0]?.x);\n  const toDateFormatted = toLocaleDate(timeRangeData[timeRangeData.length - 1]?.to);\n\n  useLockBodyScroll({\n    isLocked: !isDesktop && openFilters,\n    scrollableClasses: [\"select__option\", \"show-date\"],\n  });\n\n  const orderedChains = isMainnet ? ChainFilterMainnet : ChainFilterTestnet;\n  const ALL_SOURCE_CHAINS = {\n    label: \"All Chains\",\n    value: \"All Chains\",\n    icon: <GlobeIcon width={24} style={{ color: \"#fff\" }} />,\n    showMinus: !showAllSourceChains,\n    disabled: false,\n  };\n  const ALL_TARGET_CHAINS = {\n    label: \"All Chains\",\n    value: \"All Chains\",\n    icon: <GlobeIcon width={24} style={{ color: \"#fff\" }} />,\n    showMinus: !showAllTargetChains,\n    disabled: false,\n  };\n\n  const [sourceChainListSelected, setSourceChainListSelected] = useState([ALL_SOURCE_CHAINS]);\n  const [targetChainListSelected, setTargetChainListSelected] = useState([ALL_TARGET_CHAINS]);\n\n  const SOURCE_CHAIN_LIST = [\n    ALL_SOURCE_CHAINS,\n    ...orderedChains.map(chainId => ({\n      label: getChainName({\n        network: currentNetwork,\n        chainId: chainId,\n      }),\n      value: `${chainId}`,\n      icon: (\n        <BlockchainIcon\n          background=\"var(--color-white-10)\"\n          chainId={chainId}\n          className=\"chain-icon\"\n          colorless={true}\n          lazy={false}\n          network={currentNetwork}\n          size={24}\n        />\n      ),\n      showMinus: false,\n      disabled:\n        sourceChainListSelected.length >= 10 &&\n        !sourceChainListSelected.some(item => +item.value === chainId),\n    })),\n  ];\n  const TARGET_CHAIN_LIST = [\n    ALL_TARGET_CHAINS,\n    ...orderedChains.map(chainId => ({\n      label: getChainName({\n        network: currentNetwork,\n        chainId: chainId,\n      }),\n      value: `${chainId}`,\n      icon: (\n        <BlockchainIcon\n          background=\"var(--color-white-10)\"\n          chainId={chainId}\n          className=\"chain-icon\"\n          colorless={true}\n          lazy={false}\n          network={currentNetwork}\n          size={24}\n        />\n      ),\n      showMinus: false,\n      disabled:\n        targetChainListSelected.length >= 10 &&\n        !targetChainListSelected.some(item => +item.value === chainId),\n    })),\n  ];\n\n  const [filters, setFilters] = useState<IChainActivityInput>({\n    from: startDate?.toISOString(),\n    to: endDate?.toISOString(),\n    timespan: \"1mo\",\n    sourceChain: [],\n    targetChain: [],\n    appId: \"\",\n  });\n\n  const isUTC00 = new Date().getTimezoneOffset() === 0;\n  const isUTCPositive = new Date().getTimezoneOffset() < 0;\n\n  const tickAmount =\n    allChainsSerie?.[0]?.data?.length > 0\n      ? isBigDesktop\n        ? Math.min(allChainsSerie[0].data.length, 18)\n        : isTablet\n        ? Math.min(allChainsSerie[0].data.length, 10)\n        : 4\n      : null;\n\n  const lastTrackedObjectRef = useRef(null);\n\n  const trackAnalytics = () => {\n    const objectToSend = {\n      network: currentNetwork,\n      selectedType: metricSelected,\n      selectedTimeRange: lastBtnSelected.toUpperCase(),\n      chain:\n        (filters.sourceChain?.length > 0\n          ? filters.sourceChain\n              .map(chain =>\n                getChainName({\n                  network: currentNetwork,\n                  chainId: +chain as ChainId,\n                }),\n              )\n              .join(\", \")\n          : \"Unset\") +\n        (filters.targetChain?.length > 0\n          ? \" -> \" +\n            filters.targetChain\n              .map(chain =>\n                getChainName({\n                  network: currentNetwork,\n                  chainId: +chain as ChainId,\n                }),\n              )\n              .join(\", \")\n          : \"\"),\n    };\n\n    // Check if the new objectToSend is different from the last tracked object\n    if (JSON.stringify(objectToSend) !== JSON.stringify(lastTrackedObjectRef.current)) {\n      analytics.track(\"chainActivity\", objectToSend);\n      lastTrackedObjectRef.current = objectToSend;\n    }\n  };\n\n  const {\n    data: dataAllChains,\n    isError: isErrorAllChains,\n    isFetching: isFetchingAllChains,\n  } = useQuery(\n    [\"getChainActivity\", filters.from, filters.to, filters.targetChain, filters.appId],\n    () => {\n      trackAnalytics();\n\n      return getClient().guardianNetwork.getChainActivity({\n        from: filters.from,\n        to: filters.to,\n        timespan: filters.timespan,\n        sourceChain: [],\n        targetChain: filters.targetChain,\n        appId: filters.appId,\n      });\n    },\n  );\n\n  const { data, isError, isFetching } = useQuery([\"getChainActivity\", filters], () => {\n    if (filters?.sourceChain?.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    trackAnalytics();\n\n    return getClient().guardianNetwork.getChainActivity({\n      from: filters.from,\n      to: filters.to,\n      timespan: filters.timespan,\n      sourceChain: filters.sourceChain,\n      targetChain: filters.targetChain,\n      appId: filters.appId,\n    });\n  });\n\n  const getDateList = useCallback(() => {\n    let start = new Date(filters.from);\n    let end = new Date(filters.to);\n    const dateList: string[] = [];\n    const dateDifferenceInDays = calculateDateDifferenceInDays(start, end);\n\n    if (dateDifferenceInDays < SHORT_TIMESPAN_LIMIT) {\n      start.setUTCHours(start.getUTCHours(), 0, 0, 0);\n      end.setUTCHours(end.getUTCHours(), 0, 0, 0);\n      while (start < end) {\n        dateList.push(start.toISOString());\n        start.setUTCHours(start.getUTCHours() + 1, 0, 0, 0);\n      }\n    } else if (dateDifferenceInDays < MEDIUM_TIMESPAN_LIMIT) {\n      start = startOfDayUTC(start);\n      start.setUTCHours(0, 0, 0, 0);\n      while (\n        start < end &&\n        (isUTC00 ? true : start.getTime() < end.getTime() - DAY_IN_MILLISECONDS) &&\n        start.getTime() < new Date().getTime() - DAY_IN_MILLISECONDS\n      ) {\n        dateList.push(start.toISOString());\n        start.setUTCDate(start.getUTCDate() + 1);\n      }\n    } else {\n      start = startOfMonthUTC(start);\n      start.setUTCHours(0, 0, 0, 0);\n      end = startOfMonthUTC(end);\n      end.setUTCHours(0, 0, 0, 0);\n\n      const lastMonthRemoved = new Date();\n      lastMonthRemoved.setMonth(lastMonthRemoved.getMonth() - 1);\n      while (\n        start.getTime() < end.getTime() &&\n        (!isUTC00 && !isUTCPositive\n          ? !(\n              start.getFullYear() === new Date().getFullYear() &&\n              start.getMonth() === lastMonthRemoved.getMonth()\n            )\n          : true)\n      ) {\n        dateList.push(start.toISOString());\n        start.setUTCMonth(start.getUTCMonth() + 1);\n      }\n    }\n\n    return dateList;\n  }, [filters.from, filters.to, isUTC00, isUTCPositive]);\n\n  const handleChainSelection = (value: IChainList[], type: \"source\" | \"target\") => {\n    if (type === \"source\") {\n      if (\n        value.length === 0 &&\n        sourceChainListSelected.length === 1 &&\n        sourceChainListSelected[0].value === \"All Chains\"\n      ) {\n        return;\n      }\n\n      const lastChainSelected = value?.[value.length - 1]?.value;\n\n      if (value.length === 0 || lastChainSelected === \"All Chains\") {\n        value = [SOURCE_CHAIN_LIST[0]];\n      } else {\n        value = value.filter(item => item.value !== \"All Chains\");\n      }\n\n      setSourceChainListSelected(value);\n      const chainsSelected = value.map((item: IChainList) => item.value);\n      const chainsSelectedWithoutAll = chainsSelected.filter(\n        (chain: string) => chain !== \"All Chains\",\n      );\n      const isAllChainsSelected = chainsSelected.includes(\"All Chains\");\n\n      if (isAllChainsSelected) {\n        setShowAllSourceChains(true);\n      } else {\n        setShowAllSourceChains(false);\n      }\n\n      setFilters({\n        ...filters,\n        sourceChain: chainsSelectedWithoutAll,\n      });\n    } else if (type === \"target\") {\n      if (\n        value.length === 0 &&\n        targetChainListSelected.length === 1 &&\n        targetChainListSelected[0].value === \"All Chains\"\n      ) {\n        return;\n      }\n\n      const lastChainSelected = value?.[value.length - 1]?.value;\n\n      if (value.length === 0 || lastChainSelected === \"All Chains\") {\n        value = [TARGET_CHAIN_LIST[0]];\n      } else {\n        value = value.filter(item => item.value !== \"All Chains\");\n      }\n\n      setTargetChainListSelected(value);\n      const chainsSelected = value.map((item: IChainList) => item.value);\n      const chainsSelectedWithoutAll = chainsSelected.filter(\n        (chain: string) => chain !== \"All Chains\",\n      );\n      const isAllChainsSelected = chainsSelected.includes(\"All Chains\");\n\n      if (isAllChainsSelected) {\n        setShowAllTargetChains(true);\n      } else {\n        setShowAllTargetChains(false);\n      }\n\n      setFilters({\n        ...filters,\n        targetChain: chainsSelectedWithoutAll,\n      });\n    }\n  };\n\n  const handleFiltersOpened = () => {\n    setOpenFilters(prev => !prev);\n  };\n\n  const applyFilters = () => {\n    setOpenFilters(false);\n  };\n\n  const resetFilters = () => {\n    setStartDate(initialDataDate);\n    setEndDate(new Date());\n    setStartDateDisplayed(initialDataDate);\n    setEndDateDisplayed(new Date());\n    setLastBtnSelected(\"year\");\n    setShowAllSourceChains(true);\n    setShowAllTargetChains(true);\n    setSourceChainListSelected([ALL_SOURCE_CHAINS]);\n    setTargetChainListSelected([ALL_TARGET_CHAINS]);\n    setFilters({\n      from: initialDataDate?.toISOString(),\n      to: new Date()?.toISOString(),\n      timespan: \"1mo\",\n      sourceChain: [],\n      targetChain: [],\n      appId: \"\",\n    });\n    setOpenFilters(false);\n  };\n\n  useEffect(() => {\n    if (startDate && endDate) {\n      const dateDifferenceInDays = calculateDateDifferenceInDays(startDate, endDate);\n\n      const timespan =\n        dateDifferenceInDays < SHORT_TIMESPAN_LIMIT\n          ? \"1h\"\n          : dateDifferenceInDays < MEDIUM_TIMESPAN_LIMIT\n          ? \"1d\"\n          : \"1mo\";\n\n      const newFrom = new Date(startDate);\n\n      timespan === \"1d\"\n        ? newFrom.setDate(isUTC00 ? newFrom.getDate() : newFrom.getDate() + 1)\n        : timespan === \"1mo\"\n        ? newFrom.setMonth(isUTC00 || isUTCPositive ? newFrom.getMonth() : newFrom.getMonth() + 1)\n        : null;\n\n      const newTo = new Date(endDate);\n      timespan === \"1d\" && !isUTC00\n        ? newTo.setDate(newTo.getDate() + 1)\n        : timespan === \"1mo\" && !isUTCPositive && !isUTC00\n        ? newTo.setMonth(newTo.getMonth() + 1)\n        : null;\n\n      setStartDateDisplayed(startDate);\n      setEndDateDisplayed(endDate);\n\n      setFilters(prevFilters => ({\n        ...prevFilters,\n        from: newFrom.toISOString(),\n        to: newTo.toISOString(),\n        timespan: timespan,\n      }));\n    }\n  }, [endDate, isUTC00, isUTCPositive, startDate]);\n\n  useEffect(() => {\n    if (dataAllChains) {\n      const groupDataByDate = (data: IChainActivity[]) => {\n        return data.reduce((acc: IAccumulator, curr) => {\n          const key = `${curr.from}-${curr.to}`;\n          if (!acc[key]) {\n            acc[key] = {\n              from: curr.from.slice(0, -1) + \".000Z\",\n              to: curr.to,\n              emitter_chain: \"allChains\",\n              volume: 0,\n              count: 0,\n              details: [],\n            };\n          }\n          acc[key].volume += curr.volume / 10 ** 8;\n          acc[key].count += curr.count;\n\n          const index =\n            metricSelected === \"transactions\"\n              ? acc[key].details.findIndex(detail => detail.count < curr.count)\n              : acc[key].details.findIndex(detail => detail.volume < curr.volume / 10 ** 8);\n          const detail = {\n            emitter_chain: curr.emitter_chain,\n            volume: curr.volume / 10 ** 8,\n            count: curr.count,\n          };\n\n          if (index === -1) {\n            acc[key].details.push(detail);\n          } else {\n            acc[key].details.splice(index, 0, detail);\n          }\n\n          return acc;\n        }, {});\n      };\n\n      const groupedByDate = groupDataByDate(dataAllChains);\n      const totalVolumeAndCountPerDay = Object.values(groupedByDate);\n      const seriesForAllChains = [\n        {\n          name: \"All Chains\",\n          data: totalVolumeAndCountPerDay.map(item => ({\n            x: item.from,\n            y: metricSelected === \"transactions\" ? item.count : item.volume,\n            to: item.to,\n            volume: item.volume,\n            count: item.count,\n            emitter_chain: item.emitter_chain,\n            details: item.details,\n            color: \"var(--color-lime)\",\n          })),\n          color: \"var(--color-lime)\",\n        },\n      ];\n\n      const dateList = getDateList();\n      const completeData = dateList.reduce((obj: ICompleteData, date: string) => {\n        obj[date] = {\n          color: \"#fff\",\n          count: 0,\n          details: [],\n          emitter_chain: \"allChains\",\n          volume: 0,\n          to: getNextDate(date, filters.timespan),\n          x: date,\n          y: 0,\n        };\n        return obj;\n      }, {});\n\n      seriesForAllChains[0].data.forEach(item => {\n        completeData[item.x] = item;\n      });\n\n      seriesForAllChains[0].data = Object.values(completeData);\n      seriesForAllChains[0].data.sort((a, b) => new Date(a.x).getTime() - new Date(b.x).getTime());\n\n      const totalMessages = dataAllChains.reduce((acc, item) => acc + item.count, 0);\n      const totalVolume = dataAllChains.reduce((acc, item) => acc + item.volume, 0);\n\n      setAllMessagesNumber(totalMessages);\n      setAllVolumeNumber(totalVolume / 10 ** 8);\n      setAllChainsSerie(seriesForAllChains);\n    }\n  }, [dataAllChains, filters.timespan, getDateList, metricSelected]);\n\n  useEffect(() => {\n    if (!data) return;\n    setIsLoading(true);\n\n    const dataByChain: { [key: string]: any[] } = {};\n    const allDates: { [key: string]: boolean } = {};\n    const chainIndices: { [key: string]: number } = {};\n    sourceChainListSelected.forEach((chain: IChainList, i: number) => {\n      chainIndices[chain.value] = i;\n    });\n\n    // Group by emitter_chain and extract all dates\n    data.forEach(item => {\n      // formatDate to add milliseconds and match dates when using .toISOString()\n      const formatDate = item.from.slice(0, -1) + \".000Z\";\n\n      if (!dataByChain[item.emitter_chain]) {\n        dataByChain[item.emitter_chain] = [];\n      }\n\n      dataByChain[item.emitter_chain].push({\n        x: formatDate,\n        y: metricSelected === \"transactions\" ? item.count : item.volume / 10 ** 8,\n        to: item.to,\n        volume: item.volume / 10 ** 8,\n        count: item.count,\n        emitter_chain: item.emitter_chain,\n        color: colors[chainIndices[item.emitter_chain]] || \"#fff\",\n      });\n\n      allDates[formatDate] = true;\n    });\n\n    const selectedChains = filters?.sourceChain?.length > 0 ? filters.sourceChain : [];\n    const dateList = getDateList();\n\n    // When there were no movements in that time range, the endpoint does not bring\n    // information for that chain, so we need to add it manually\n    selectedChains.forEach(chain => {\n      dataByChain[chain] = dateList.map((date: string) => {\n        const existingData = dataByChain[chain]?.find(item => item.x === date);\n        return (\n          existingData || {\n            x: date,\n            y: 0,\n            to: getNextDate(date, filters.timespan),\n            volume: 0,\n            count: 0,\n            emitter_chain: chain,\n            color: colors[chainIndices[chain]] || \"#fff\",\n          }\n        );\n      });\n    });\n\n    // Sort by date\n    Object.keys(dataByChain).forEach(chain => {\n      Object.keys(allDates).forEach(date => {\n        if (!dataByChain[chain].some(item => item.x === date)) {\n          dataByChain[chain].push({ x: date, y: 0, volume: 0, count: 0, emitter_chain: chain });\n        }\n      });\n      dataByChain[chain].sort((a, b) => new Date(a.x).getTime() - new Date(b.x).getTime());\n    });\n\n    const newSeries = Object.keys(dataByChain)\n      .map(chain => {\n        return {\n          name: getChainName({\n            network: currentNetwork,\n            chainId: +chain as ChainId,\n          }),\n          data: dataByChain[chain],\n          color: colors[chainIndices[chain]] || \"#fff\",\n        };\n      })\n      .sort((a, b) => a.name.localeCompare(b.name));\n\n    const sumOfMessages = data.reduce((acc, item) => acc + item.count, 0);\n    setMessagesNumber(sumOfMessages);\n\n    const sumOfVolume = data.reduce((acc, item) => acc + item.volume, 0);\n    setVolumeNumber(sumOfVolume / 10 ** 8);\n\n    if (showAllSourceChains) {\n      setSeries([...allChainsSerie, ...newSeries]);\n    } else {\n      setSeries(newSeries);\n    }\n  }, [\n    allChainsSerie,\n    sourceChainListSelected,\n    currentNetwork,\n    data,\n    filters.sourceChain,\n    getDateList,\n    metricSelected,\n    showAllSourceChains,\n    filters.timespan,\n  ]);\n\n  useEffect(() => {\n    if (!isMainnet) {\n      setMetricSelected(\"transactions\");\n    }\n  }, [isMainnet]);\n\n  useEffect(() => {\n    const checkForZeroValues = (obj: any, path = \"\") => {\n      let hasZeroValue = false;\n      let hasNonZeroValue = false;\n\n      const checkValue = (value: any, currentPath: string) => {\n        if (typeof value === \"object\" && value !== null) {\n          Object.entries(value).forEach(([key, val]) => {\n            const newPath = currentPath ? `${currentPath}.${key}` : key;\n            checkValue(val, newPath);\n          });\n        } else if (value === 0) {\n          hasZeroValue = true;\n          // console.log(\"zero value found at\", currentPath);\n        } else if (typeof value === \"number\" && value !== 0) {\n          hasNonZeroValue = true;\n        }\n      };\n\n      checkValue(obj, path);\n      return { hasZeroValue, hasNonZeroValue };\n    };\n\n    let seriesHasZeroValue = false;\n    let seriesHasNonZeroValue = false;\n\n    series.forEach((seriesItem, index) => {\n      const { hasZeroValue, hasNonZeroValue } = checkForZeroValues(seriesItem, `series[${index}]`);\n      seriesHasZeroValue = seriesHasZeroValue || hasZeroValue;\n      seriesHasNonZeroValue = seriesHasNonZeroValue || hasNonZeroValue;\n    });\n\n    setSomeZeroValue(seriesHasZeroValue);\n    if (seriesHasZeroValue) {\n      setScaleSelected(\"linear\", false);\n    } else if (seriesHasNonZeroValue) {\n      setScaleSelected(\"logarithmic\", false);\n    }\n\n    setIsLoading(false);\n  }, [series]);\n\n  const fullscreenBtnRef = useRef(null);\n\n  return (\n    <Fullscreenable\n      className=\"chain-activity\"\n      buttonRef={fullscreenBtnRef}\n      itemName=\"chainActivity\"\n    >\n      {openFilters && <div className=\"chain-activity-bg\" onClick={handleFiltersOpened} />}\n\n      <h2 className=\"chain-activity-title\">\n        <AnalyticsIcon width={24} /> Chains Transfers{\" \"}\n        <div className=\"chain-activity-title-fullscreen\" ref={fullscreenBtnRef}>\n          <FullscreenIcon width={20} />\n        </div>\n      </h2>\n\n      <div className=\"chain-activity-chart\" ref={chartRef}>\n        <div className=\"chain-activity-chart-top\">\n          <button\n            className=\"chain-activity-chart-top-mobile-filters-btn\"\n            onClick={handleFiltersOpened}\n          >\n            <FilterListIcon width={24} />\n            <span className=\"chain-activity-chart-top-mobile-filters-btn-txt\">Filters</span>\n\n            {filters.sourceChain.length > 0 &&\n            filters.targetChain.length > 0 &&\n            filters.appId !== \"\" ? (\n              <Counter>3</Counter>\n            ) : filters.sourceChain.length > 0 && filters.targetChain.length > 0 ? (\n              <Counter>2</Counter>\n            ) : filters.sourceChain.length > 0 ? (\n              <Counter>1</Counter>\n            ) : (\n              \"\"\n            )}\n          </button>\n\n          <div className={`chain-activity-chart-top-filters ${openFilters ? \"open\" : \"\"}`}>\n            <div className=\"chain-activity-chart-top-filters-title\">\n              <p>Filters</p>\n              <button onClick={handleFiltersOpened}>\n                <CrossIcon width={24} />\n              </button>\n            </div>\n\n            <Calendar\n              className=\"chain-activity-chart-top-filters-calendar\"\n              startDate={startDate}\n              setStartDate={setStartDate}\n              endDate={endDate}\n              setEndDate={setEndDate}\n              lastBtnSelected={lastBtnSelected}\n              setLastBtnSelected={setLastBtnSelected}\n              startDateDisplayed={startDateDisplayed}\n              endDateDisplayed={endDateDisplayed}\n              isDesktop={isDesktop}\n              showDateRange\n            />\n\n            <Select\n              ariaLabel=\"Select Chains\"\n              className=\"chain-activity-chart-top-filters-select\"\n              items={SOURCE_CHAIN_LIST}\n              menuFixed={!isDesktop}\n              menuListStyles={{ maxHeight: isDesktop ? 264 : 180 }}\n              name=\"sourceChain\"\n              onValueChange={(value: any) => handleChainSelection(value, \"source\")}\n              text={\n                <div className=\"chain-activity-chart-top-filters-select-text\">\n                  {filters.sourceChain.length > 0 && (\n                    <Counter>{filters.sourceChain.length}</Counter>\n                  )}\n                  Source <span className=\"hidden-desktop-1180\">chain</span>\n                </div>\n              }\n              type=\"searchable\"\n              value={sourceChainListSelected}\n            />\n\n            <Select\n              ariaLabel=\"Select Chains\"\n              className=\"chain-activity-chart-top-filters-select\"\n              items={TARGET_CHAIN_LIST}\n              menuFixed={!isDesktop}\n              menuListStyles={{ maxHeight: isDesktop ? 264 : 180 }}\n              name=\"targetChain\"\n              onValueChange={(value: any) => handleChainSelection(value, \"target\")}\n              text={\n                <div className=\"chain-activity-chart-top-filters-select-text\">\n                  {filters?.targetChain?.length > 0 && (\n                    <Counter>{filters.targetChain.length}</Counter>\n                  )}\n                  Target <span className=\"hidden-desktop-1180\">chain</span>\n                </div>\n              }\n              type=\"searchable\"\n              value={targetChainListSelected}\n            />\n\n            {/*\n              TODO: Implement this when the endpoint supports all protocols\n            \n            <Select\n              ariaLabel=\"Select Protocol\"\n              className=\"chain-activity-chart-top-filters-select\"\n              controlStyles={{ minWidth: 256 }}\n              isMulti={false}\n              items={PROTOCOL_LIST}\n              menuFixed={!isDesktop}\n              menuListStyles={{ maxHeight: isDesktop ? 264 : 180 }}\n              name=\"protocol\"\n              onValueChange={(value: any) =>\n                setFilters({\n                  ...filters,\n                  appId: value?.value === filters.appId ? \"\" : value.value,\n                })\n              }\n              text={\n                <div className=\"chain-activity-chart-top-filters-select-text\">\n                  {filters?.appId && <Counter>1</Counter>}\n                  Protocol\n                </div>\n              }\n              type=\"searchable\"\n              value={{\n                label: filters.appId,\n                value: filters.appId,\n              }}\n            /> */}\n\n            <ToggleGroup\n              ariaLabel=\"Select type\"\n              className=\"chain-activity-chart-top-filters-toggle-metric\"\n              items={isMainnet ? METRIC_CHART_LIST : [METRIC_CHART_LIST[1]]}\n              onValueChange={value => {\n                setMetricSelected(value);\n\n                analytics.track(\"metricSelected\", {\n                  network: currentNetwork,\n                  selected: value,\n                  selectedType: \"chainActivity\",\n                });\n              }}\n              value={metricSelected}\n            />\n\n            {!isDesktop && chartSelected === \"area\" && !someZeroValue && (\n              <ToggleGroup\n                ariaLabel=\"Select scale\"\n                className=\"chain-activity-chart-top-filters-toggle-metric\"\n                items={SCALE_CHART_LIST_TEXT}\n                onValueChange={value => setScaleSelected(value, true)}\n                value={scaleSelected}\n              />\n            )}\n\n            <div className=\"chain-activity-chart-top-filters-buttons\">\n              <button className=\"apply-btn\" onClick={applyFilters}>\n                Apply Filters\n              </button>\n\n              <button\n                className=\"reset-btn\"\n                disabled={\n                  filters.sourceChain.length === 0 &&\n                  filters.targetChain.length === 0 &&\n                  lastBtnSelected === \"year\"\n                }\n                onClick={resetFilters}\n              >\n                Reset Filters\n              </button>\n            </div>\n\n            <div\n              className={`chain-activity-chart-top-filters-legends ${\n                isFetching || isFetchingAllChains || isError || isErrorAllChains ? \"hidden\" : \"\"\n              }`}\n            >\n              <div className=\"chain-activity-chart-top-filters-legends-container\">\n                <span>Source: </span>\n\n                <div className=\"chain-activity-chart-top-filters-legends-container-total\">\n                  <span>\n                    {lastBtnSelected === \"24h\"\n                      ? \"Daily\"\n                      : lastBtnSelected === \"week\"\n                      ? \"Weekly\"\n                      : lastBtnSelected === \"month\"\n                      ? \"Monthly\"\n                      : lastBtnSelected === \"year\"\n                      ? \"Yearly\"\n                      : lastBtnSelected === \"custom\"\n                      ? \"\"\n                      : \"All Time\"}{\" \"}\n                    Total {metricSelected === \"transactions\" ? \"Transfers\" : \"Volume\"}:{\" \"}\n                  </span>\n                  <p>\n                    {metricSelected === \"transactions\"\n                      ? showAllSourceChains\n                        ? formatNumber(allMessagesNumber, 0)\n                        : formatNumber(messagesNumber, 0)\n                      : `${\n                          showAllSourceChains\n                            ? formatNumber(allVolumeNumber, 0)\n                            : formatNumber(volumeNumber, 0)\n                        }`}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"chain-activity-chart-top-filters-legends-target\">\n                <span>Target: </span>\n                <div className=\"chain-activity-chart-top-filters-legends-target-chains\">\n                  {filters?.targetChain?.length > 0\n                    ? filters.targetChain.map(chain => {\n                        return (\n                          <div key={chain}>\n                            {getChainName({\n                              network: currentNetwork,\n                              chainId: +chain as ChainId,\n                            })}\n                          </div>\n                        );\n                      })\n                    : \"All Chains\"}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"chain-activity-chart-top-filters-design\">\n            <ToggleGroup\n              ariaLabel=\"Select type\"\n              items={TYPE_CHART_LIST}\n              onValueChange={value => {\n                setChartSelected(value);\n\n                analytics.track(\"chainActivityChartType\", {\n                  network: currentNetwork,\n                  selected: value,\n                });\n              }}\n              type=\"secondary\"\n              value={chartSelected}\n            />\n\n            {isDesktop && chartSelected === \"area\" && !someZeroValue && (\n              <ToggleGroup\n                ariaLabel=\"Select scale\"\n                className={`chain-activity-chart-scale ${isMainnet ? \"\" : \"is-testnet\"}`}\n                items={SCALE_CHART_LIST}\n                onValueChange={value => setScaleSelected(value, true)}\n                type=\"secondary\"\n                value={scaleSelected}\n              />\n            )}\n          </div>\n        </div>\n\n        {isError || isErrorAllChains ? (\n          <ErrorPlaceholder errorType=\"chart\" />\n        ) : isFetching || isFetchingAllChains || isLoading ? (\n          <Loader />\n        ) : (\n          <>\n            <WormholeScanBrand />\n\n            <ReactApexChart\n              key={chartSelected}\n              series={\n                chartSelected === \"area\"\n                  ? series\n                  : series.map(serie => {\n                      return {\n                        name: serie.name,\n                        data: serie.data,\n                        color: serie.color,\n                      };\n                    })\n              }\n              type={chartSelected}\n              height={isDesktop ? 400 : 300}\n              options={{\n                chart: {\n                  events:\n                    chartSelected === \"bar\"\n                      ? {\n                          mouseLeave: () => {\n                            changePathOpacity({ ref: chartRef, opacity: 1 });\n                          },\n                          mouseMove(e, chart, options) {\n                            if (options.dataPointIndex < 0) {\n                              changePathOpacity({\n                                ref: chartRef,\n                                opacity: 1,\n                              });\n                            }\n                          },\n                        }\n                      : {},\n                  toolbar: { show: false },\n                  zoom: { enabled: false },\n                  stacked: chartSelected === \"bar\",\n                },\n                dataLabels: { enabled: false },\n                grid: {\n                  borderColor: \"var(--color-gray-900)\",\n                  strokeDashArray: 6,\n                  xaxis: {\n                    lines: { show: true },\n                  },\n                  yaxis: {\n                    lines: { show: false },\n                  },\n                  padding: {\n                    top: isDesktop ? 96 : 0,\n                  },\n                },\n                states: {\n                  hover: {\n                    filter: {\n                      type: \"none\",\n                    },\n                  },\n                  active: {\n                    filter: {\n                      type: \"none\",\n                    },\n                  },\n                },\n                stroke: {\n                  curve: \"smooth\",\n                  width: chartSelected === \"area\" ? 2 : 0,\n                  dashArray: 0,\n                },\n                fill: {\n                  type: chartSelected === \"area\" ? \"gradient\" : \"solid\",\n                  gradient: {\n                    type: \"vertical\",\n                    shadeIntensity: 0,\n                    opacityFrom: 0.4,\n                    opacityTo: 0,\n                    stops: [0, 100],\n                  },\n                },\n                legend: {\n                  show: isDesktop,\n                  fontFamily: \"Roboto\",\n                  fontSize: \"14px\",\n                  fontWeight: 400,\n                  floating: true,\n                  labels: {\n                    colors: \"var(--color-white)\",\n                  },\n                  markers: {\n                    width: 4,\n                    height: 12,\n                    radius: 3,\n                  },\n                  onItemClick: { toggleDataSeries: false },\n                  position: \"top\",\n                  offsetY: 32,\n                  offsetX: 40,\n                  horizontalAlign: \"left\",\n                  showForSingleSeries: true,\n                  itemMargin: {\n                    horizontal: 0,\n                  },\n                },\n                xaxis: {\n                  axisBorder: { show: true, strokeWidth: 4, color: \"var(--color-gray-10)\" },\n                  axisTicks: { show: false },\n                  crosshairs: {\n                    position: \"front\",\n                  },\n                  tickAmount,\n                  labels: {\n                    formatter: (value: string) =>\n                      formatXaxisLabels(value, new Date(filters.from), new Date(filters.to)),\n                    hideOverlappingLabels: true,\n                    offsetX: 0,\n                    rotate: 0,\n                    style: {\n                      colors: \"var(--color-gray-400)\",\n                      fontFamily: \"Roboto Mono, Roboto, sans-serif\",\n                      fontSize: \"12px\",\n                      fontWeight: 400,\n                    },\n                    trim: false,\n                  },\n                  tooltip: { enabled: false },\n                },\n                yaxis: {\n                  labels: {\n                    offsetX: -8,\n                    formatter: formatterYAxis,\n                    style: {\n                      colors: \"var(--color-gray-400)\",\n                      fontFamily: \"Roboto Mono, Roboto, sans-serif\",\n                      fontSize: \"12px\",\n                      fontWeight: 400,\n                    },\n                  },\n                  opposite: true,\n                  logarithmic: scaleSelected === \"logarithmic\" && chartSelected === \"area\",\n                  forceNiceScale: scaleSelected === \"logarithmic\" && chartSelected === \"area\",\n                },\n                tooltip: {\n                  custom: ({ series, seriesIndex, dataPointIndex, w }) => {\n                    const data = w.config.series[seriesIndex].data[dataPointIndex];\n\n                    const allDataForDate = w.config.series\n                      .map((serie: any) => serie.data[dataPointIndex])\n                      .sort((a: any, b: any) => b.y - a.y);\n\n                    const totalY = allChainsSerie[0].data[dataPointIndex]?.y || 0;\n\n                    if (chartSelected === \"bar\") {\n                      updatePathStyles({ chartRef, dataPointIndex });\n                    }\n\n                    return `<div class=\"chain-activity-chart-tooltip\">\n                      <div class=\"chain-activity-chart-tooltip-date\">\n                        <p>\n                          From:\n                          ${new Date(data.x).toLocaleString(\"en-GB\", {\n                            hour: \"2-digit\",\n                            minute: \"2-digit\",\n                          })},\n                          ${new Date(data.x).toLocaleString(\"en-GB\", {\n                            day: \"2-digit\",\n                            month: \"long\",\n                            year: \"numeric\",\n                          })}\n                        </p>\n                        <p>\n                          To:\n                          ${new Date(data.to).toLocaleString(\"en-GB\", {\n                            hour: \"2-digit\",\n                            minute: \"2-digit\",\n                          })},\n                          ${new Date(data.to).toLocaleString(\"en-GB\", {\n                            day: \"2-digit\",\n                            month: \"long\",\n                            year: \"numeric\",\n                          })}\n                        </p>\n                      </div>\n                      <div class=\"chain-activity-chart-tooltip-total-msg\">\n                        ${\n                          showAllSourceChains\n                            ? \"<div class='chain-activity-chart-tooltip-container-each-msg-icon' style='background-color: var(--color-lime)'></div>\"\n                            : \"\"\n                        }\n                    \n                        ${\n                          metricSelected === \"transactions\"\n                            ? `Transfers Sum: <span>${formatNumber(totalY, 0)}</span>`\n                            : `Volume Sum: <span>$${\n                                isDesktop ? formatNumber(totalY, 0) : numberToSuffix(totalY)\n                              }</span>`\n                        }\n                      </div>\n                      <p class=\"chain-activity-chart-tooltip-chains\">Chains:</p>\n                      <div class=\"chain-activity-chart-tooltip-container\">\n                        ${allDataForDate\n                          .map((item: any) => {\n                            return `\n                                ${\n                                  item?.emitter_chain === \"allChains\"\n                                    ? ``\n                                    : `\n                                      <div class=\"chain-activity-chart-tooltip-container-each-msg\">\n                                        <div class=\"chain-activity-chart-tooltip-container-each-msg-icon\" style=\"background-color: ${\n                                          item?.color\n                                        }\">\n                                        </div>\n                                        <div class=\"chain-activity-chart-tooltip-container-each-msg-name\">\n                                          ${getChainName({\n                                            network: currentNetwork,\n                                            chainId: item?.emitter_chain,\n                                            acronym: +item?.emitter_chain === chainToChainId(\"Bsc\"),\n                                          })}:\n                                        </div>\n                                        <div class=\"chain-activity-chart-tooltip-container-each-msg-number\">\n                                          ${\n                                            metricSelected === \"transactions\"\n                                              ? formatNumber(item?.y)\n                                              : `$${numberToSuffix(item?.volume)}`\n                                          }\n                                        </div>\n                                      </div>\n                                      `\n                                }\n\n                          ${\n                            item?.details?.length > 0 &&\n                            filters.sourceChain.every(chain => chain === \"All Chains\")\n                              ? `\n                                  ${item?.details\n                                    .map((detail: any, i: number) => {\n                                      if (i > 10) return;\n\n                                      if (i > 9) {\n                                        return `\n                                          <div class=\"chain-activity-chart-tooltip-container-each-msg\">\n                                            <div class=\"chain-activity-chart-tooltip-container-each-msg-icon\" style=\"background-color: ${\n                                              grayColors[i]\n                                            }\">\n                                            </div>\n                                            <div class=\"chain-activity-chart-tooltip-container-each-msg-name\">\n                                              Others:\n                                            </div>\n                                            <div class=\"chain-activity-chart-tooltip-container-each-msg-number\">\n                                              ${\n                                                metricSelected === \"transactions\"\n                                                  ? formatNumber(\n                                                      item?.details\n                                                        .slice(i)\n                                                        .reduce(\n                                                          (acc: number, item: any) =>\n                                                            acc + item?.count,\n                                                          0,\n                                                        ),\n                                                    )\n                                                  : `$${numberToSuffix(\n                                                      item?.details\n                                                        .slice(i)\n                                                        .reduce(\n                                                          (acc: number, item: any) =>\n                                                            acc + item?.volume,\n                                                          0,\n                                                        ),\n                                                    )}`\n                                              }\n                                            </div>\n                                          </div>\n                                          `;\n                                      }\n\n                                      return `\n                                        <div class=\"chain-activity-chart-tooltip-container-each-msg\">\n                                      <div class=\"chain-activity-chart-tooltip-container-each-msg-icon\" style=\"background-color: ${\n                                        grayColors[i]\n                                      }\">\n                                      </div>\n                                      <div class=\"chain-activity-chart-tooltip-container-each-msg-name\">\n                                        ${getChainName({\n                                          acronym: +detail.emitter_chain === chainToChainId(\"Bsc\"),\n                                          network: currentNetwork,\n                                          chainId: detail.emitter_chain,\n                                        })}:\n                                      </div>\n                                      <div class=\"chain-activity-chart-tooltip-container-each-msg-number\">\n                                        ${\n                                          metricSelected === \"transactions\"\n                                            ? formatNumber(detail.count)\n                                            : `$${numberToSuffix(detail.volume)}`\n                                        }\n                                      </div>\n                                      </div>\n                                      `;\n                                    })\n                                    .join(\"\")}\n                                   `\n                              : \"\"\n                          }\n                             `;\n                          })\n                          .join(\"\")}\n                      </div>\n                    </div>`;\n                  },\n                  intersect: false,\n                  shared: true,\n                },\n              }}\n            />\n          </>\n        )}\n      </div>\n    </Fullscreenable>\n  );\n};\n\nexport default ChainActivity;\n","import { useNavigateCustom } from \"src/utils/hooks\";\nimport Error400 from \"./Error400\";\nimport Error500 from \"./Error500\";\nimport Error502 from \"./Error502\";\nimport Error503 from \"./Error503\";\nimport \"./styles.scss\";\n\ntype SearchNotFoundProps = {\n  q: string;\n  errorCode: number;\n};\n\nconst SearchNotFound = ({ q, errorCode }: SearchNotFoundProps) => {\n  const navigate = useNavigateCustom();\n\n  const goHome = () => {\n    navigate(\"/\");\n  };\n\n  return (\n    <div>\n      {errorCode !== 500 && errorCode !== 502 && errorCode !== 503 && (\n        <Error400 q={q} goHome={goHome} />\n      )}\n      {errorCode === 500 && <Error500 goHome={goHome} />}\n      {errorCode === 502 && <Error502 goHome={goHome} />}\n      {errorCode === 503 && <Error503 goHome={goHome} />}\n    </div>\n  );\n};\n\nexport default SearchNotFound;\n","import { useEffect } from \"react\";\nimport analytics from \"src/analytics\";\nimport SearchNotFoundImage from \"src/assets/search-not-found.svg\";\nimport { DISCORD_URL } from \"src/consts\";\n\ntype Props = {\n  q: string;\n  goHome: () => void;\n};\n\nconst Error400 = ({ q, goHome }: Props) => {\n  useEffect(() => {\n    analytics.page({ title: \"SEARCH_NOT_FOUND\" });\n  }, []);\n\n  return (\n    <div className=\"error-page\">\n      <div className=\"error-page-container\">\n        <h2 className=\"error-page-container-title-400\">Search not found</h2>\n        <div className=\"error-page-container-image\">\n          <img\n            className=\"error-page-container-image-400\"\n            src={SearchNotFoundImage}\n            alt=\"Error 400\"\n            loading=\"lazy\"\n          />\n        </div>\n        <div className=\"error-page-container-body\">\n          <p className=\"error-page-container-body-description error-page-container-body-description-400\">\n            Sorry! We traversed all space-time for you, however, this is likely an invalid search\n            string because we can&apos;t find any items that match:{\" \"}\n            <span>\n              <strong>{q || \"empty string\"}</strong>\n            </span>\n          </p>\n          <p className=\"error-page-container-body-description error-page-container-body-description-400\">\n            If you think this is a problem with us,\n            <span>\n              <a className=\"info-link\" href={DISCORD_URL} target=\"_blank\" rel=\"noopener noreferrer\">\n                please tell us.\n              </a>\n            </span>\n          </p>\n          <button className=\"error-page-container-body-button\" onClick={goHome}>\n            Back to Home\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Error400;\n","module.exports = require('./helpers/bundle-url').getBundleURL('9Uv1n') + \"search-not-found.1dfcf840.svg\";","\"use strict\";\n\nvar bundleURL = {};\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n  return value;\n}\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n  return '/';\n}\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\n// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n  return matches[0];\n}\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","import { useEffect } from \"react\";\nimport analytics from \"src/analytics\";\nimport AstronautImage from \"src/assets/astronaut.svg\";\nimport Error500Image from \"src/assets/error500.svg\";\n\ntype Props = {\n  goHome: () => void;\n};\n\nconst Error500 = ({ goHome }: Props) => {\n  useEffect(() => {\n    analytics.page({ title: \"ERROR_500\" });\n  }, []);\n\n  return (\n    <div className=\"error-page error-page-bg-500\">\n      <div className=\"error-page-container\">\n        <h2 className=\"error-page-container-title\">\n          Houston, <span>we have a problem!</span>\n        </h2>\n        <div className=\"error-page-container-image\">\n          <img\n            className=\"error-page-container-image-500\"\n            src={Error500Image}\n            alt=\"Error 500\"\n            loading=\"lazy\"\n          />\n          <img\n            className=\"error-page-container-image-astronaut\"\n            src={AstronautImage}\n            alt=\"\"\n            loading=\"lazy\"\n          />\n        </div>\n        <div className=\"error-page-container-body\">\n          <p className=\"error-page-container-body-description error-page-container-body-description-500\">\n            While traversing time and space we&apos;ve encountered an issue, we&apos;ll overcome it\n            shortly.\n          </p>\n          <p className=\"error-page-container-body-code\">Error code: 500</p>\n          <button className=\"error-page-container-body-button\" onClick={goHome}>\n            Back to Home\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Error500;\n","module.exports = require('./helpers/bundle-url').getBundleURL('9Uv1n') + \"astronaut.e7ebb1a3.svg\";","module.exports = require('./helpers/bundle-url').getBundleURL('9Uv1n') + \"error500.7d253a89.svg\";","import { useEffect } from \"react\";\nimport analytics from \"src/analytics\";\nimport Error502Image from \"src/assets/error502.svg\";\n\ntype Props = {\n  goHome: () => void;\n};\n\nconst Error502 = ({ goHome }: Props) => {\n  useEffect(() => {\n    analytics.page({ title: \"ERROR_502\" });\n  }, []);\n\n  return (\n    <div className=\"error-page\">\n      <div className=\"error-page-container\">\n        <h2 className=\"error-page-container-title\">Bad pathway!</h2>\n        <div className=\"error-page-container-image\">\n          <h3 className=\"error-page-container-image-text\">\n            Error code\n            <span>502</span>\n          </h3>\n          <img\n            className=\"error-page-container-image-502\"\n            src={Error502Image}\n            alt=\"Error 502\"\n            loading=\"lazy\"\n          />\n        </div>\n        <div className=\"error-page-container-body\">\n          <p className=\"error-page-container-body-description\">\n            We couldn&apos;t reach the other side, <span>invalid response.</span>\n          </p>\n          <button className=\"error-page-container-body-button\" onClick={goHome}>\n            Back to Home\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Error502;\n","module.exports = require('./helpers/bundle-url').getBundleURL('9Uv1n') + \"error502.ef641a85.svg\";","import { useEffect } from \"react\";\nimport analytics from \"src/analytics\";\nimport Error503Image from \"src/assets/error503.svg\";\nimport { DISCORD_URL } from \"src/consts\";\n\ntype Props = {\n  goHome: () => void;\n};\n\nconst Error503 = ({ goHome }: Props) => {\n  useEffect(() => {\n    analytics.page({ title: \"ERROR_503\" });\n  }, []);\n\n  return (\n    <div className=\"error-page error-page-bg-503\">\n      <div className=\"error-page-container\">\n        <h2 className=\"error-page-container-title\">Systems down!</h2>\n        <div className=\"error-page-container-image\">\n          <h3 className=\"error-page-container-image-text\">\n            Error code\n            <span>503</span>\n          </h3>\n          <img\n            className=\"error-page-container-image-500\"\n            src={Error503Image}\n            alt=\"Error 503\"\n            loading=\"lazy\"\n          />\n        </div>\n        <div className=\"error-page-container-body\">\n          <p className=\"error-page-container-body-description\">\n            The universe may be infinite but our capabilities aren&apos;t, unfortunately.\n            <span>\n              We are currently experiencing service <span>unavailability.</span>\n            </span>\n          </p>\n          <p className=\"error-page-container-body-description\">\n            If the problem persists, please reach\n            <span>\n              out to us on{\" \"}\n              <a href={DISCORD_URL} target=\"_blank\" rel=\"noopener noreferrer\">\n                discord.\n              </a>\n            </span>\n          </p>\n          <button className=\"error-page-container-body-button\" onClick={goHome}>\n            Back to Home\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Error503;\n","module.exports = require('./helpers/bundle-url').getBundleURL('9Uv1n') + \"error503.c3c1d880.svg\";","import { CSSProperties, Fragment, useEffect, useState } from \"react\";\nimport {\n  useTable,\n  Column,\n  useSortBy,\n  TableState,\n  UseTableOptions,\n  UseSortByOptions,\n  TableInstance,\n} from \"react-table\";\nimport { CrossIcon, FilterListIcon, SortByIcon } from \"src/icons/generic\";\nimport analytics from \"src/analytics\";\nimport { useEnvironment } from \"src/context/EnvironmentContext\";\nimport { Select } from \"src/components/atoms\";\nimport { useLockBodyScroll, useWindowSize } from \"src/utils/hooks\";\nimport { BREAKPOINTS } from \"src/consts\";\nimport \"./styles.scss\";\n\ntype Props<T extends object> = {\n  className?: string;\n  columns: Column<T>[];\n  data: T[];\n  defaultSortBy?: { id: string; desc: boolean };\n  emptyMessage?: string | JSX.Element;\n  isLoading?: boolean;\n  numberOfColumns?: number;\n  numberOfRows?: number;\n  onRowClick?: (row: any) => void;\n  trackTxsSortBy?: boolean;\n};\n\ntype ExtendedTableInstance<T extends object> = TableInstance<T> & {\n  setSortBy?: (updater: any) => void;\n};\n\nconst Table = <T extends object>({\n  className,\n  columns,\n  data,\n  defaultSortBy,\n  emptyMessage = \"No items found.\",\n  isLoading = false,\n  numberOfColumns = 7,\n  numberOfRows = 50,\n  onRowClick,\n  trackTxsSortBy = false,\n}: Props<T>) => {\n  const { environment } = useEnvironment();\n  const [openSortBy, setOpenSortBy] = useState(false);\n  const [currentSortBy, setCurrentSortBy] = useState(defaultSortBy);\n  const { width } = useWindowSize();\n  const isDesktop = width >= BREAKPOINTS.desktop;\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setSortBy,\n  }: ExtendedTableInstance<T> = useTable(\n    {\n      columns,\n      data,\n      initialState: { sortBy: defaultSortBy ? [defaultSortBy] : [] } as Partial<TableState<T>>,\n      disableSortRemove: true,\n    } as UseTableOptions<T> & UseSortByOptions<T>,\n    useSortBy,\n  );\n\n  useEffect(() => {\n    const sortedColumn = headerGroups.flatMap(group =>\n      // @ts-expect-error Property 'isSorted' exists at runtime but TypeScript doesn't know about it\n      group.headers.filter(col => col.isSorted),\n    )[0];\n\n    if (sortedColumn) {\n      setCurrentSortBy({\n        id: sortedColumn.id,\n        // @ts-expect-error Property 'isSortedDesc' exists at runtime but TypeScript doesn't know about it\n        desc: sortedColumn.isSortedDesc || false,\n      });\n    }\n  }, [headerGroups]);\n\n  const handleReset = () => {\n    setSortBy([defaultSortBy]);\n    setCurrentSortBy(defaultSortBy);\n    setOpenSortBy(false);\n  };\n\n  useLockBodyScroll({ isLocked: !isDesktop && openSortBy });\n\n  return (\n    <>\n      {defaultSortBy && (\n        <>\n          <div\n            className={`table-mobile-filters-overlay ${openSortBy ? \"open\" : \"\"}`}\n            onClick={() => setOpenSortBy(false)}\n          />\n\n          <button\n            aria-expanded={openSortBy}\n            aria-label=\"Sort by\"\n            className=\"table-sort-by-btn\"\n            onClick={() => setOpenSortBy(!openSortBy)}\n          >\n            <FilterListIcon width={24} />\n          </button>\n\n          <div className={`table-mobile-filters ${openSortBy ? \"open\" : \"\"}`}>\n            <div className=\"table-mobile-filters-top\">\n              <h4>Sort by</h4>\n              <button\n                className=\"table-mobile-filters-top-btn\"\n                onClick={() => setOpenSortBy(false)}\n                aria-label=\"Close sort options\"\n              >\n                <CrossIcon width={24} />\n              </button>\n            </div>\n\n            {headerGroups.map((headerGroup, index) => {\n              return (\n                <Fragment key={index}>\n                  <Select\n                    ariaLabel=\"Sort column\"\n                    className=\"table-mobile-filters-select\"\n                    items={headerGroup.headers\n                      .filter(\n                        (column: any) => column.render(\"Header\").toString() !== \"View Details\",\n                      )\n                      .map((column: any) => ({\n                        value: column.id,\n                        label: column.render(\"Header\").toString(),\n                      }))}\n                    menuFixed\n                    menuListStyles={{ maxHeight: \"unset\" }}\n                    name=\"Sort column\"\n                    onValueChange={selected => {\n                      const selectedColumn = headerGroup.headers.find(\n                        (col: any) => col.id === selected.value,\n                      );\n\n                      if (selectedColumn) {\n                        setCurrentSortBy(prev => ({\n                          id: selected.value,\n                          desc: prev.desc,\n                        }));\n                        // @ts-expect-error Property 'toggleSortBy' exists at runtime but TypeScript doesn't know about it\n                        selectedColumn.toggleSortBy(currentSortBy.desc);\n                      }\n                    }}\n                    optionStyles={{ padding: 16 }}\n                    value={{\n                      value: currentSortBy.id,\n                      label:\n                        headerGroup.headers\n                          .find((column: any) => column.id === currentSortBy.id)\n                          ?.render(\"Header\") || \"Sort\",\n                    }}\n                  />\n\n                  <Select\n                    ariaLabel=\"Sort order\"\n                    className=\"table-mobile-filters-select\"\n                    items={[\n                      { value: false, label: \"Low to High\" },\n                      { value: true, label: \"High to Low\" },\n                    ]}\n                    menuFixed\n                    menuListStyles={{ maxHeight: \"unset\" }}\n                    name=\"Sort order\"\n                    onValueChange={selected => {\n                      setCurrentSortBy(prev => ({ ...prev, desc: selected.value }));\n\n                      const column = headerGroup.headers.find(\n                        (col: any) => col.id === currentSortBy.id,\n                      );\n                      if (column) {\n                        // @ts-expect-error Property 'toggleSortBy' exists at runtime but TypeScript doesn't know about it\n                        column.toggleSortBy(selected.value);\n                      }\n                    }}\n                    optionStyles={{ padding: 16 }}\n                    value={{\n                      value: currentSortBy.desc,\n                      label: currentSortBy.desc ? \"High to Low\" : \"Low to High\",\n                    }}\n                  />\n                </Fragment>\n              );\n            })}\n\n            <div className=\"table-mobile-filters-btns\">\n              <button\n                className=\"table-mobile-filters-btns-apply\"\n                onClick={() => setOpenSortBy(false)}\n              >\n                Apply\n              </button>\n              <button className=\"table-mobile-filters-btns-reset\" onClick={handleReset}>\n                Reset\n              </button>\n            </div>\n          </div>\n        </>\n      )}\n\n      <table\n        {...getTableProps()}\n        className={`table ${defaultSortBy ? \"table-sortable\" : \"\"} ${\n          onRowClick ? \"table-clickable\" : \"\"\n        } ${className}`}\n      >\n        <thead className=\"table-head\">\n          {headerGroups.map((headerGroup, index) => (\n            <tr\n              key={index}\n              {...headerGroup.getHeaderGroupProps()}\n              onClick={() => {\n                if (trackTxsSortBy) {\n                  setTimeout(() => {\n                    const sortedColumn = headerGroup.headers.find((header: any) => header.isSorted);\n                    analytics.track(\"txsSortBy\", {\n                      network: environment.network,\n                      selected: sortedColumn?.id,\n                      // @ts-expect-error Property 'isSortedDesc' exists at runtime but TypeScript doesn't know about it\n                      selectedType: sortedColumn?.isSortedDesc ? \"desc\" : \"asc\",\n                    });\n                  }, 0);\n                }\n              }}\n            >\n              {headerGroup.headers.map((column: any, index) => {\n                const style: CSSProperties = column.style as CSSProperties;\n                const sortIcon = defaultSortBy && (\n                  <span className=\"table-head-th-container-arrow\">\n                    <SortByIcon\n                      sortBy={column.isSorted ? (column.isSortedDesc ? \"DSC\" : \"ASC\") : null}\n                    />\n                  </span>\n                );\n\n                return (\n                  <th\n                    key={index}\n                    {...column.getHeaderProps(defaultSortBy ? column.getSortByToggleProps() : {})}\n                    style={{\n                      ...style,\n                      color: column.isSorted ? \"var(--color-white)\" : \"var(--color-gray-400)\",\n                    }}\n                  >\n                    <div className=\"table-head-th-container\">\n                      {column.render(\"Header\")} {column?.Tooltip && column.Tooltip}\n                      {sortIcon}\n                    </div>\n                  </th>\n                );\n              })}\n            </tr>\n          ))}\n        </thead>\n        {isLoading ? (\n          <tbody>\n            {[...Array(numberOfRows)].map((_, index) => (\n              <tr key={index}>\n                <td className=\"table-row-loading\" colSpan={numberOfColumns}>\n                  <span className=\"loading-animation\"></span>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        ) : (\n          rows?.length > 0 && (\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row, index) => {\n                prepareRow(row);\n                const justAppeared = (row?.original as any)?.justAppeared;\n                const txHash = (row?.original as any)?.txHashId;\n\n                if (justAppeared) {\n                  setTimeout(() => {\n                    (row.original as any).justAppeared = false;\n                  });\n                }\n\n                return (\n                  <tr\n                    key={index + txHash}\n                    className={justAppeared ? \"appear\" : \"\"}\n                    {...row.getRowProps()}\n                    onClick={() => onRowClick && onRowClick(row.original)}\n                  >\n                    {row.cells.map((cell, index) => {\n                      const style: CSSProperties = (cell.column as any).style;\n                      return (\n                        <td key={index} {...cell.getCellProps()} style={{ ...style }}>\n                          {cell.render(\"Cell\")}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          )\n        )}\n      </table>\n      {!isLoading && rows?.length <= 0 && <div className=\"table-body-empty\">{emptyMessage}</div>}\n    </>\n  );\n};\n\nexport default Table;\n","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/react-table.production.min.js')\n} else {\n  module.exports = require('./dist/react-table.development.js')\n}\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :\n  (global = global || self, factory(global.ReactTable = {}, global.React));\n}(this, (function (exports, React) { 'use strict';\n\n  React = React && Object.prototype.hasOwnProperty.call(React, 'default') ? React['default'] : React;\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n      var info = gen[key](arg);\n      var value = info.value;\n    } catch (error) {\n      reject(error);\n      return;\n    }\n\n    if (info.done) {\n      resolve(value);\n    } else {\n      Promise.resolve(value).then(_next, _throw);\n    }\n  }\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var self = this,\n          args = arguments;\n      return new Promise(function (resolve, reject) {\n        var gen = fn.apply(self, args);\n\n        function _next(value) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n        }\n\n        function _throw(err) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n        }\n\n        _next(undefined);\n      });\n    };\n  }\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n\n    if (prim !== undefined) {\n      var res = prim.call(input, hint || \"default\");\n      if (typeof res !== \"object\") return res;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n\n    return (hint === \"string\" ? String : Number)(input);\n  }\n\n  function _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n\n    return typeof key === \"symbol\" ? key : String(key);\n  }\n\n  var renderErr = 'Renderer Error ☝️';\n  var actions = {\n    init: 'init'\n  };\n  var defaultRenderer = function defaultRenderer(_ref) {\n    var _ref$value = _ref.value,\n        value = _ref$value === void 0 ? '' : _ref$value;\n    return value;\n  };\n  var emptyRenderer = function emptyRenderer() {\n    return React.createElement(React.Fragment, null, \"\\xA0\");\n  };\n  var defaultColumn = {\n    Cell: defaultRenderer,\n    width: 150,\n    minWidth: 0,\n    maxWidth: Number.MAX_SAFE_INTEGER\n  };\n\n  function mergeProps() {\n    for (var _len = arguments.length, propList = new Array(_len), _key = 0; _key < _len; _key++) {\n      propList[_key] = arguments[_key];\n    }\n\n    return propList.reduce(function (props, next) {\n      var style = next.style,\n          className = next.className,\n          rest = _objectWithoutPropertiesLoose(next, [\"style\", \"className\"]);\n\n      props = _extends({}, props, {}, rest);\n\n      if (style) {\n        props.style = props.style ? _extends({}, props.style || {}, {}, style || {}) : style;\n      }\n\n      if (className) {\n        props.className = props.className ? props.className + ' ' + className : className;\n      }\n\n      if (props.className === '') {\n        delete props.className;\n      }\n\n      return props;\n    }, {});\n  }\n\n  function handlePropGetter(prevProps, userProps, meta) {\n    // Handle a lambda, pass it the previous props\n    if (typeof userProps === 'function') {\n      return handlePropGetter({}, userProps(prevProps, meta));\n    } // Handle an array, merge each item as separate props\n\n\n    if (Array.isArray(userProps)) {\n      return mergeProps.apply(void 0, [prevProps].concat(userProps));\n    } // Handle an object by default, merge the two objects\n\n\n    return mergeProps(prevProps, userProps);\n  }\n\n  var makePropGetter = function makePropGetter(hooks, meta) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    return function (userProps) {\n      if (userProps === void 0) {\n        userProps = {};\n      }\n\n      return [].concat(hooks, [userProps]).reduce(function (prev, next) {\n        return handlePropGetter(prev, next, _extends({}, meta, {\n          userProps: userProps\n        }));\n      }, {});\n    };\n  };\n  var reduceHooks = function reduceHooks(hooks, initial, meta, allowUndefined) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    return hooks.reduce(function (prev, next) {\n      var nextValue = next(prev, meta);\n\n      {\n        if (!allowUndefined && typeof nextValue === 'undefined') {\n          console.info(next);\n          throw new Error('React Table: A reducer hook ☝️ just returned undefined! This is not allowed.');\n        }\n      }\n\n      return nextValue;\n    }, initial);\n  };\n  var loopHooks = function loopHooks(hooks, context, meta) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    return hooks.forEach(function (hook) {\n      var nextValue = hook(context, meta);\n\n      {\n        if (typeof nextValue !== 'undefined') {\n          console.info(hook, nextValue);\n          throw new Error('React Table: A loop-type hook ☝️ just returned a value! This is not allowed.');\n        }\n      }\n    });\n  };\n  function ensurePluginOrder(plugins, befores, pluginName, afters) {\n    if ( afters) {\n      throw new Error(\"Defining plugins in the \\\"after\\\" section of ensurePluginOrder is no longer supported (see plugin \" + pluginName + \")\");\n    }\n\n    var pluginIndex = plugins.findIndex(function (plugin) {\n      return plugin.pluginName === pluginName;\n    });\n\n    if (pluginIndex === -1) {\n      {\n        throw new Error(\"The plugin \\\"\" + pluginName + \"\\\" was not found in the plugin list!\\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\\n\\n  \" + pluginName + \".pluginName = '\" + pluginName + \"'\\n\");\n      }\n    }\n\n    befores.forEach(function (before) {\n      var beforeIndex = plugins.findIndex(function (plugin) {\n        return plugin.pluginName === before;\n      });\n\n      if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n        {\n          throw new Error(\"React Table: The \" + pluginName + \" plugin hook must be placed after the \" + before + \" plugin hook!\");\n        }\n      }\n    });\n  }\n  function functionalUpdate(updater, old) {\n    return typeof updater === 'function' ? updater(old) : updater;\n  }\n  function useGetLatest(obj) {\n    var ref = React.useRef();\n    ref.current = obj;\n    return React.useCallback(function () {\n      return ref.current;\n    }, []);\n  } // SSR has issues with useLayoutEffect still, so use useEffect during SSR\n\n  var safeUseLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n  function useMountedLayoutEffect(fn, deps) {\n    var mountedRef = React.useRef(false);\n    safeUseLayoutEffect(function () {\n      if (mountedRef.current) {\n        fn();\n      }\n\n      mountedRef.current = true; // eslint-disable-next-line\n    }, deps);\n  }\n  function useAsyncDebounce(defaultFn, defaultWait) {\n    if (defaultWait === void 0) {\n      defaultWait = 0;\n    }\n\n    var debounceRef = React.useRef({});\n    var getDefaultFn = useGetLatest(defaultFn);\n    var getDefaultWait = useGetLatest(defaultWait);\n    return React.useCallback(\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _len2,\n            args,\n            _key2,\n            _args2 = arguments;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                  args[_key2] = _args2[_key2];\n                }\n\n                if (!debounceRef.current.promise) {\n                  debounceRef.current.promise = new Promise(function (resolve, reject) {\n                    debounceRef.current.resolve = resolve;\n                    debounceRef.current.reject = reject;\n                  });\n                }\n\n                if (debounceRef.current.timeout) {\n                  clearTimeout(debounceRef.current.timeout);\n                }\n\n                debounceRef.current.timeout = setTimeout(\n                /*#__PURE__*/\n                _asyncToGenerator(\n                /*#__PURE__*/\n                regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          delete debounceRef.current.timeout;\n                          _context.prev = 1;\n                          _context.t0 = debounceRef.current;\n                          _context.next = 5;\n                          return getDefaultFn().apply(void 0, args);\n\n                        case 5:\n                          _context.t1 = _context.sent;\n\n                          _context.t0.resolve.call(_context.t0, _context.t1);\n\n                          _context.next = 12;\n                          break;\n\n                        case 9:\n                          _context.prev = 9;\n                          _context.t2 = _context[\"catch\"](1);\n                          debounceRef.current.reject(_context.t2);\n\n                        case 12:\n                          _context.prev = 12;\n                          delete debounceRef.current.promise;\n                          return _context.finish(12);\n\n                        case 15:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[1, 9, 12, 15]]);\n                })), getDefaultWait());\n                return _context2.abrupt(\"return\", debounceRef.current.promise);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function () {\n        return _ref2.apply(this, arguments);\n      };\n    }(), [getDefaultFn, getDefaultWait]);\n  }\n  function makeRenderer(instance, column, meta) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    return function (type, userProps) {\n      if (userProps === void 0) {\n        userProps = {};\n      }\n\n      var Comp = typeof type === 'string' ? column[type] : type;\n\n      if (typeof Comp === 'undefined') {\n        console.info(column);\n        throw new Error(renderErr);\n      }\n\n      return flexRender(Comp, _extends({}, instance, {\n        column: column\n      }, meta, {}, userProps));\n    };\n  }\n  function flexRender(Comp, props) {\n    return isReactComponent(Comp) ? React.createElement(Comp, props) : Comp;\n  }\n\n  function isReactComponent(component) {\n    return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);\n  }\n\n  function isClassComponent(component) {\n    return typeof component === 'function' && function () {\n      var proto = Object.getPrototypeOf(component);\n      return proto.prototype && proto.prototype.isReactComponent;\n    }();\n  }\n\n  function isExoticComponent(component) {\n    return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\n  }\n\n  function linkColumnStructure(columns, parent, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n\n    return columns.map(function (column) {\n      column = _extends({}, column, {\n        parent: parent,\n        depth: depth\n      });\n      assignColumnAccessor(column);\n\n      if (column.columns) {\n        column.columns = linkColumnStructure(column.columns, column, depth + 1);\n      }\n\n      return column;\n    });\n  }\n  function flattenColumns(columns) {\n    return flattenBy(columns, 'columns');\n  }\n  function assignColumnAccessor(column) {\n    // First check for string accessor\n    var id = column.id,\n        accessor = column.accessor,\n        Header = column.Header;\n\n    if (typeof accessor === 'string') {\n      id = id || accessor;\n      var accessorPath = accessor.split('.');\n\n      accessor = function accessor(row) {\n        return getBy(row, accessorPath);\n      };\n    }\n\n    if (!id && typeof Header === 'string' && Header) {\n      id = Header;\n    }\n\n    if (!id && column.columns) {\n      console.error(column);\n      throw new Error('A column ID (or unique \"Header\" value) is required!');\n    }\n\n    if (!id) {\n      console.error(column);\n      throw new Error('A column ID (or string accessor) is required!');\n    }\n\n    Object.assign(column, {\n      id: id,\n      accessor: accessor\n    });\n    return column;\n  }\n  function decorateColumn(column, userDefaultColumn) {\n    if (!userDefaultColumn) {\n      throw new Error();\n    }\n\n    Object.assign(column, _extends({\n      // Make sure there is a fallback header, just in case\n      Header: emptyRenderer,\n      Footer: emptyRenderer\n    }, defaultColumn, {}, userDefaultColumn, {}, column));\n    Object.assign(column, {\n      originalWidth: column.width\n    });\n    return column;\n  } // Build the header groups from the bottom up\n\n  function makeHeaderGroups(allColumns, defaultColumn, additionalHeaderProperties) {\n    if (additionalHeaderProperties === void 0) {\n      additionalHeaderProperties = function additionalHeaderProperties() {\n        return {};\n      };\n    }\n\n    var headerGroups = [];\n    var scanColumns = allColumns;\n    var uid = 0;\n\n    var getUID = function getUID() {\n      return uid++;\n    };\n\n    var _loop = function _loop() {\n      // The header group we are creating\n      var headerGroup = {\n        headers: []\n      }; // The parent columns we're going to scan next\n\n      var parentColumns = [];\n      var hasParents = scanColumns.some(function (d) {\n        return d.parent;\n      }); // Scan each column for parents\n\n      scanColumns.forEach(function (column) {\n        // What is the latest (last) parent column?\n        var latestParentColumn = [].concat(parentColumns).reverse()[0];\n        var newParent;\n\n        if (hasParents) {\n          // If the column has a parent, add it if necessary\n          if (column.parent) {\n            newParent = _extends({}, column.parent, {\n              originalId: column.parent.id,\n              id: column.parent.id + \"_\" + getUID(),\n              headers: [column]\n            }, additionalHeaderProperties(column));\n          } else {\n            // If other columns have parents, we'll need to add a place holder if necessary\n            var originalId = column.id + \"_placeholder\";\n            newParent = decorateColumn(_extends({\n              originalId: originalId,\n              id: column.id + \"_placeholder_\" + getUID(),\n              placeholderOf: column,\n              headers: [column]\n            }, additionalHeaderProperties(column)), defaultColumn);\n          } // If the resulting parent columns are the same, just add\n          // the column and increment the header span\n\n\n          if (latestParentColumn && latestParentColumn.originalId === newParent.originalId) {\n            latestParentColumn.headers.push(column);\n          } else {\n            parentColumns.push(newParent);\n          }\n        }\n\n        headerGroup.headers.push(column);\n      });\n      headerGroups.push(headerGroup); // Start scanning the parent columns\n\n      scanColumns = parentColumns;\n    };\n\n    while (scanColumns.length) {\n      _loop();\n    }\n\n    return headerGroups.reverse();\n  }\n  var pathObjCache = new Map();\n  function getBy(obj, path, def) {\n    if (!path) {\n      return obj;\n    }\n\n    var cacheKey = typeof path === 'function' ? path : JSON.stringify(path);\n\n    var pathObj = pathObjCache.get(cacheKey) || function () {\n      var pathObj = makePathArray(path);\n      pathObjCache.set(cacheKey, pathObj);\n      return pathObj;\n    }();\n\n    var val;\n\n    try {\n      val = pathObj.reduce(function (cursor, pathPart) {\n        return cursor[pathPart];\n      }, obj);\n    } catch (e) {// continue regardless of error\n    }\n\n    return typeof val !== 'undefined' ? val : def;\n  }\n  function getFirstDefined() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    for (var i = 0; i < args.length; i += 1) {\n      if (typeof args[i] !== 'undefined') {\n        return args[i];\n      }\n    }\n  }\n  function isFunction(a) {\n    if (typeof a === 'function') {\n      return a;\n    }\n  }\n  function flattenBy(arr, key) {\n    var flat = [];\n\n    var recurse = function recurse(arr) {\n      arr.forEach(function (d) {\n        if (!d[key]) {\n          flat.push(d);\n        } else {\n          recurse(d[key]);\n        }\n      });\n    };\n\n    recurse(arr);\n    return flat;\n  }\n  function expandRows(rows, _ref) {\n    var manualExpandedKey = _ref.manualExpandedKey,\n        expanded = _ref.expanded,\n        _ref$expandSubRows = _ref.expandSubRows,\n        expandSubRows = _ref$expandSubRows === void 0 ? true : _ref$expandSubRows;\n    var expandedRows = [];\n\n    var handleRow = function handleRow(row, addToExpandedRows) {\n      if (addToExpandedRows === void 0) {\n        addToExpandedRows = true;\n      }\n\n      row.isExpanded = row.original && row.original[manualExpandedKey] || expanded[row.id];\n      row.canExpand = row.subRows && !!row.subRows.length;\n\n      if (addToExpandedRows) {\n        expandedRows.push(row);\n      }\n\n      if (row.subRows && row.subRows.length && row.isExpanded) {\n        row.subRows.forEach(function (row) {\n          return handleRow(row, expandSubRows);\n        });\n      }\n    };\n\n    rows.forEach(function (row) {\n      return handleRow(row);\n    });\n    return expandedRows;\n  }\n  function getFilterMethod(filter, userFilterTypes, filterTypes) {\n    return isFunction(filter) || userFilterTypes[filter] || filterTypes[filter] || filterTypes.text;\n  }\n  function shouldAutoRemoveFilter(autoRemove, value, column) {\n    return autoRemove ? autoRemove(value, column) : typeof value === 'undefined';\n  }\n  function unpreparedAccessWarning() {\n    throw new Error('React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.');\n  }\n  var passiveSupported = null;\n  function passiveEventSupported() {\n    // memoize support to avoid adding multiple test events\n    if (typeof passiveSupported === 'boolean') return passiveSupported;\n    var supported = false;\n\n    try {\n      var options = {\n        get passive() {\n          supported = true;\n          return false;\n        }\n\n      };\n      window.addEventListener('test', null, options);\n      window.removeEventListener('test', null, options);\n    } catch (err) {\n      supported = false;\n    }\n\n    passiveSupported = supported;\n    return passiveSupported;\n  } //\n\n  var reOpenBracket = /\\[/g;\n  var reCloseBracket = /\\]/g;\n\n  function makePathArray(obj) {\n    return flattenDeep(obj) // remove all periods in parts\n    .map(function (d) {\n      return String(d).replace('.', '_');\n    }) // join parts using period\n    .join('.') // replace brackets with periods\n    .replace(reOpenBracket, '.').replace(reCloseBracket, '') // split it back out on periods\n    .split('.');\n  }\n\n  function flattenDeep(arr, newArr) {\n    if (newArr === void 0) {\n      newArr = [];\n    }\n\n    if (!Array.isArray(arr)) {\n      newArr.push(arr);\n    } else {\n      for (var i = 0; i < arr.length; i += 1) {\n        flattenDeep(arr[i], newArr);\n      }\n    }\n\n    return newArr;\n  }\n\n  var defaultGetTableProps = function defaultGetTableProps(props) {\n    return _extends({\n      role: 'table'\n    }, props);\n  };\n\n  var defaultGetTableBodyProps = function defaultGetTableBodyProps(props) {\n    return _extends({\n      role: 'rowgroup'\n    }, props);\n  };\n\n  var defaultGetHeaderProps = function defaultGetHeaderProps(props, _ref) {\n    var column = _ref.column;\n    return _extends({\n      key: \"header_\" + column.id,\n      colSpan: column.totalVisibleHeaderCount,\n      role: 'columnheader'\n    }, props);\n  };\n\n  var defaultGetFooterProps = function defaultGetFooterProps(props, _ref2) {\n    var column = _ref2.column;\n    return _extends({\n      key: \"footer_\" + column.id,\n      colSpan: column.totalVisibleHeaderCount\n    }, props);\n  };\n\n  var defaultGetHeaderGroupProps = function defaultGetHeaderGroupProps(props, _ref3) {\n    var index = _ref3.index;\n    return _extends({\n      key: \"headerGroup_\" + index,\n      role: 'row'\n    }, props);\n  };\n\n  var defaultGetFooterGroupProps = function defaultGetFooterGroupProps(props, _ref4) {\n    var index = _ref4.index;\n    return _extends({\n      key: \"footerGroup_\" + index\n    }, props);\n  };\n\n  var defaultGetRowProps = function defaultGetRowProps(props, _ref5) {\n    var row = _ref5.row;\n    return _extends({\n      key: \"row_\" + row.id,\n      role: 'row'\n    }, props);\n  };\n\n  var defaultGetCellProps = function defaultGetCellProps(props, _ref6) {\n    var cell = _ref6.cell;\n    return _extends({\n      key: \"cell_\" + cell.row.id + \"_\" + cell.column.id,\n      role: 'cell'\n    }, props);\n  };\n\n  function makeDefaultPluginHooks() {\n    return {\n      useOptions: [],\n      stateReducers: [],\n      useControlledState: [],\n      columns: [],\n      columnsDeps: [],\n      allColumns: [],\n      allColumnsDeps: [],\n      accessValue: [],\n      materializedColumns: [],\n      materializedColumnsDeps: [],\n      useInstanceAfterData: [],\n      visibleColumns: [],\n      visibleColumnsDeps: [],\n      headerGroups: [],\n      headerGroupsDeps: [],\n      useInstanceBeforeDimensions: [],\n      useInstance: [],\n      prepareRow: [],\n      getTableProps: [defaultGetTableProps],\n      getTableBodyProps: [defaultGetTableBodyProps],\n      getHeaderGroupProps: [defaultGetHeaderGroupProps],\n      getFooterGroupProps: [defaultGetFooterGroupProps],\n      getHeaderProps: [defaultGetHeaderProps],\n      getFooterProps: [defaultGetFooterProps],\n      getRowProps: [defaultGetRowProps],\n      getCellProps: [defaultGetCellProps],\n      useFinalInstance: []\n    };\n  }\n\n  actions.resetHiddenColumns = 'resetHiddenColumns';\n  actions.toggleHideColumn = 'toggleHideColumn';\n  actions.setHiddenColumns = 'setHiddenColumns';\n  actions.toggleHideAllColumns = 'toggleHideAllColumns';\n  var useColumnVisibility = function useColumnVisibility(hooks) {\n    hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps];\n    hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps];\n    hooks.stateReducers.push(reducer);\n    hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);\n    hooks.headerGroupsDeps.push(function (deps, _ref) {\n      var instance = _ref.instance;\n      return [].concat(deps, [instance.state.hiddenColumns]);\n    });\n    hooks.useInstance.push(useInstance);\n  };\n  useColumnVisibility.pluginName = 'useColumnVisibility';\n\n  var defaultGetToggleHiddenProps = function defaultGetToggleHiddenProps(props, _ref2) {\n    var column = _ref2.column;\n    return [props, {\n      onChange: function onChange(e) {\n        column.toggleHidden(!e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: column.isVisible,\n      title: 'Toggle Column Visible'\n    }];\n  };\n\n  var defaultGetToggleHideAllColumnsProps = function defaultGetToggleHideAllColumnsProps(props, _ref3) {\n    var instance = _ref3.instance;\n    return [props, {\n      onChange: function onChange(e) {\n        instance.toggleHideAllColumns(!e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n      title: 'Toggle All Columns Hidden',\n      indeterminate: !instance.allColumnsHidden && instance.state.hiddenColumns.length\n    }];\n  };\n\n  function reducer(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        hiddenColumns: []\n      }, state);\n    }\n\n    if (action.type === actions.resetHiddenColumns) {\n      return _extends({}, state, {\n        hiddenColumns: instance.initialState.hiddenColumns || []\n      });\n    }\n\n    if (action.type === actions.toggleHideColumn) {\n      var should = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.includes(action.columnId);\n      var hiddenColumns = should ? [].concat(state.hiddenColumns, [action.columnId]) : state.hiddenColumns.filter(function (d) {\n        return d !== action.columnId;\n      });\n      return _extends({}, state, {\n        hiddenColumns: hiddenColumns\n      });\n    }\n\n    if (action.type === actions.setHiddenColumns) {\n      return _extends({}, state, {\n        hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)\n      });\n    }\n\n    if (action.type === actions.toggleHideAllColumns) {\n      var shouldAll = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.length;\n      return _extends({}, state, {\n        hiddenColumns: shouldAll ? instance.allColumns.map(function (d) {\n          return d.id;\n        }) : []\n      });\n    }\n  }\n\n  function useInstanceBeforeDimensions(instance) {\n    var headers = instance.headers,\n        hiddenColumns = instance.state.hiddenColumns;\n    var isMountedRef = React.useRef(false);\n\n    if (!isMountedRef.current) ;\n\n    var handleColumn = function handleColumn(column, parentVisible) {\n      column.isVisible = parentVisible && !hiddenColumns.includes(column.id);\n      var totalVisibleHeaderCount = 0;\n\n      if (column.headers && column.headers.length) {\n        column.headers.forEach(function (subColumn) {\n          return totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible);\n        });\n      } else {\n        totalVisibleHeaderCount = column.isVisible ? 1 : 0;\n      }\n\n      column.totalVisibleHeaderCount = totalVisibleHeaderCount;\n      return totalVisibleHeaderCount;\n    };\n\n    var totalVisibleHeaderCount = 0;\n    headers.forEach(function (subHeader) {\n      return totalVisibleHeaderCount += handleColumn(subHeader, true);\n    });\n  }\n\n  function useInstance(instance) {\n    var columns = instance.columns,\n        flatHeaders = instance.flatHeaders,\n        dispatch = instance.dispatch,\n        allColumns = instance.allColumns,\n        getHooks = instance.getHooks,\n        hiddenColumns = instance.state.hiddenColumns,\n        _instance$autoResetHi = instance.autoResetHiddenColumns,\n        autoResetHiddenColumns = _instance$autoResetHi === void 0 ? true : _instance$autoResetHi;\n    var getInstance = useGetLatest(instance);\n    var allColumnsHidden = allColumns.length === hiddenColumns.length;\n    var toggleHideColumn = React.useCallback(function (columnId, value) {\n      return dispatch({\n        type: actions.toggleHideColumn,\n        columnId: columnId,\n        value: value\n      });\n    }, [dispatch]);\n    var setHiddenColumns = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.setHiddenColumns,\n        value: value\n      });\n    }, [dispatch]);\n    var toggleHideAllColumns = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.toggleHideAllColumns,\n        value: value\n      });\n    }, [dispatch]);\n    var getToggleHideAllColumnsProps = makePropGetter(getHooks().getToggleHideAllColumnsProps, {\n      instance: getInstance()\n    });\n    flatHeaders.forEach(function (column) {\n      column.toggleHidden = function (value) {\n        dispatch({\n          type: actions.toggleHideColumn,\n          columnId: column.id,\n          value: value\n        });\n      };\n\n      column.getToggleHiddenProps = makePropGetter(getHooks().getToggleHiddenProps, {\n        instance: getInstance(),\n        column: column\n      });\n    });\n    var getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetHiddenColumns()) {\n        dispatch({\n          type: actions.resetHiddenColumns\n        });\n      }\n    }, [dispatch, columns]);\n    Object.assign(instance, {\n      allColumnsHidden: allColumnsHidden,\n      toggleHideColumn: toggleHideColumn,\n      setHiddenColumns: setHiddenColumns,\n      toggleHideAllColumns: toggleHideAllColumns,\n      getToggleHideAllColumnsProps: getToggleHideAllColumnsProps\n    });\n  }\n\n  var defaultInitialState = {};\n  var defaultColumnInstance = {};\n\n  var defaultReducer = function defaultReducer(state, action, prevState) {\n    return state;\n  };\n\n  var defaultGetSubRows = function defaultGetSubRows(row, index) {\n    return row.subRows || [];\n  };\n\n  var defaultGetRowId = function defaultGetRowId(row, index, parent) {\n    return \"\" + (parent ? [parent.id, index].join('.') : index);\n  };\n\n  var defaultUseControlledState = function defaultUseControlledState(d) {\n    return d;\n  };\n\n  function applyDefaults(props) {\n    var _props$initialState = props.initialState,\n        initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState,\n        _props$defaultColumn = props.defaultColumn,\n        defaultColumn = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn,\n        _props$getSubRows = props.getSubRows,\n        getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows,\n        _props$getRowId = props.getRowId,\n        getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId,\n        _props$stateReducer = props.stateReducer,\n        stateReducer = _props$stateReducer === void 0 ? defaultReducer : _props$stateReducer,\n        _props$useControlledS = props.useControlledState,\n        useControlledState = _props$useControlledS === void 0 ? defaultUseControlledState : _props$useControlledS,\n        rest = _objectWithoutPropertiesLoose(props, [\"initialState\", \"defaultColumn\", \"getSubRows\", \"getRowId\", \"stateReducer\", \"useControlledState\"]);\n\n    return _extends({}, rest, {\n      initialState: initialState,\n      defaultColumn: defaultColumn,\n      getSubRows: getSubRows,\n      getRowId: getRowId,\n      stateReducer: stateReducer,\n      useControlledState: useControlledState\n    });\n  }\n\n  var useTable = function useTable(props) {\n    for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      plugins[_key - 1] = arguments[_key];\n    }\n\n    // Apply default props\n    props = applyDefaults(props); // Add core plugins\n\n    plugins = [useColumnVisibility].concat(plugins); // Create the table instance\n\n    var instanceRef = React.useRef({}); // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n\n    var getInstance = useGetLatest(instanceRef.current); // Assign the props, plugins and hooks to the instance\n\n    Object.assign(getInstance(), _extends({}, props, {\n      plugins: plugins,\n      hooks: makeDefaultPluginHooks()\n    })); // Allow plugins to register hooks as early as possible\n\n    plugins.filter(Boolean).forEach(function (plugin) {\n      plugin(getInstance().hooks);\n    }); // Consume all hooks and make a getter for them\n\n    var getHooks = useGetLatest(getInstance().hooks);\n    getInstance().getHooks = getHooks;\n    delete getInstance().hooks; // Allow useOptions hooks to modify the options coming into the table\n\n    Object.assign(getInstance(), reduceHooks(getHooks().useOptions, applyDefaults(props)));\n\n    var _getInstance = getInstance(),\n        data = _getInstance.data,\n        userColumns = _getInstance.columns,\n        initialState = _getInstance.initialState,\n        defaultColumn = _getInstance.defaultColumn,\n        getSubRows = _getInstance.getSubRows,\n        getRowId = _getInstance.getRowId,\n        stateReducer = _getInstance.stateReducer,\n        useControlledState = _getInstance.useControlledState; // Setup user reducer ref\n\n\n    var getStateReducer = useGetLatest(stateReducer); // Build the reducer\n\n    var reducer = React.useCallback(function (state, action) {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({\n          action: action\n        });\n        throw new Error('Unknown Action 👆');\n      } // Reduce the state from all plugin reducers\n\n\n      return [].concat(getHooks().stateReducers, Array.isArray(getStateReducer()) ? getStateReducer() : [getStateReducer()]).reduce(function (s, handler) {\n        return handler(s, action, state, getInstance()) || s;\n      }, state);\n    }, [getHooks, getStateReducer, getInstance]); // Start the reducer\n\n    var _React$useReducer = React.useReducer(reducer, undefined, function () {\n      return reducer(initialState, {\n        type: actions.init\n      });\n    }),\n        reducerState = _React$useReducer[0],\n        dispatch = _React$useReducer[1]; // Allow the user to control the final state with hooks\n\n\n    var state = reduceHooks([].concat(getHooks().useControlledState, [useControlledState]), reducerState, {\n      instance: getInstance()\n    });\n    Object.assign(getInstance(), {\n      state: state,\n      dispatch: dispatch\n    }); // Decorate All the columns\n\n    var columns = React.useMemo(function () {\n      return linkColumnStructure(reduceHooks(getHooks().columns, userColumns, {\n        instance: getInstance()\n      }));\n    }, [getHooks, getInstance, userColumns].concat(reduceHooks(getHooks().columnsDeps, [], {\n      instance: getInstance()\n    })));\n    getInstance().columns = columns; // Get the flat list of all columns and allow hooks to decorate\n    // those columns (and trigger this memoization via deps)\n\n    var allColumns = React.useMemo(function () {\n      return reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance()\n      }).map(assignColumnAccessor);\n    }, [columns, getHooks, getInstance].concat(reduceHooks(getHooks().allColumnsDeps, [], {\n      instance: getInstance()\n    })));\n    getInstance().allColumns = allColumns; // Access the row model using initial columns\n\n    var _React$useMemo = React.useMemo(function () {\n      var rows = [];\n      var flatRows = [];\n      var rowsById = {};\n      var allColumnsQueue = [].concat(allColumns);\n\n      while (allColumnsQueue.length) {\n        var column = allColumnsQueue.shift();\n        accessRowsForColumn({\n          data: data,\n          rows: rows,\n          flatRows: flatRows,\n          rowsById: rowsById,\n          column: column,\n          getRowId: getRowId,\n          getSubRows: getSubRows,\n          accessValueHooks: getHooks().accessValue,\n          getInstance: getInstance\n        });\n      }\n\n      return [rows, flatRows, rowsById];\n    }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance]),\n        rows = _React$useMemo[0],\n        flatRows = _React$useMemo[1],\n        rowsById = _React$useMemo[2];\n\n    Object.assign(getInstance(), {\n      rows: rows,\n      initialRows: [].concat(rows),\n      flatRows: flatRows,\n      rowsById: rowsById // materializedColumns,\n\n    });\n    loopHooks(getHooks().useInstanceAfterData, getInstance()); // Get the flat list of all columns AFTER the rows\n    // have been access, and allow hooks to decorate\n    // those columns (and trigger this memoization via deps)\n\n    var visibleColumns = React.useMemo(function () {\n      return reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance()\n      }).map(function (d) {\n        return decorateColumn(d, defaultColumn);\n      });\n    }, [getHooks, allColumns, getInstance, defaultColumn].concat(reduceHooks(getHooks().visibleColumnsDeps, [], {\n      instance: getInstance()\n    }))); // Combine new visible columns with all columns\n\n    allColumns = React.useMemo(function () {\n      var columns = [].concat(visibleColumns);\n      allColumns.forEach(function (column) {\n        if (!columns.find(function (d) {\n          return d.id === column.id;\n        })) {\n          columns.push(column);\n        }\n      });\n      return columns;\n    }, [allColumns, visibleColumns]);\n    getInstance().allColumns = allColumns;\n\n    {\n      var duplicateColumns = allColumns.filter(function (column, i) {\n        return allColumns.findIndex(function (d) {\n          return d.id === column.id;\n        }) !== i;\n      });\n\n      if (duplicateColumns.length) {\n        console.info(allColumns);\n        throw new Error(\"Duplicate columns were found with ids: \\\"\" + duplicateColumns.map(function (d) {\n          return d.id;\n        }).join(', ') + \"\\\" in the columns array above\");\n      }\n    } // Make the headerGroups\n\n\n    var headerGroups = React.useMemo(function () {\n      return reduceHooks(getHooks().headerGroups, makeHeaderGroups(visibleColumns, defaultColumn), getInstance());\n    }, [getHooks, visibleColumns, defaultColumn, getInstance].concat(reduceHooks(getHooks().headerGroupsDeps, [], {\n      instance: getInstance()\n    })));\n    getInstance().headerGroups = headerGroups; // Get the first level of headers\n\n    var headers = React.useMemo(function () {\n      return headerGroups.length ? headerGroups[0].headers : [];\n    }, [headerGroups]);\n    getInstance().headers = headers; // Provide a flat header list for utilities\n\n    getInstance().flatHeaders = headerGroups.reduce(function (all, headerGroup) {\n      return [].concat(all, headerGroup.headers);\n    }, []);\n    loopHooks(getHooks().useInstanceBeforeDimensions, getInstance()); // Filter columns down to visible ones\n\n    var visibleColumnsDep = visibleColumns.filter(function (d) {\n      return d.isVisible;\n    }).map(function (d) {\n      return d.id;\n    }).sort().join('_');\n    visibleColumns = React.useMemo(function () {\n      return visibleColumns.filter(function (d) {\n        return d.isVisible;\n      });\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]);\n    getInstance().visibleColumns = visibleColumns; // Header Visibility is needed by this point\n\n    var _calculateHeaderWidth = calculateHeaderWidths(headers),\n        totalColumnsMinWidth = _calculateHeaderWidth[0],\n        totalColumnsWidth = _calculateHeaderWidth[1],\n        totalColumnsMaxWidth = _calculateHeaderWidth[2];\n\n    getInstance().totalColumnsMinWidth = totalColumnsMinWidth;\n    getInstance().totalColumnsWidth = totalColumnsWidth;\n    getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth;\n    loopHooks(getHooks().useInstance, getInstance()) // Each materialized header needs to be assigned a render function and other\n    // prop getter properties here.\n    ;\n    [].concat(getInstance().flatHeaders, getInstance().allColumns).forEach(function (column) {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column); // Give columns/headers a default getHeaderProps\n\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column: column\n      }); // Give columns/headers a default getFooterProps\n\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column: column\n      });\n    });\n    getInstance().headerGroups = React.useMemo(function () {\n      return headerGroups.filter(function (headerGroup, i) {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(function (column) {\n          var recurse = function recurse(headers) {\n            return headers.filter(function (column) {\n              if (column.headers) {\n                return recurse(column.headers);\n              }\n\n              return column.isVisible;\n            }).length;\n          };\n\n          if (column.headers) {\n            return recurse(column.headers);\n          }\n\n          return column.isVisible;\n        }); // Give headerGroups getRowProps\n\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(getHooks().getHeaderGroupProps, {\n            instance: getInstance(),\n            headerGroup: headerGroup,\n            index: i\n          });\n          headerGroup.getFooterGroupProps = makePropGetter(getHooks().getFooterGroupProps, {\n            instance: getInstance(),\n            headerGroup: headerGroup,\n            index: i\n          });\n          return true;\n        }\n\n        return false;\n      });\n    }, [headerGroups, getInstance, getHooks]);\n    getInstance().footerGroups = [].concat(getInstance().headerGroups).reverse(); // The prepareRow function is absolutely necessary and MUST be called on\n    // any rows the user wishes to be displayed.\n\n    getInstance().prepareRow = React.useCallback(function (row) {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row: row\n      }); // Build the visible cells for each row\n\n      row.allCells = allColumns.map(function (column) {\n        var value = row.values[column.id];\n        var cell = {\n          column: column,\n          row: row,\n          value: value\n        }; // Give each cell a getCellProps base\n\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell: cell\n        }); // Give each cell a renderer function (supports multiple renderers)\n\n        cell.render = makeRenderer(getInstance(), column, {\n          row: row,\n          cell: cell,\n          value: value\n        });\n        return cell;\n      });\n      row.cells = visibleColumns.map(function (column) {\n        return row.allCells.find(function (cell) {\n          return cell.column.id === column.id;\n        });\n      }); // need to apply any row specific hooks (useExpanded requires this)\n\n      loopHooks(getHooks().prepareRow, row, {\n        instance: getInstance()\n      });\n    }, [getHooks, getInstance, allColumns, visibleColumns]);\n    getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n      instance: getInstance()\n    });\n    getInstance().getTableBodyProps = makePropGetter(getHooks().getTableBodyProps, {\n      instance: getInstance()\n    });\n    loopHooks(getHooks().useFinalInstance, getInstance());\n    return getInstance();\n  };\n\n  function calculateHeaderWidths(headers, left) {\n    if (left === void 0) {\n      left = 0;\n    }\n\n    var sumTotalMinWidth = 0;\n    var sumTotalWidth = 0;\n    var sumTotalMaxWidth = 0;\n    var sumTotalFlexWidth = 0;\n    headers.forEach(function (header) {\n      var subHeaders = header.headers;\n      header.totalLeft = left;\n\n      if (subHeaders && subHeaders.length) {\n        var _calculateHeaderWidth2 = calculateHeaderWidths(subHeaders, left),\n            totalMinWidth = _calculateHeaderWidth2[0],\n            totalWidth = _calculateHeaderWidth2[1],\n            totalMaxWidth = _calculateHeaderWidth2[2],\n            totalFlexWidth = _calculateHeaderWidth2[3];\n\n        header.totalMinWidth = totalMinWidth;\n        header.totalWidth = totalWidth;\n        header.totalMaxWidth = totalMaxWidth;\n        header.totalFlexWidth = totalFlexWidth;\n      } else {\n        header.totalMinWidth = header.minWidth;\n        header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);\n        header.totalMaxWidth = header.maxWidth;\n        header.totalFlexWidth = header.canResize ? header.totalWidth : 0;\n      }\n\n      if (header.isVisible) {\n        left += header.totalWidth;\n        sumTotalMinWidth += header.totalMinWidth;\n        sumTotalWidth += header.totalWidth;\n        sumTotalMaxWidth += header.totalMaxWidth;\n        sumTotalFlexWidth += header.totalFlexWidth;\n      }\n    });\n    return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth];\n  }\n\n  function accessRowsForColumn(_ref) {\n    var data = _ref.data,\n        rows = _ref.rows,\n        flatRows = _ref.flatRows,\n        rowsById = _ref.rowsById,\n        column = _ref.column,\n        getRowId = _ref.getRowId,\n        getSubRows = _ref.getSubRows,\n        accessValueHooks = _ref.accessValueHooks,\n        getInstance = _ref.getInstance;\n\n    // Access the row's data column-by-column\n    // We do it this way so we can incrementally add materialized\n    // columns after the first pass and avoid excessive looping\n    var accessRow = function accessRow(originalRow, rowIndex, depth, parent, parentRows) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n\n      // Keep the original reference around\n      var original = originalRow;\n      var id = getRowId(originalRow, rowIndex, parent);\n      var row = rowsById[id]; // If the row hasn't been created, let's make it\n\n      if (!row) {\n        row = {\n          id: id,\n          original: original,\n          index: rowIndex,\n          depth: depth,\n          cells: [{}] // This is a dummy cell\n\n        }; // Override common array functions (and the dummy cell's getCellProps function)\n        // to show an error if it is accessed without calling prepareRow\n\n        row.cells.map = unpreparedAccessWarning;\n        row.cells.filter = unpreparedAccessWarning;\n        row.cells.forEach = unpreparedAccessWarning;\n        row.cells[0].getCellProps = unpreparedAccessWarning; // Create the cells and values\n\n        row.values = {}; // Push this row into the parentRows array\n\n        parentRows.push(row); // Keep track of every row in a flat array\n\n        flatRows.push(row); // Also keep track of every row by its ID\n\n        rowsById[id] = row; // Get the original subrows\n\n        row.originalSubRows = getSubRows(originalRow, rowIndex); // Then recursively access them\n\n        if (row.originalSubRows) {\n          var subRows = [];\n          row.originalSubRows.forEach(function (d, i) {\n            return accessRow(d, i, depth + 1, row, subRows);\n          }); // Keep the new subRows array on the row\n\n          row.subRows = subRows;\n        }\n      } else if (row.subRows) {\n        // If the row exists, then it's already been accessed\n        // Keep recursing, but don't worry about passing the\n        // accumlator array (those rows already exist)\n        row.originalSubRows.forEach(function (d, i) {\n          return accessRow(d, i, depth + 1, row);\n        });\n      } // If the column has an accessor, use it to get a value\n\n\n      if (column.accessor) {\n        row.values[column.id] = column.accessor(originalRow, rowIndex, row, parentRows, data);\n      } // Allow plugins to manipulate the column value\n\n\n      row.values[column.id] = reduceHooks(accessValueHooks, row.values[column.id], {\n        row: row,\n        column: column,\n        instance: getInstance()\n      }, true);\n    };\n\n    data.forEach(function (originalRow, rowIndex) {\n      return accessRow(originalRow, rowIndex, 0, undefined, rows);\n    });\n  }\n\n  actions.resetExpanded = 'resetExpanded';\n  actions.toggleRowExpanded = 'toggleRowExpanded';\n  actions.toggleAllRowsExpanded = 'toggleAllRowsExpanded';\n  var useExpanded = function useExpanded(hooks) {\n    hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps];\n    hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps];\n    hooks.stateReducers.push(reducer$1);\n    hooks.useInstance.push(useInstance$1);\n    hooks.prepareRow.push(prepareRow);\n  };\n  useExpanded.pluginName = 'useExpanded';\n\n  var defaultGetToggleAllRowsExpandedProps = function defaultGetToggleAllRowsExpandedProps(props, _ref) {\n    var instance = _ref.instance;\n    return [props, {\n      onClick: function onClick(e) {\n        instance.toggleAllRowsExpanded();\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      title: 'Toggle All Rows Expanded'\n    }];\n  };\n\n  var defaultGetToggleRowExpandedProps = function defaultGetToggleRowExpandedProps(props, _ref2) {\n    var row = _ref2.row;\n    return [props, {\n      onClick: function onClick() {\n        row.toggleRowExpanded();\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      title: 'Toggle Row Expanded'\n    }];\n  }; // Reducer\n\n\n  function reducer$1(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        expanded: {}\n      }, state);\n    }\n\n    if (action.type === actions.resetExpanded) {\n      return _extends({}, state, {\n        expanded: instance.initialState.expanded || {}\n      });\n    }\n\n    if (action.type === actions.toggleAllRowsExpanded) {\n      var value = action.value;\n      var rowsById = instance.rowsById;\n      var isAllRowsExpanded = Object.keys(rowsById).length === Object.keys(state.expanded).length;\n      var expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded;\n\n      if (expandAll) {\n        var expanded = {};\n        Object.keys(rowsById).forEach(function (rowId) {\n          expanded[rowId] = true;\n        });\n        return _extends({}, state, {\n          expanded: expanded\n        });\n      }\n\n      return _extends({}, state, {\n        expanded: {}\n      });\n    }\n\n    if (action.type === actions.toggleRowExpanded) {\n      var id = action.id,\n          setExpanded = action.value;\n      var exists = state.expanded[id];\n      var shouldExist = typeof setExpanded !== 'undefined' ? setExpanded : !exists;\n\n      if (!exists && shouldExist) {\n        var _extends2;\n\n        return _extends({}, state, {\n          expanded: _extends({}, state.expanded, (_extends2 = {}, _extends2[id] = true, _extends2))\n        });\n      } else if (exists && !shouldExist) {\n        var _state$expanded = state.expanded,\n            _ = _state$expanded[id],\n            rest = _objectWithoutPropertiesLoose(_state$expanded, [id].map(_toPropertyKey));\n\n        return _extends({}, state, {\n          expanded: rest\n        });\n      } else {\n        return state;\n      }\n    }\n  }\n\n  function useInstance$1(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        rowsById = instance.rowsById,\n        _instance$manualExpan = instance.manualExpandedKey,\n        manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n        _instance$paginateExp = instance.paginateExpandedRows,\n        paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n        _instance$expandSubRo = instance.expandSubRows,\n        expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n        _instance$autoResetEx = instance.autoResetExpanded,\n        autoResetExpanded = _instance$autoResetEx === void 0 ? true : _instance$autoResetEx,\n        getHooks = instance.getHooks,\n        plugins = instance.plugins,\n        expanded = instance.state.expanded,\n        dispatch = instance.dispatch;\n    ensurePluginOrder(plugins, ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'], 'useExpanded');\n    var getAutoResetExpanded = useGetLatest(autoResetExpanded);\n    var isAllRowsExpanded = Boolean(Object.keys(rowsById).length && Object.keys(expanded).length);\n\n    if (isAllRowsExpanded) {\n      if (Object.keys(rowsById).some(function (id) {\n        return !expanded[id];\n      })) {\n        isAllRowsExpanded = false;\n      }\n    } // Bypass any effects from firing when this changes\n\n\n    useMountedLayoutEffect(function () {\n      if (getAutoResetExpanded()) {\n        dispatch({\n          type: actions.resetExpanded\n        });\n      }\n    }, [dispatch, data]);\n    var toggleRowExpanded = React.useCallback(function (id, value) {\n      dispatch({\n        type: actions.toggleRowExpanded,\n        id: id,\n        value: value\n      });\n    }, [dispatch]);\n    var toggleAllRowsExpanded = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.toggleAllRowsExpanded,\n        value: value\n      });\n    }, [dispatch]);\n    var expandedRows = React.useMemo(function () {\n      if (paginateExpandedRows) {\n        return expandRows(rows, {\n          manualExpandedKey: manualExpandedKey,\n          expanded: expanded,\n          expandSubRows: expandSubRows\n        });\n      }\n\n      return rows;\n    }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);\n    var expandedDepth = React.useMemo(function () {\n      return findExpandedDepth(expanded);\n    }, [expanded]);\n    var getInstance = useGetLatest(instance);\n    var getToggleAllRowsExpandedProps = makePropGetter(getHooks().getToggleAllRowsExpandedProps, {\n      instance: getInstance()\n    });\n    Object.assign(instance, {\n      preExpandedRows: rows,\n      expandedRows: expandedRows,\n      rows: expandedRows,\n      expandedDepth: expandedDepth,\n      isAllRowsExpanded: isAllRowsExpanded,\n      toggleRowExpanded: toggleRowExpanded,\n      toggleAllRowsExpanded: toggleAllRowsExpanded,\n      getToggleAllRowsExpandedProps: getToggleAllRowsExpandedProps\n    });\n  }\n\n  function prepareRow(row, _ref3) {\n    var getHooks = _ref3.instance.getHooks,\n        instance = _ref3.instance;\n\n    row.toggleRowExpanded = function (set) {\n      return instance.toggleRowExpanded(row.id, set);\n    };\n\n    row.getToggleRowExpandedProps = makePropGetter(getHooks().getToggleRowExpandedProps, {\n      instance: instance,\n      row: row\n    });\n  }\n\n  function findExpandedDepth(expanded) {\n    var maxDepth = 0;\n    Object.keys(expanded).forEach(function (id) {\n      var splitId = id.split('.');\n      maxDepth = Math.max(maxDepth, splitId.length);\n    });\n    return maxDepth;\n  }\n\n  var text = function text(rows, ids, filterValue) {\n    rows = rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());\n      });\n    });\n    return rows;\n  };\n\n  text.autoRemove = function (val) {\n    return !val;\n  };\n\n  var exactText = function exactText(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;\n      });\n    });\n  };\n\n  exactText.autoRemove = function (val) {\n    return !val;\n  };\n\n  var exactTextCase = function exactTextCase(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue) === String(filterValue) : true;\n      });\n    });\n  };\n\n  exactTextCase.autoRemove = function (val) {\n    return !val;\n  };\n\n  var includes = function includes(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue.includes(filterValue);\n      });\n    });\n  };\n\n  includes.autoRemove = function (val) {\n    return !val || !val.length;\n  };\n\n  var includesAll = function includesAll(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue && rowValue.length && filterValue.every(function (val) {\n          return rowValue.includes(val);\n        });\n      });\n    });\n  };\n\n  includesAll.autoRemove = function (val) {\n    return !val || !val.length;\n  };\n\n  var includesSome = function includesSome(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue && rowValue.length && filterValue.some(function (val) {\n          return rowValue.includes(val);\n        });\n      });\n    });\n  };\n\n  includesSome.autoRemove = function (val) {\n    return !val || !val.length;\n  };\n\n  var includesValue = function includesValue(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return filterValue.includes(rowValue);\n      });\n    });\n  };\n\n  includesValue.autoRemove = function (val) {\n    return !val || !val.length;\n  };\n\n  var exact = function exact(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue === filterValue;\n      });\n    });\n  };\n\n  exact.autoRemove = function (val) {\n    return typeof val === 'undefined';\n  };\n\n  var equals = function equals(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id]; // eslint-disable-next-line eqeqeq\n\n        return rowValue == filterValue;\n      });\n    });\n  };\n\n  equals.autoRemove = function (val) {\n    return val == null;\n  };\n\n  var between = function between(rows, ids, filterValue) {\n    var _ref = filterValue || [],\n        min = _ref[0],\n        max = _ref[1];\n\n    min = typeof min === 'number' ? min : -Infinity;\n    max = typeof max === 'number' ? max : Infinity;\n\n    if (min > max) {\n      var temp = min;\n      min = max;\n      max = temp;\n    }\n\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue >= min && rowValue <= max;\n      });\n    });\n  };\n\n  between.autoRemove = function (val) {\n    return !val || typeof val[0] !== 'number' && typeof val[1] !== 'number';\n  };\n\n  var filterTypes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    text: text,\n    exactText: exactText,\n    exactTextCase: exactTextCase,\n    includes: includes,\n    includesAll: includesAll,\n    includesSome: includesSome,\n    includesValue: includesValue,\n    exact: exact,\n    equals: equals,\n    between: between\n  });\n\n  actions.resetFilters = 'resetFilters';\n  actions.setFilter = 'setFilter';\n  actions.setAllFilters = 'setAllFilters';\n  var useFilters = function useFilters(hooks) {\n    hooks.stateReducers.push(reducer$2);\n    hooks.useInstance.push(useInstance$2);\n  };\n  useFilters.pluginName = 'useFilters';\n\n  function reducer$2(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        filters: []\n      }, state);\n    }\n\n    if (action.type === actions.resetFilters) {\n      return _extends({}, state, {\n        filters: instance.initialState.filters || []\n      });\n    }\n\n    if (action.type === actions.setFilter) {\n      var columnId = action.columnId,\n          filterValue = action.filterValue;\n      var allColumns = instance.allColumns,\n          userFilterTypes = instance.filterTypes;\n      var column = allColumns.find(function (d) {\n        return d.id === columnId;\n      });\n\n      if (!column) {\n        throw new Error(\"React-Table: Could not find a column with id: \" + columnId);\n      }\n\n      var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n      var previousfilter = state.filters.find(function (d) {\n        return d.id === columnId;\n      });\n      var newFilter = functionalUpdate(filterValue, previousfilter && previousfilter.value); //\n\n      if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n        return _extends({}, state, {\n          filters: state.filters.filter(function (d) {\n            return d.id !== columnId;\n          })\n        });\n      }\n\n      if (previousfilter) {\n        return _extends({}, state, {\n          filters: state.filters.map(function (d) {\n            if (d.id === columnId) {\n              return {\n                id: columnId,\n                value: newFilter\n              };\n            }\n\n            return d;\n          })\n        });\n      }\n\n      return _extends({}, state, {\n        filters: [].concat(state.filters, [{\n          id: columnId,\n          value: newFilter\n        }])\n      });\n    }\n\n    if (action.type === actions.setAllFilters) {\n      var filters = action.filters;\n      var _allColumns = instance.allColumns,\n          _userFilterTypes = instance.filterTypes;\n      return _extends({}, state, {\n        // Filter out undefined values\n        filters: functionalUpdate(filters, state.filters).filter(function (filter) {\n          var column = _allColumns.find(function (d) {\n            return d.id === filter.id;\n          });\n\n          var filterMethod = getFilterMethod(column.filter, _userFilterTypes || {}, filterTypes);\n\n          if (shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)) {\n            return false;\n          }\n\n          return true;\n        })\n      });\n    }\n  }\n\n  function useInstance$2(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        flatRows = instance.flatRows,\n        rowsById = instance.rowsById,\n        allColumns = instance.allColumns,\n        userFilterTypes = instance.filterTypes,\n        manualFilters = instance.manualFilters,\n        _instance$defaultCanF = instance.defaultCanFilter,\n        defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF,\n        disableFilters = instance.disableFilters,\n        filters = instance.state.filters,\n        dispatch = instance.dispatch,\n        _instance$autoResetFi = instance.autoResetFilters,\n        autoResetFilters = _instance$autoResetFi === void 0 ? true : _instance$autoResetFi;\n    var setFilter = React.useCallback(function (columnId, filterValue) {\n      dispatch({\n        type: actions.setFilter,\n        columnId: columnId,\n        filterValue: filterValue\n      });\n    }, [dispatch]);\n    var setAllFilters = React.useCallback(function (filters) {\n      dispatch({\n        type: actions.setAllFilters,\n        filters: filters\n      });\n    }, [dispatch]);\n    allColumns.forEach(function (column) {\n      var id = column.id,\n          accessor = column.accessor,\n          columnDefaultCanFilter = column.defaultCanFilter,\n          columnDisableFilters = column.disableFilters; // Determine if a column is filterable\n\n      column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : undefined, disableFilters === true ? false : undefined, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false); // Provide the column a way of updating the filter value\n\n      column.setFilter = function (val) {\n        return setFilter(column.id, val);\n      }; // Provide the current filter value to the column for\n      // convenience\n\n\n      var found = filters.find(function (d) {\n        return d.id === id;\n      });\n      column.filterValue = found && found.value;\n    });\n\n    var _React$useMemo = React.useMemo(function () {\n      if (manualFilters || !filters.length) {\n        return [rows, flatRows, rowsById];\n      }\n\n      var filteredFlatRows = [];\n      var filteredRowsById = {}; // Filters top level and nested rows\n\n      var filterRows = function filterRows(rows, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n\n        var filteredRows = rows;\n        filteredRows = filters.reduce(function (filteredSoFar, _ref) {\n          var columnId = _ref.id,\n              filterValue = _ref.value;\n          // Find the filters column\n          var column = allColumns.find(function (d) {\n            return d.id === columnId;\n          });\n\n          if (!column) {\n            return filteredSoFar;\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar;\n          }\n\n          var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n\n          if (!filterMethod) {\n            console.warn(\"Could not find a valid 'column.filter' for column with the ID: \" + column.id + \".\");\n            return filteredSoFar;\n          } // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n\n\n          column.filteredRows = filterMethod(filteredSoFar, [columnId], filterValue);\n          return column.filteredRows;\n        }, rows); // Apply the filter to any subRows\n        // We technically could do this recursively in the above loop,\n        // but that would severely hinder the API for the user, since they\n        // would be required to do that recursion in some scenarios\n\n        filteredRows.forEach(function (row) {\n          filteredFlatRows.push(row);\n          filteredRowsById[row.id] = row;\n\n          if (!row.subRows) {\n            return;\n          }\n\n          row.subRows = row.subRows && row.subRows.length > 0 ? filterRows(row.subRows, depth + 1) : row.subRows;\n        });\n        return filteredRows;\n      };\n\n      return [filterRows(rows), filteredFlatRows, filteredRowsById];\n    }, [manualFilters, filters, rows, flatRows, rowsById, allColumns, userFilterTypes]),\n        filteredRows = _React$useMemo[0],\n        filteredFlatRows = _React$useMemo[1],\n        filteredRowsById = _React$useMemo[2];\n\n    React.useMemo(function () {\n      // Now that each filtered column has it's partially filtered rows,\n      // lets assign the final filtered rows to all of the other columns\n      var nonFilteredColumns = allColumns.filter(function (column) {\n        return !filters.find(function (d) {\n          return d.id === column.id;\n        });\n      }); // This essentially enables faceted filter options to be built easily\n      // using every column's preFilteredRows value\n\n      nonFilteredColumns.forEach(function (column) {\n        column.preFilteredRows = filteredRows;\n        column.filteredRows = filteredRows;\n      });\n    }, [filteredRows, filters, allColumns]);\n    var getAutoResetFilters = useGetLatest(autoResetFilters);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetFilters()) {\n        dispatch({\n          type: actions.resetFilters\n        });\n      }\n    }, [dispatch, manualFilters ? null : data]);\n    Object.assign(instance, {\n      preFilteredRows: rows,\n      preFilteredFlatRows: flatRows,\n      preFilteredRowsById: rowsById,\n      filteredRows: filteredRows,\n      filteredFlatRows: filteredFlatRows,\n      filteredRowsById: filteredRowsById,\n      rows: filteredRows,\n      flatRows: filteredFlatRows,\n      rowsById: filteredRowsById,\n      setFilter: setFilter,\n      setAllFilters: setAllFilters\n    });\n  }\n\n  actions.resetGlobalFilter = 'resetGlobalFilter';\n  actions.setGlobalFilter = 'setGlobalFilter';\n  var useGlobalFilter = function useGlobalFilter(hooks) {\n    hooks.stateReducers.push(reducer$3);\n    hooks.useInstance.push(useInstance$3);\n  };\n  useGlobalFilter.pluginName = 'useGlobalFilter';\n\n  function reducer$3(state, action, previousState, instance) {\n    if (action.type === actions.resetGlobalFilter) {\n      return _extends({}, state, {\n        globalFilter: instance.initialState.globalFilter || undefined\n      });\n    }\n\n    if (action.type === actions.setGlobalFilter) {\n      var filterValue = action.filterValue;\n      var userFilterTypes = instance.userFilterTypes;\n      var filterMethod = getFilterMethod(instance.globalFilter, userFilterTypes || {}, filterTypes);\n      var newFilter = functionalUpdate(filterValue, state.globalFilter); //\n\n      if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n        var globalFilter = state.globalFilter,\n            stateWithoutGlobalFilter = _objectWithoutPropertiesLoose(state, [\"globalFilter\"]);\n\n        return stateWithoutGlobalFilter;\n      }\n\n      return _extends({}, state, {\n        globalFilter: newFilter\n      });\n    }\n  }\n\n  function useInstance$3(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        flatRows = instance.flatRows,\n        rowsById = instance.rowsById,\n        allColumns = instance.allColumns,\n        userFilterTypes = instance.filterTypes,\n        globalFilter = instance.globalFilter,\n        manualGlobalFilter = instance.manualGlobalFilter,\n        globalFilterValue = instance.state.globalFilter,\n        dispatch = instance.dispatch,\n        _instance$autoResetGl = instance.autoResetGlobalFilter,\n        autoResetGlobalFilter = _instance$autoResetGl === void 0 ? true : _instance$autoResetGl,\n        disableGlobalFilter = instance.disableGlobalFilter;\n    var setGlobalFilter = React.useCallback(function (filterValue) {\n      dispatch({\n        type: actions.setGlobalFilter,\n        filterValue: filterValue\n      });\n    }, [dispatch]); // TODO: Create a filter cache for incremental high speed multi-filtering\n    // This gets pretty complicated pretty fast, since you have to maintain a\n    // cache for each row group (top-level rows, and each row's recursive subrows)\n    // This would make multi-filtering a lot faster though. Too far?\n\n    var _React$useMemo = React.useMemo(function () {\n      if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n        return [rows, flatRows, rowsById];\n      }\n\n      var filteredFlatRows = [];\n      var filteredRowsById = {};\n      var filterMethod = getFilterMethod(globalFilter, userFilterTypes || {}, filterTypes);\n\n      if (!filterMethod) {\n        console.warn(\"Could not find a valid 'globalFilter' option.\");\n        return rows;\n      }\n\n      allColumns.forEach(function (column) {\n        var columnDisableGlobalFilter = column.disableGlobalFilter;\n        column.canFilter = getFirstDefined(columnDisableGlobalFilter === true ? false : undefined, disableGlobalFilter === true ? false : undefined, true);\n      });\n      var filterableColumns = allColumns.filter(function (c) {\n        return c.canFilter === true;\n      }); // Filters top level and nested rows\n\n      var filterRows = function filterRows(filteredRows) {\n        filteredRows = filterMethod(filteredRows, filterableColumns.map(function (d) {\n          return d.id;\n        }), globalFilterValue);\n        filteredRows.forEach(function (row) {\n          filteredFlatRows.push(row);\n          filteredRowsById[row.id] = row;\n          row.subRows = row.subRows && row.subRows.length ? filterRows(row.subRows) : row.subRows;\n        });\n        return filteredRows;\n      };\n\n      return [filterRows(rows), filteredFlatRows, filteredRowsById];\n    }, [manualGlobalFilter, globalFilterValue, globalFilter, userFilterTypes, allColumns, rows, flatRows, rowsById, disableGlobalFilter]),\n        globalFilteredRows = _React$useMemo[0],\n        globalFilteredFlatRows = _React$useMemo[1],\n        globalFilteredRowsById = _React$useMemo[2];\n\n    var getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetGlobalFilter()) {\n        dispatch({\n          type: actions.resetGlobalFilter\n        });\n      }\n    }, [dispatch, manualGlobalFilter ? null : data]);\n    Object.assign(instance, {\n      preGlobalFilteredRows: rows,\n      preGlobalFilteredFlatRows: flatRows,\n      preGlobalFilteredRowsById: rowsById,\n      globalFilteredRows: globalFilteredRows,\n      globalFilteredFlatRows: globalFilteredFlatRows,\n      globalFilteredRowsById: globalFilteredRowsById,\n      rows: globalFilteredRows,\n      flatRows: globalFilteredFlatRows,\n      rowsById: globalFilteredRowsById,\n      setGlobalFilter: setGlobalFilter,\n      disableGlobalFilter: disableGlobalFilter\n    });\n  }\n\n  function sum(values, aggregatedValues) {\n    // It's faster to just add the aggregations together instead of\n    // process leaf nodes individually\n    return aggregatedValues.reduce(function (sum, next) {\n      return sum + (typeof next === 'number' ? next : 0);\n    }, 0);\n  }\n  function min(values) {\n    var min = values[0] || 0;\n    values.forEach(function (value) {\n      if (typeof value === 'number') {\n        min = Math.min(min, value);\n      }\n    });\n    return min;\n  }\n  function max(values) {\n    var max = values[0] || 0;\n    values.forEach(function (value) {\n      if (typeof value === 'number') {\n        max = Math.max(max, value);\n      }\n    });\n    return max;\n  }\n  function minMax(values) {\n    var min = values[0] || 0;\n    var max = values[0] || 0;\n    values.forEach(function (value) {\n      if (typeof value === 'number') {\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    });\n    return min + \"..\" + max;\n  }\n  function average(values) {\n    return sum(null, values) / values.length;\n  }\n  function median(values) {\n    if (!values.length) {\n      return null;\n    }\n\n    var mid = Math.floor(values.length / 2);\n    var nums = [].concat(values).sort(function (a, b) {\n      return a - b;\n    });\n    return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n  }\n  function unique(values) {\n    return Array.from(new Set(values).values());\n  }\n  function uniqueCount(values) {\n    return new Set(values).size;\n  }\n  function count(values) {\n    return values.length;\n  }\n\n  var aggregations = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    sum: sum,\n    min: min,\n    max: max,\n    minMax: minMax,\n    average: average,\n    median: median,\n    unique: unique,\n    uniqueCount: uniqueCount,\n    count: count\n  });\n\n  var emptyArray = [];\n  var emptyObject = {}; // Actions\n\n  actions.resetGroupBy = 'resetGroupBy';\n  actions.setGroupBy = 'setGroupBy';\n  actions.toggleGroupBy = 'toggleGroupBy';\n  var useGroupBy = function useGroupBy(hooks) {\n    hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps];\n    hooks.stateReducers.push(reducer$4);\n    hooks.visibleColumnsDeps.push(function (deps, _ref) {\n      var instance = _ref.instance;\n      return [].concat(deps, [instance.state.groupBy]);\n    });\n    hooks.visibleColumns.push(visibleColumns);\n    hooks.useInstance.push(useInstance$4);\n    hooks.prepareRow.push(prepareRow$1);\n  };\n  useGroupBy.pluginName = 'useGroupBy';\n\n  var defaultGetGroupByToggleProps = function defaultGetGroupByToggleProps(props, _ref2) {\n    var header = _ref2.header;\n    return [props, {\n      onClick: header.canGroupBy ? function (e) {\n        e.persist();\n        header.toggleGroupBy();\n      } : undefined,\n      style: {\n        cursor: header.canGroupBy ? 'pointer' : undefined\n      },\n      title: 'Toggle GroupBy'\n    }];\n  }; // Reducer\n\n\n  function reducer$4(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        groupBy: []\n      }, state);\n    }\n\n    if (action.type === actions.resetGroupBy) {\n      return _extends({}, state, {\n        groupBy: instance.initialState.groupBy || []\n      });\n    }\n\n    if (action.type === actions.setGroupBy) {\n      var value = action.value;\n      return _extends({}, state, {\n        groupBy: value\n      });\n    }\n\n    if (action.type === actions.toggleGroupBy) {\n      var columnId = action.columnId,\n          setGroupBy = action.value;\n      var resolvedGroupBy = typeof setGroupBy !== 'undefined' ? setGroupBy : !state.groupBy.includes(columnId);\n\n      if (resolvedGroupBy) {\n        return _extends({}, state, {\n          groupBy: [].concat(state.groupBy, [columnId])\n        });\n      }\n\n      return _extends({}, state, {\n        groupBy: state.groupBy.filter(function (d) {\n          return d !== columnId;\n        })\n      });\n    }\n  }\n\n  function visibleColumns(columns, _ref3) {\n    var groupBy = _ref3.instance.state.groupBy;\n    // Sort grouped columns to the start of the column list\n    // before the headers are built\n    var groupByColumns = groupBy.map(function (g) {\n      return columns.find(function (col) {\n        return col.id === g;\n      });\n    }).filter(Boolean);\n    var nonGroupByColumns = columns.filter(function (col) {\n      return !groupBy.includes(col.id);\n    });\n    columns = [].concat(groupByColumns, nonGroupByColumns);\n    columns.forEach(function (column) {\n      column.isGrouped = groupBy.includes(column.id);\n      column.groupedIndex = groupBy.indexOf(column.id);\n    });\n    return columns;\n  }\n\n  var defaultUserAggregations = {};\n\n  function useInstance$4(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        flatRows = instance.flatRows,\n        rowsById = instance.rowsById,\n        allColumns = instance.allColumns,\n        flatHeaders = instance.flatHeaders,\n        _instance$groupByFn = instance.groupByFn,\n        groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn,\n        manualGroupBy = instance.manualGroupBy,\n        _instance$aggregation = instance.aggregations,\n        userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation,\n        plugins = instance.plugins,\n        groupBy = instance.state.groupBy,\n        dispatch = instance.dispatch,\n        _instance$autoResetGr = instance.autoResetGroupBy,\n        autoResetGroupBy = _instance$autoResetGr === void 0 ? true : _instance$autoResetGr,\n        disableGroupBy = instance.disableGroupBy,\n        defaultCanGroupBy = instance.defaultCanGroupBy,\n        getHooks = instance.getHooks;\n    ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy');\n    var getInstance = useGetLatest(instance);\n    allColumns.forEach(function (column) {\n      var accessor = column.accessor,\n          defaultColumnGroupBy = column.defaultGroupBy,\n          columnDisableGroupBy = column.disableGroupBy;\n      column.canGroupBy = accessor ? getFirstDefined(column.canGroupBy, columnDisableGroupBy === true ? false : undefined, disableGroupBy === true ? false : undefined, true) : getFirstDefined(column.canGroupBy, defaultColumnGroupBy, defaultCanGroupBy, false);\n\n      if (column.canGroupBy) {\n        column.toggleGroupBy = function () {\n          return instance.toggleGroupBy(column.id);\n        };\n      }\n\n      column.Aggregated = column.Aggregated || column.Cell;\n    });\n    var toggleGroupBy = React.useCallback(function (columnId, value) {\n      dispatch({\n        type: actions.toggleGroupBy,\n        columnId: columnId,\n        value: value\n      });\n    }, [dispatch]);\n    var setGroupBy = React.useCallback(function (value) {\n      dispatch({\n        type: actions.setGroupBy,\n        value: value\n      });\n    }, [dispatch]);\n    flatHeaders.forEach(function (header) {\n      header.getGroupByToggleProps = makePropGetter(getHooks().getGroupByToggleProps, {\n        instance: getInstance(),\n        header: header\n      });\n    });\n\n    var _React$useMemo = React.useMemo(function () {\n      if (manualGroupBy || !groupBy.length) {\n        return [rows, flatRows, rowsById, emptyArray, emptyObject, flatRows, rowsById];\n      } // Ensure that the list of filtered columns exist\n\n\n      var existingGroupBy = groupBy.filter(function (g) {\n        return allColumns.find(function (col) {\n          return col.id === g;\n        });\n      }); // Find the columns that can or are aggregating\n      // Uses each column to aggregate rows into a single value\n\n      var aggregateRowsToValues = function aggregateRowsToValues(leafRows, groupedRows, depth) {\n        var values = {};\n        allColumns.forEach(function (column) {\n          // Don't aggregate columns that are in the groupBy\n          if (existingGroupBy.includes(column.id)) {\n            values[column.id] = groupedRows[0] ? groupedRows[0].values[column.id] : null;\n            return;\n          } // Aggregate the values\n\n\n          var aggregateFn = typeof column.aggregate === 'function' ? column.aggregate : userAggregations[column.aggregate] || aggregations[column.aggregate];\n\n          if (aggregateFn) {\n            // Get the columnValues to aggregate\n            var groupedValues = groupedRows.map(function (row) {\n              return row.values[column.id];\n            }); // Get the columnValues to aggregate\n\n            var leafValues = leafRows.map(function (row) {\n              var columnValue = row.values[column.id];\n\n              if (!depth && column.aggregateValue) {\n                var aggregateValueFn = typeof column.aggregateValue === 'function' ? column.aggregateValue : userAggregations[column.aggregateValue] || aggregations[column.aggregateValue];\n\n                if (!aggregateValueFn) {\n                  console.info({\n                    column: column\n                  });\n                  throw new Error(\"React Table: Invalid column.aggregateValue option for column listed above\");\n                }\n\n                columnValue = aggregateValueFn(columnValue, row, column);\n              }\n\n              return columnValue;\n            });\n            values[column.id] = aggregateFn(leafValues, groupedValues);\n          } else if (column.aggregate) {\n            console.info({\n              column: column\n            });\n            throw new Error(\"React Table: Invalid column.aggregate option for column listed above\");\n          } else {\n            values[column.id] = null;\n          }\n        });\n        return values;\n      };\n\n      var groupedFlatRows = [];\n      var groupedRowsById = {};\n      var onlyGroupedFlatRows = [];\n      var onlyGroupedRowsById = {};\n      var nonGroupedFlatRows = [];\n      var nonGroupedRowsById = {}; // Recursively group the data\n\n      var groupUpRecursively = function groupUpRecursively(rows, depth, parentId) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n\n        // This is the last level, just return the rows\n        if (depth === existingGroupBy.length) {\n          return rows.map(function (row) {\n            return _extends({}, row, {\n              depth: depth\n            });\n          });\n        }\n\n        var columnId = existingGroupBy[depth]; // Group the rows together for this level\n\n        var rowGroupsMap = groupByFn(rows, columnId); // Peform aggregations for each group\n\n        var aggregatedGroupedRows = Object.entries(rowGroupsMap).map(function (_ref4, index) {\n          var groupByVal = _ref4[0],\n              groupedRows = _ref4[1];\n          var id = columnId + \":\" + groupByVal;\n          id = parentId ? parentId + \">\" + id : id; // First, Recurse to group sub rows before aggregation\n\n          var subRows = groupUpRecursively(groupedRows, depth + 1, id); // Flatten the leaf rows of the rows in this group\n\n          var leafRows = depth ? flattenBy(groupedRows, 'leafRows') : groupedRows;\n          var values = aggregateRowsToValues(leafRows, groupedRows, depth);\n          var row = {\n            id: id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal: groupByVal,\n            values: values,\n            subRows: subRows,\n            leafRows: leafRows,\n            depth: depth,\n            index: index\n          };\n          subRows.forEach(function (subRow) {\n            groupedFlatRows.push(subRow);\n            groupedRowsById[subRow.id] = subRow;\n\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow);\n              onlyGroupedRowsById[subRow.id] = subRow;\n            } else {\n              nonGroupedFlatRows.push(subRow);\n              nonGroupedRowsById[subRow.id] = subRow;\n            }\n          });\n          return row;\n        });\n        return aggregatedGroupedRows;\n      };\n\n      var groupedRows = groupUpRecursively(rows);\n      groupedRows.forEach(function (subRow) {\n        groupedFlatRows.push(subRow);\n        groupedRowsById[subRow.id] = subRow;\n\n        if (subRow.isGrouped) {\n          onlyGroupedFlatRows.push(subRow);\n          onlyGroupedRowsById[subRow.id] = subRow;\n        } else {\n          nonGroupedFlatRows.push(subRow);\n          nonGroupedRowsById[subRow.id] = subRow;\n        }\n      }); // Assign the new data\n\n      return [groupedRows, groupedFlatRows, groupedRowsById, onlyGroupedFlatRows, onlyGroupedRowsById, nonGroupedFlatRows, nonGroupedRowsById];\n    }, [manualGroupBy, groupBy, rows, flatRows, rowsById, allColumns, userAggregations, groupByFn]),\n        groupedRows = _React$useMemo[0],\n        groupedFlatRows = _React$useMemo[1],\n        groupedRowsById = _React$useMemo[2],\n        onlyGroupedFlatRows = _React$useMemo[3],\n        onlyGroupedRowsById = _React$useMemo[4],\n        nonGroupedFlatRows = _React$useMemo[5],\n        nonGroupedRowsById = _React$useMemo[6];\n\n    var getAutoResetGroupBy = useGetLatest(autoResetGroupBy);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetGroupBy()) {\n        dispatch({\n          type: actions.resetGroupBy\n        });\n      }\n    }, [dispatch, manualGroupBy ? null : data]);\n    Object.assign(instance, {\n      preGroupedRows: rows,\n      preGroupedFlatRow: flatRows,\n      preGroupedRowsById: rowsById,\n      groupedRows: groupedRows,\n      groupedFlatRows: groupedFlatRows,\n      groupedRowsById: groupedRowsById,\n      onlyGroupedFlatRows: onlyGroupedFlatRows,\n      onlyGroupedRowsById: onlyGroupedRowsById,\n      nonGroupedFlatRows: nonGroupedFlatRows,\n      nonGroupedRowsById: nonGroupedRowsById,\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById,\n      toggleGroupBy: toggleGroupBy,\n      setGroupBy: setGroupBy\n    });\n  }\n\n  function prepareRow$1(row) {\n    row.allCells.forEach(function (cell) {\n      var _row$subRows;\n\n      // Grouped cells are in the groupBy and the pivot cell for the row\n      cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID; // Placeholder cells are any columns in the groupBy that are not grouped\n\n      cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped; // Aggregated cells are not grouped, not repeated, but still have subRows\n\n      cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && ((_row$subRows = row.subRows) == null ? void 0 : _row$subRows.length);\n    });\n  }\n\n  function defaultGroupByFn(rows, columnId) {\n    return rows.reduce(function (prev, row, i) {\n      // TODO: Might want to implement a key serializer here so\n      // irregular column values can still be grouped if needed?\n      var resKey = \"\" + row.values[columnId];\n      prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];\n      prev[resKey].push(row);\n      return prev;\n    }, {});\n  }\n\n  var reSplitAlphaNumeric = /([0-9]+)/gm; // Mixed sorting is slow, but very inclusive of many edge cases.\n  // It handles numbers, mixed alphanumeric combinations, and even\n  // null, undefined, and Infinity\n\n  var alphanumeric = function alphanumeric(rowA, rowB, columnId) {\n    var _getRowValuesByColumn = getRowValuesByColumnID(rowA, rowB, columnId),\n        a = _getRowValuesByColumn[0],\n        b = _getRowValuesByColumn[1]; // Force to strings (or \"\" for unsupported types)\n\n\n    a = toString(a);\n    b = toString(b); // Split on number groups, but keep the delimiter\n    // Then remove falsey split values\n\n    a = a.split(reSplitAlphaNumeric).filter(Boolean);\n    b = b.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n    while (a.length && b.length) {\n      var aa = a.shift();\n      var bb = b.shift();\n      var an = parseInt(aa, 10);\n      var bn = parseInt(bb, 10);\n      var combo = [an, bn].sort(); // Both are string\n\n      if (isNaN(combo[0])) {\n        if (aa > bb) {\n          return 1;\n        }\n\n        if (bb > aa) {\n          return -1;\n        }\n\n        continue;\n      } // One is a string, one is a number\n\n\n      if (isNaN(combo[1])) {\n        return isNaN(an) ? -1 : 1;\n      } // Both are numbers\n\n\n      if (an > bn) {\n        return 1;\n      }\n\n      if (bn > an) {\n        return -1;\n      }\n    }\n\n    return a.length - b.length;\n  };\n  function datetime(rowA, rowB, columnId) {\n    var _getRowValuesByColumn2 = getRowValuesByColumnID(rowA, rowB, columnId),\n        a = _getRowValuesByColumn2[0],\n        b = _getRowValuesByColumn2[1];\n\n    a = a.getTime();\n    b = b.getTime();\n    return compareBasic(a, b);\n  }\n  function basic(rowA, rowB, columnId) {\n    var _getRowValuesByColumn3 = getRowValuesByColumnID(rowA, rowB, columnId),\n        a = _getRowValuesByColumn3[0],\n        b = _getRowValuesByColumn3[1];\n\n    return compareBasic(a, b);\n  }\n  function string(rowA, rowB, columnId) {\n    var _getRowValuesByColumn4 = getRowValuesByColumnID(rowA, rowB, columnId),\n        a = _getRowValuesByColumn4[0],\n        b = _getRowValuesByColumn4[1];\n\n    a = a.split('').filter(Boolean);\n    b = b.split('').filter(Boolean);\n\n    while (a.length && b.length) {\n      var aa = a.shift();\n      var bb = b.shift();\n      var alower = aa.toLowerCase();\n      var blower = bb.toLowerCase(); // Case insensitive comparison until characters match\n\n      if (alower > blower) {\n        return 1;\n      }\n\n      if (blower > alower) {\n        return -1;\n      } // If lowercase characters are identical\n\n\n      if (aa > bb) {\n        return 1;\n      }\n\n      if (bb > aa) {\n        return -1;\n      }\n\n      continue;\n    }\n\n    return a.length - b.length;\n  }\n  function number(rowA, rowB, columnId) {\n    var _getRowValuesByColumn5 = getRowValuesByColumnID(rowA, rowB, columnId),\n        a = _getRowValuesByColumn5[0],\n        b = _getRowValuesByColumn5[1];\n\n    var replaceNonNumeric = /[^0-9.]/gi;\n    a = Number(String(a).replace(replaceNonNumeric, ''));\n    b = Number(String(b).replace(replaceNonNumeric, ''));\n    return compareBasic(a, b);\n  } // Utils\n\n  function compareBasic(a, b) {\n    return a === b ? 0 : a > b ? 1 : -1;\n  }\n\n  function getRowValuesByColumnID(row1, row2, columnId) {\n    return [row1.values[columnId], row2.values[columnId]];\n  }\n\n  function toString(a) {\n    if (typeof a === 'number') {\n      if (isNaN(a) || a === Infinity || a === -Infinity) {\n        return '';\n      }\n\n      return String(a);\n    }\n\n    if (typeof a === 'string') {\n      return a;\n    }\n\n    return '';\n  }\n\n  var sortTypes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    alphanumeric: alphanumeric,\n    datetime: datetime,\n    basic: basic,\n    string: string,\n    number: number\n  });\n\n  actions.resetSortBy = 'resetSortBy';\n  actions.setSortBy = 'setSortBy';\n  actions.toggleSortBy = 'toggleSortBy';\n  actions.clearSortBy = 'clearSortBy';\n  defaultColumn.sortType = 'alphanumeric';\n  defaultColumn.sortDescFirst = false;\n  var useSortBy = function useSortBy(hooks) {\n    hooks.getSortByToggleProps = [defaultGetSortByToggleProps];\n    hooks.stateReducers.push(reducer$5);\n    hooks.useInstance.push(useInstance$5);\n  };\n  useSortBy.pluginName = 'useSortBy';\n\n  var defaultGetSortByToggleProps = function defaultGetSortByToggleProps(props, _ref) {\n    var instance = _ref.instance,\n        column = _ref.column;\n    var _instance$isMultiSort = instance.isMultiSortEvent,\n        isMultiSortEvent = _instance$isMultiSort === void 0 ? function (e) {\n      return e.shiftKey;\n    } : _instance$isMultiSort;\n    return [props, {\n      onClick: column.canSort ? function (e) {\n        e.persist();\n        column.toggleSortBy(undefined, !instance.disableMultiSort && isMultiSortEvent(e));\n      } : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined\n    }];\n  }; // Reducer\n\n\n  function reducer$5(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        sortBy: []\n      }, state);\n    }\n\n    if (action.type === actions.resetSortBy) {\n      return _extends({}, state, {\n        sortBy: instance.initialState.sortBy || []\n      });\n    }\n\n    if (action.type === actions.clearSortBy) {\n      var sortBy = state.sortBy;\n      var newSortBy = sortBy.filter(function (d) {\n        return d.id !== action.columnId;\n      });\n      return _extends({}, state, {\n        sortBy: newSortBy\n      });\n    }\n\n    if (action.type === actions.setSortBy) {\n      var _sortBy = action.sortBy;\n      return _extends({}, state, {\n        sortBy: _sortBy\n      });\n    }\n\n    if (action.type === actions.toggleSortBy) {\n      var columnId = action.columnId,\n          desc = action.desc,\n          multi = action.multi;\n      var allColumns = instance.allColumns,\n          disableMultiSort = instance.disableMultiSort,\n          disableSortRemove = instance.disableSortRemove,\n          disableMultiRemove = instance.disableMultiRemove,\n          _instance$maxMultiSor = instance.maxMultiSortColCount,\n          maxMultiSortColCount = _instance$maxMultiSor === void 0 ? Number.MAX_SAFE_INTEGER : _instance$maxMultiSor;\n      var _sortBy2 = state.sortBy; // Find the column for this columnId\n\n      var column = allColumns.find(function (d) {\n        return d.id === columnId;\n      });\n      var sortDescFirst = column.sortDescFirst; // Find any existing sortBy for this column\n\n      var existingSortBy = _sortBy2.find(function (d) {\n        return d.id === columnId;\n      });\n\n      var existingIndex = _sortBy2.findIndex(function (d) {\n        return d.id === columnId;\n      });\n\n      var hasDescDefined = typeof desc !== 'undefined' && desc !== null;\n      var _newSortBy = []; // What should we do with this sort action?\n\n      var sortAction;\n\n      if (!disableMultiSort && multi) {\n        if (existingSortBy) {\n          sortAction = 'toggle';\n        } else {\n          sortAction = 'add';\n        }\n      } else {\n        // Normal mode\n        if (existingIndex !== _sortBy2.length - 1 || _sortBy2.length !== 1) {\n          sortAction = 'replace';\n        } else if (existingSortBy) {\n          sortAction = 'toggle';\n        } else {\n          sortAction = 'replace';\n        }\n      } // Handle toggle states that will remove the sortBy\n\n\n      if (sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && ( // Must not be setting desc\n      multi ? !disableMultiRemove : true) && ( // If multi, don't allow if disableMultiRemove\n      existingSortBy && // Finally, detect if it should indeed be removed\n      existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {\n        sortAction = 'remove';\n      }\n\n      if (sortAction === 'replace') {\n        _newSortBy = [{\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst\n        }];\n      } else if (sortAction === 'add') {\n        _newSortBy = [].concat(_sortBy2, [{\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst\n        }]); // Take latest n columns\n\n        _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);\n      } else if (sortAction === 'toggle') {\n        // This flips (or sets) the\n        _newSortBy = _sortBy2.map(function (d) {\n          if (d.id === columnId) {\n            return _extends({}, d, {\n              desc: hasDescDefined ? desc : !existingSortBy.desc\n            });\n          }\n\n          return d;\n        });\n      } else if (sortAction === 'remove') {\n        _newSortBy = _sortBy2.filter(function (d) {\n          return d.id !== columnId;\n        });\n      }\n\n      return _extends({}, state, {\n        sortBy: _newSortBy\n      });\n    }\n  }\n\n  function useInstance$5(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        flatRows = instance.flatRows,\n        allColumns = instance.allColumns,\n        _instance$orderByFn = instance.orderByFn,\n        orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn,\n        userSortTypes = instance.sortTypes,\n        manualSortBy = instance.manualSortBy,\n        defaultCanSort = instance.defaultCanSort,\n        disableSortBy = instance.disableSortBy,\n        flatHeaders = instance.flatHeaders,\n        sortBy = instance.state.sortBy,\n        dispatch = instance.dispatch,\n        plugins = instance.plugins,\n        getHooks = instance.getHooks,\n        _instance$autoResetSo = instance.autoResetSortBy,\n        autoResetSortBy = _instance$autoResetSo === void 0 ? true : _instance$autoResetSo;\n    ensurePluginOrder(plugins, ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'], 'useSortBy');\n    var setSortBy = React.useCallback(function (sortBy) {\n      dispatch({\n        type: actions.setSortBy,\n        sortBy: sortBy\n      });\n    }, [dispatch]); // Updates sorting based on a columnId, desc flag and multi flag\n\n    var toggleSortBy = React.useCallback(function (columnId, desc, multi) {\n      dispatch({\n        type: actions.toggleSortBy,\n        columnId: columnId,\n        desc: desc,\n        multi: multi\n      });\n    }, [dispatch]); // use reference to avoid memory leak in #1608\n\n    var getInstance = useGetLatest(instance); // Add the getSortByToggleProps method to columns and headers\n\n    flatHeaders.forEach(function (column) {\n      var accessor = column.accessor,\n          defaultColumnCanSort = column.canSort,\n          columnDisableSortBy = column.disableSortBy,\n          id = column.id;\n      var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : undefined, disableSortBy === true ? false : undefined, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);\n      column.canSort = canSort;\n\n      if (column.canSort) {\n        column.toggleSortBy = function (desc, multi) {\n          return toggleSortBy(column.id, desc, multi);\n        };\n\n        column.clearSortBy = function () {\n          dispatch({\n            type: actions.clearSortBy,\n            columnId: column.id\n          });\n        };\n      }\n\n      column.getSortByToggleProps = makePropGetter(getHooks().getSortByToggleProps, {\n        instance: getInstance(),\n        column: column\n      });\n      var columnSort = sortBy.find(function (d) {\n        return d.id === id;\n      });\n      column.isSorted = !!columnSort;\n      column.sortedIndex = sortBy.findIndex(function (d) {\n        return d.id === id;\n      });\n      column.isSortedDesc = column.isSorted ? columnSort.desc : undefined;\n    });\n\n    var _React$useMemo = React.useMemo(function () {\n      if (manualSortBy || !sortBy.length) {\n        return [rows, flatRows];\n      }\n\n      var sortedFlatRows = []; // Filter out sortBys that correspond to non existing columns\n\n      var availableSortBy = sortBy.filter(function (sort) {\n        return allColumns.find(function (col) {\n          return col.id === sort.id;\n        });\n      });\n\n      var sortData = function sortData(rows) {\n        // Use the orderByFn to compose multiple sortBy's together.\n        // This will also perform a stable sorting using the row index\n        // if needed.\n        var sortedData = orderByFn(rows, availableSortBy.map(function (sort) {\n          // Support custom sorting methods for each column\n          var column = allColumns.find(function (d) {\n            return d.id === sort.id;\n          });\n\n          if (!column) {\n            throw new Error(\"React-Table: Could not find a column with id: \" + sort.id + \" while sorting\");\n          }\n\n          var sortType = column.sortType; // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n\n          var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];\n\n          if (!sortMethod) {\n            throw new Error(\"React-Table: Could not find a valid sortType of '\" + sortType + \"' for column '\" + sort.id + \"'.\");\n          } // Return the correct sortFn.\n          // This function should always return in ascending order\n\n\n          return function (a, b) {\n            return sortMethod(a, b, sort.id, sort.desc);\n          };\n        }), // Map the directions\n        availableSortBy.map(function (sort) {\n          // Detect and use the sortInverted option\n          var column = allColumns.find(function (d) {\n            return d.id === sort.id;\n          });\n\n          if (column && column.sortInverted) {\n            return sort.desc;\n          }\n\n          return !sort.desc;\n        })); // If there are sub-rows, sort them\n\n        sortedData.forEach(function (row) {\n          sortedFlatRows.push(row);\n\n          if (!row.subRows || row.subRows.length === 0) {\n            return;\n          }\n\n          row.subRows = sortData(row.subRows);\n        });\n        return sortedData;\n      };\n\n      return [sortData(rows), sortedFlatRows];\n    }, [manualSortBy, sortBy, rows, flatRows, allColumns, orderByFn, userSortTypes]),\n        sortedRows = _React$useMemo[0],\n        sortedFlatRows = _React$useMemo[1];\n\n    var getAutoResetSortBy = useGetLatest(autoResetSortBy);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetSortBy()) {\n        dispatch({\n          type: actions.resetSortBy\n        });\n      }\n    }, [manualSortBy ? null : data]);\n    Object.assign(instance, {\n      preSortedRows: rows,\n      preSortedFlatRows: flatRows,\n      sortedRows: sortedRows,\n      sortedFlatRows: sortedFlatRows,\n      rows: sortedRows,\n      flatRows: sortedFlatRows,\n      setSortBy: setSortBy,\n      toggleSortBy: toggleSortBy\n    });\n  }\n\n  function defaultOrderByFn(arr, funcs, dirs) {\n    return [].concat(arr).sort(function (rowA, rowB) {\n      for (var i = 0; i < funcs.length; i += 1) {\n        var sortFn = funcs[i];\n        var desc = dirs[i] === false || dirs[i] === 'desc';\n        var sortInt = sortFn(rowA, rowB);\n\n        if (sortInt !== 0) {\n          return desc ? -sortInt : sortInt;\n        }\n      }\n\n      return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;\n    });\n  }\n\n  var pluginName = 'usePagination'; // Actions\n\n  actions.resetPage = 'resetPage';\n  actions.gotoPage = 'gotoPage';\n  actions.setPageSize = 'setPageSize';\n  var usePagination = function usePagination(hooks) {\n    hooks.stateReducers.push(reducer$6);\n    hooks.useInstance.push(useInstance$6);\n  };\n  usePagination.pluginName = pluginName;\n\n  function reducer$6(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        pageSize: 10,\n        pageIndex: 0\n      }, state);\n    }\n\n    if (action.type === actions.resetPage) {\n      return _extends({}, state, {\n        pageIndex: instance.initialState.pageIndex || 0\n      });\n    }\n\n    if (action.type === actions.gotoPage) {\n      var pageCount = instance.pageCount,\n          page = instance.page;\n      var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);\n      var canNavigate = false;\n\n      if (newPageIndex > state.pageIndex) {\n        // next page\n        canNavigate = pageCount === -1 ? page.length >= state.pageSize : newPageIndex < pageCount;\n      } else if (newPageIndex < state.pageIndex) {\n        // prev page\n        canNavigate = newPageIndex > -1;\n      }\n\n      if (!canNavigate) {\n        return state;\n      }\n\n      return _extends({}, state, {\n        pageIndex: newPageIndex\n      });\n    }\n\n    if (action.type === actions.setPageSize) {\n      var pageSize = action.pageSize;\n      var topRowIndex = state.pageSize * state.pageIndex;\n      var pageIndex = Math.floor(topRowIndex / pageSize);\n      return _extends({}, state, {\n        pageIndex: pageIndex,\n        pageSize: pageSize\n      });\n    }\n  }\n\n  function useInstance$6(instance) {\n    var rows = instance.rows,\n        _instance$autoResetPa = instance.autoResetPage,\n        autoResetPage = _instance$autoResetPa === void 0 ? true : _instance$autoResetPa,\n        _instance$manualExpan = instance.manualExpandedKey,\n        manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n        plugins = instance.plugins,\n        userPageCount = instance.pageCount,\n        _instance$paginateExp = instance.paginateExpandedRows,\n        paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n        _instance$expandSubRo = instance.expandSubRows,\n        expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n        _instance$state = instance.state,\n        pageSize = _instance$state.pageSize,\n        pageIndex = _instance$state.pageIndex,\n        expanded = _instance$state.expanded,\n        globalFilter = _instance$state.globalFilter,\n        filters = _instance$state.filters,\n        groupBy = _instance$state.groupBy,\n        sortBy = _instance$state.sortBy,\n        dispatch = instance.dispatch,\n        data = instance.data,\n        manualPagination = instance.manualPagination;\n    ensurePluginOrder(plugins, ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'], 'usePagination');\n    var getAutoResetPage = useGetLatest(autoResetPage);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetPage()) {\n        dispatch({\n          type: actions.resetPage\n        });\n      }\n    }, [dispatch, manualPagination ? null : data, globalFilter, filters, groupBy, sortBy]);\n    var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);\n    var pageOptions = React.useMemo(function () {\n      return pageCount > 0 ? [].concat(new Array(pageCount)).fill(null).map(function (d, i) {\n        return i;\n      }) : [];\n    }, [pageCount]);\n    var page = React.useMemo(function () {\n      var page;\n\n      if (manualPagination) {\n        page = rows;\n      } else {\n        var pageStart = pageSize * pageIndex;\n        var pageEnd = pageStart + pageSize;\n        page = rows.slice(pageStart, pageEnd);\n      }\n\n      if (paginateExpandedRows) {\n        return page;\n      }\n\n      return expandRows(page, {\n        manualExpandedKey: manualExpandedKey,\n        expanded: expanded,\n        expandSubRows: expandSubRows\n      });\n    }, [expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);\n    var canPreviousPage = pageIndex > 0;\n    var canNextPage = pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1;\n    var gotoPage = React.useCallback(function (pageIndex) {\n      dispatch({\n        type: actions.gotoPage,\n        pageIndex: pageIndex\n      });\n    }, [dispatch]);\n    var previousPage = React.useCallback(function () {\n      return gotoPage(function (old) {\n        return old - 1;\n      });\n    }, [gotoPage]);\n    var nextPage = React.useCallback(function () {\n      return gotoPage(function (old) {\n        return old + 1;\n      });\n    }, [gotoPage]);\n    var setPageSize = React.useCallback(function (pageSize) {\n      dispatch({\n        type: actions.setPageSize,\n        pageSize: pageSize\n      });\n    }, [dispatch]);\n    Object.assign(instance, {\n      pageOptions: pageOptions,\n      pageCount: pageCount,\n      page: page,\n      canPreviousPage: canPreviousPage,\n      canNextPage: canNextPage,\n      gotoPage: gotoPage,\n      previousPage: previousPage,\n      nextPage: nextPage,\n      setPageSize: setPageSize\n    });\n  }\n\n  actions.resetPivot = 'resetPivot';\n  actions.togglePivot = 'togglePivot';\n  var _UNSTABLE_usePivotColumns = function _UNSTABLE_usePivotColumns(hooks) {\n    hooks.getPivotToggleProps = [defaultGetPivotToggleProps];\n    hooks.stateReducers.push(reducer$7);\n    hooks.useInstanceAfterData.push(useInstanceAfterData);\n    hooks.allColumns.push(allColumns);\n    hooks.accessValue.push(accessValue);\n    hooks.materializedColumns.push(materializedColumns);\n    hooks.materializedColumnsDeps.push(materializedColumnsDeps);\n    hooks.visibleColumns.push(visibleColumns$1);\n    hooks.visibleColumnsDeps.push(visibleColumnsDeps);\n    hooks.useInstance.push(useInstance$7);\n    hooks.prepareRow.push(prepareRow$2);\n  };\n  _UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns';\n  var defaultPivotColumns = [];\n\n  var defaultGetPivotToggleProps = function defaultGetPivotToggleProps(props, _ref) {\n    var header = _ref.header;\n    return [props, {\n      onClick: header.canPivot ? function (e) {\n        e.persist();\n        header.togglePivot();\n      } : undefined,\n      style: {\n        cursor: header.canPivot ? 'pointer' : undefined\n      },\n      title: 'Toggle Pivot'\n    }];\n  }; // Reducer\n\n\n  function reducer$7(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        pivotColumns: defaultPivotColumns\n      }, state);\n    }\n\n    if (action.type === actions.resetPivot) {\n      return _extends({}, state, {\n        pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns\n      });\n    }\n\n    if (action.type === actions.togglePivot) {\n      var columnId = action.columnId,\n          setPivot = action.value;\n      var resolvedPivot = typeof setPivot !== 'undefined' ? setPivot : !state.pivotColumns.includes(columnId);\n\n      if (resolvedPivot) {\n        return _extends({}, state, {\n          pivotColumns: [].concat(state.pivotColumns, [columnId])\n        });\n      }\n\n      return _extends({}, state, {\n        pivotColumns: state.pivotColumns.filter(function (d) {\n          return d !== columnId;\n        })\n      });\n    }\n  }\n\n  function useInstanceAfterData(instance) {\n    instance.allColumns.forEach(function (column) {\n      column.isPivotSource = instance.state.pivotColumns.includes(column.id);\n    });\n  }\n\n  function allColumns(columns, _ref2) {\n    var instance = _ref2.instance;\n    columns.forEach(function (column) {\n      column.isPivotSource = instance.state.pivotColumns.includes(column.id);\n      column.uniqueValues = new Set();\n    });\n    return columns;\n  }\n\n  function accessValue(value, _ref3) {\n    var column = _ref3.column;\n\n    if (column.uniqueValues && typeof value !== 'undefined') {\n      column.uniqueValues.add(value);\n    }\n\n    return value;\n  }\n\n  function materializedColumns(materialized, _ref4) {\n    var instance = _ref4.instance;\n    var allColumns = instance.allColumns,\n        state = instance.state;\n\n    if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n      return materialized;\n    }\n\n    var pivotColumns = state.pivotColumns.map(function (id) {\n      return allColumns.find(function (d) {\n        return d.id === id;\n      });\n    }).filter(Boolean);\n    var sourceColumns = allColumns.filter(function (d) {\n      return !d.isPivotSource && !state.groupBy.includes(d.id) && !state.pivotColumns.includes(d.id);\n    });\n\n    var buildPivotColumns = function buildPivotColumns(depth, parent, pivotFilters) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n\n      if (pivotFilters === void 0) {\n        pivotFilters = [];\n      }\n\n      var pivotColumn = pivotColumns[depth];\n\n      if (!pivotColumn) {\n        return sourceColumns.map(function (sourceColumn) {\n          // TODO: We could offer support here for renesting pivoted\n          // columns inside copies of their header groups. For now,\n          // that seems like it would be (1) overkill on nesting, considering\n          // you already get nesting for every pivot level and (2)\n          // really hard. :)\n          return _extends({}, sourceColumn, {\n            canPivot: false,\n            isPivoted: true,\n            parent: parent,\n            depth: depth,\n            id: \"\" + (parent ? parent.id + \".\" + sourceColumn.id : sourceColumn.id),\n            accessor: function accessor(originalRow, i, row) {\n              if (pivotFilters.every(function (filter) {\n                return filter(row);\n              })) {\n                return row.values[sourceColumn.id];\n              }\n            }\n          });\n        });\n      }\n\n      var uniqueValues = Array.from(pivotColumn.uniqueValues).sort();\n      return uniqueValues.map(function (uniqueValue) {\n        var columnGroup = _extends({}, pivotColumn, {\n          Header: pivotColumn.PivotHeader || typeof pivotColumn.header === 'string' ? pivotColumn.Header + \": \" + uniqueValue : uniqueValue,\n          isPivotGroup: true,\n          parent: parent,\n          depth: depth,\n          id: parent ? parent.id + \".\" + pivotColumn.id + \".\" + uniqueValue : pivotColumn.id + \".\" + uniqueValue,\n          pivotValue: uniqueValue\n        });\n\n        columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [].concat(pivotFilters, [function (row) {\n          return row.values[pivotColumn.id] === uniqueValue;\n        }]));\n        return columnGroup;\n      });\n    };\n\n    var newMaterialized = flattenColumns(buildPivotColumns());\n    return [].concat(materialized, newMaterialized);\n  }\n\n  function materializedColumnsDeps(deps, _ref5) {\n    var _ref5$instance$state = _ref5.instance.state,\n        pivotColumns = _ref5$instance$state.pivotColumns,\n        groupBy = _ref5$instance$state.groupBy;\n    return [].concat(deps, [pivotColumns, groupBy]);\n  }\n\n  function visibleColumns$1(visibleColumns, _ref6) {\n    var state = _ref6.instance.state;\n    visibleColumns = visibleColumns.filter(function (d) {\n      return !d.isPivotSource;\n    });\n\n    if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n      visibleColumns = visibleColumns.filter(function (column) {\n        return column.isGrouped || column.isPivoted;\n      });\n    }\n\n    return visibleColumns;\n  }\n\n  function visibleColumnsDeps(deps, _ref7) {\n    var instance = _ref7.instance;\n    return [].concat(deps, [instance.state.pivotColumns, instance.state.groupBy]);\n  }\n\n  function useInstance$7(instance) {\n    var columns = instance.columns,\n        allColumns = instance.allColumns,\n        flatHeaders = instance.flatHeaders,\n        getHooks = instance.getHooks,\n        plugins = instance.plugins,\n        dispatch = instance.dispatch,\n        _instance$autoResetPi = instance.autoResetPivot,\n        autoResetPivot = _instance$autoResetPi === void 0 ? true : _instance$autoResetPi,\n        manaulPivot = instance.manaulPivot,\n        disablePivot = instance.disablePivot,\n        defaultCanPivot = instance.defaultCanPivot;\n    ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns');\n    var getInstance = useGetLatest(instance);\n    allColumns.forEach(function (column) {\n      var accessor = column.accessor,\n          defaultColumnPivot = column.defaultPivot,\n          columnDisablePivot = column.disablePivot;\n      column.canPivot = accessor ? getFirstDefined(column.canPivot, columnDisablePivot === true ? false : undefined, disablePivot === true ? false : undefined, true) : getFirstDefined(column.canPivot, defaultColumnPivot, defaultCanPivot, false);\n\n      if (column.canPivot) {\n        column.togglePivot = function () {\n          return instance.togglePivot(column.id);\n        };\n      }\n\n      column.Aggregated = column.Aggregated || column.Cell;\n    });\n\n    var togglePivot = function togglePivot(columnId, value) {\n      dispatch({\n        type: actions.togglePivot,\n        columnId: columnId,\n        value: value\n      });\n    };\n\n    flatHeaders.forEach(function (header) {\n      header.getPivotToggleProps = makePropGetter(getHooks().getPivotToggleProps, {\n        instance: getInstance(),\n        header: header\n      });\n    });\n    var getAutoResetPivot = useGetLatest(autoResetPivot);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetPivot()) {\n        dispatch({\n          type: actions.resetPivot\n        });\n      }\n    }, [dispatch, manaulPivot ? null : columns]);\n    Object.assign(instance, {\n      togglePivot: togglePivot\n    });\n  }\n\n  function prepareRow$2(row) {\n    row.allCells.forEach(function (cell) {\n      // Grouped cells are in the pivotColumns and the pivot cell for the row\n      cell.isPivoted = cell.column.isPivoted;\n    });\n  }\n\n  var pluginName$1 = 'useRowSelect'; // Actions\n\n  actions.resetSelectedRows = 'resetSelectedRows';\n  actions.toggleAllRowsSelected = 'toggleAllRowsSelected';\n  actions.toggleRowSelected = 'toggleRowSelected';\n  actions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected';\n  var useRowSelect = function useRowSelect(hooks) {\n    hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];\n    hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];\n    hooks.getToggleAllPageRowsSelectedProps = [defaultGetToggleAllPageRowsSelectedProps];\n    hooks.stateReducers.push(reducer$8);\n    hooks.useInstance.push(useInstance$8);\n    hooks.prepareRow.push(prepareRow$3);\n  };\n  useRowSelect.pluginName = pluginName$1;\n\n  var defaultGetToggleRowSelectedProps = function defaultGetToggleRowSelectedProps(props, _ref) {\n    var instance = _ref.instance,\n        row = _ref.row;\n    var _instance$manualRowSe = instance.manualRowSelectedKey,\n        manualRowSelectedKey = _instance$manualRowSe === void 0 ? 'isSelected' : _instance$manualRowSe;\n    var checked = false;\n\n    if (row.original && row.original[manualRowSelectedKey]) {\n      checked = true;\n    } else {\n      checked = row.isSelected;\n    }\n\n    return [props, {\n      onChange: function onChange(e) {\n        row.toggleRowSelected(e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected\n    }];\n  };\n\n  var defaultGetToggleAllRowsSelectedProps = function defaultGetToggleAllRowsSelectedProps(props, _ref2) {\n    var instance = _ref2.instance;\n    return [props, {\n      onChange: function onChange(e) {\n        instance.toggleAllRowsSelected(e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: instance.isAllRowsSelected,\n      title: 'Toggle All Rows Selected',\n      indeterminate: Boolean(!instance.isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)\n    }];\n  };\n\n  var defaultGetToggleAllPageRowsSelectedProps = function defaultGetToggleAllPageRowsSelectedProps(props, _ref3) {\n    var instance = _ref3.instance;\n    return [props, {\n      onChange: function onChange(e) {\n        instance.toggleAllPageRowsSelected(e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: instance.isAllPageRowsSelected,\n      title: 'Toggle All Current Page Rows Selected',\n      indeterminate: Boolean(!instance.isAllPageRowsSelected && instance.page.some(function (_ref4) {\n        var id = _ref4.id;\n        return instance.state.selectedRowIds[id];\n      }))\n    }];\n  }; // eslint-disable-next-line max-params\n\n\n  function reducer$8(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        selectedRowIds: {}\n      }, state);\n    }\n\n    if (action.type === actions.resetSelectedRows) {\n      return _extends({}, state, {\n        selectedRowIds: instance.initialState.selectedRowIds || {}\n      });\n    }\n\n    if (action.type === actions.toggleAllRowsSelected) {\n      var setSelected = action.value;\n      var isAllRowsSelected = instance.isAllRowsSelected,\n          rowsById = instance.rowsById,\n          _instance$nonGroupedR = instance.nonGroupedRowsById,\n          nonGroupedRowsById = _instance$nonGroupedR === void 0 ? rowsById : _instance$nonGroupedR;\n      var selectAll = typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected; // Only remove/add the rows that are visible on the screen\n      //  Leave all the other rows that are selected alone.\n\n      var selectedRowIds = Object.assign({}, state.selectedRowIds);\n\n      if (selectAll) {\n        Object.keys(nonGroupedRowsById).forEach(function (rowId) {\n          selectedRowIds[rowId] = true;\n        });\n      } else {\n        Object.keys(nonGroupedRowsById).forEach(function (rowId) {\n          delete selectedRowIds[rowId];\n        });\n      }\n\n      return _extends({}, state, {\n        selectedRowIds: selectedRowIds\n      });\n    }\n\n    if (action.type === actions.toggleRowSelected) {\n      var id = action.id,\n          _setSelected = action.value;\n      var _rowsById = instance.rowsById,\n          _instance$selectSubRo = instance.selectSubRows,\n          selectSubRows = _instance$selectSubRo === void 0 ? true : _instance$selectSubRo,\n          getSubRows = instance.getSubRows;\n      var isSelected = state.selectedRowIds[id];\n      var shouldExist = typeof _setSelected !== 'undefined' ? _setSelected : !isSelected;\n\n      if (isSelected === shouldExist) {\n        return state;\n      }\n\n      var newSelectedRowIds = _extends({}, state.selectedRowIds);\n\n      var handleRowById = function handleRowById(id) {\n        var row = _rowsById[id];\n\n        if (row) {\n          if (!row.isGrouped) {\n            if (shouldExist) {\n              newSelectedRowIds[id] = true;\n            } else {\n              delete newSelectedRowIds[id];\n            }\n          }\n\n          if (selectSubRows && getSubRows(row)) {\n            return getSubRows(row).forEach(function (row) {\n              return handleRowById(row.id);\n            });\n          }\n        }\n      };\n\n      handleRowById(id);\n      return _extends({}, state, {\n        selectedRowIds: newSelectedRowIds\n      });\n    }\n\n    if (action.type === actions.toggleAllPageRowsSelected) {\n      var _setSelected2 = action.value;\n\n      var page = instance.page,\n          _rowsById2 = instance.rowsById,\n          _instance$selectSubRo2 = instance.selectSubRows,\n          _selectSubRows = _instance$selectSubRo2 === void 0 ? true : _instance$selectSubRo2,\n          isAllPageRowsSelected = instance.isAllPageRowsSelected,\n          _getSubRows = instance.getSubRows;\n\n      var _selectAll = typeof _setSelected2 !== 'undefined' ? _setSelected2 : !isAllPageRowsSelected;\n\n      var _newSelectedRowIds = _extends({}, state.selectedRowIds);\n\n      var _handleRowById = function _handleRowById(id) {\n        var row = _rowsById2[id];\n\n        if (!row.isGrouped) {\n          if (_selectAll) {\n            _newSelectedRowIds[id] = true;\n          } else {\n            delete _newSelectedRowIds[id];\n          }\n        }\n\n        if (_selectSubRows && _getSubRows(row)) {\n          return _getSubRows(row).forEach(function (row) {\n            return _handleRowById(row.id);\n          });\n        }\n      };\n\n      page.forEach(function (row) {\n        return _handleRowById(row.id);\n      });\n      return _extends({}, state, {\n        selectedRowIds: _newSelectedRowIds\n      });\n    }\n\n    return state;\n  }\n\n  function useInstance$8(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        getHooks = instance.getHooks,\n        plugins = instance.plugins,\n        rowsById = instance.rowsById,\n        _instance$nonGroupedR2 = instance.nonGroupedRowsById,\n        nonGroupedRowsById = _instance$nonGroupedR2 === void 0 ? rowsById : _instance$nonGroupedR2,\n        _instance$autoResetSe = instance.autoResetSelectedRows,\n        autoResetSelectedRows = _instance$autoResetSe === void 0 ? true : _instance$autoResetSe,\n        selectedRowIds = instance.state.selectedRowIds,\n        _instance$selectSubRo3 = instance.selectSubRows,\n        selectSubRows = _instance$selectSubRo3 === void 0 ? true : _instance$selectSubRo3,\n        dispatch = instance.dispatch,\n        page = instance.page,\n        getSubRows = instance.getSubRows;\n    ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'], 'useRowSelect');\n    var selectedFlatRows = React.useMemo(function () {\n      var selectedFlatRows = [];\n      rows.forEach(function (row) {\n        var isSelected = selectSubRows ? getRowIsSelected(row, selectedRowIds, getSubRows) : !!selectedRowIds[row.id];\n        row.isSelected = !!isSelected;\n        row.isSomeSelected = isSelected === null;\n\n        if (isSelected) {\n          selectedFlatRows.push(row);\n        }\n      });\n      return selectedFlatRows;\n    }, [rows, selectSubRows, selectedRowIds, getSubRows]);\n    var isAllRowsSelected = Boolean(Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length);\n    var isAllPageRowsSelected = isAllRowsSelected;\n\n    if (isAllRowsSelected) {\n      if (Object.keys(nonGroupedRowsById).some(function (id) {\n        return !selectedRowIds[id];\n      })) {\n        isAllRowsSelected = false;\n      }\n    }\n\n    if (!isAllRowsSelected) {\n      if (page && page.length && page.some(function (_ref5) {\n        var id = _ref5.id;\n        return !selectedRowIds[id];\n      })) {\n        isAllPageRowsSelected = false;\n      }\n    }\n\n    var getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetSelectedRows()) {\n        dispatch({\n          type: actions.resetSelectedRows\n        });\n      }\n    }, [dispatch, data]);\n    var toggleAllRowsSelected = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.toggleAllRowsSelected,\n        value: value\n      });\n    }, [dispatch]);\n    var toggleAllPageRowsSelected = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.toggleAllPageRowsSelected,\n        value: value\n      });\n    }, [dispatch]);\n    var toggleRowSelected = React.useCallback(function (id, value) {\n      return dispatch({\n        type: actions.toggleRowSelected,\n        id: id,\n        value: value\n      });\n    }, [dispatch]);\n    var getInstance = useGetLatest(instance);\n    var getToggleAllRowsSelectedProps = makePropGetter(getHooks().getToggleAllRowsSelectedProps, {\n      instance: getInstance()\n    });\n    var getToggleAllPageRowsSelectedProps = makePropGetter(getHooks().getToggleAllPageRowsSelectedProps, {\n      instance: getInstance()\n    });\n    Object.assign(instance, {\n      selectedFlatRows: selectedFlatRows,\n      isAllRowsSelected: isAllRowsSelected,\n      isAllPageRowsSelected: isAllPageRowsSelected,\n      toggleRowSelected: toggleRowSelected,\n      toggleAllRowsSelected: toggleAllRowsSelected,\n      getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps,\n      getToggleAllPageRowsSelectedProps: getToggleAllPageRowsSelectedProps,\n      toggleAllPageRowsSelected: toggleAllPageRowsSelected\n    });\n  }\n\n  function prepareRow$3(row, _ref6) {\n    var instance = _ref6.instance;\n\n    row.toggleRowSelected = function (set) {\n      return instance.toggleRowSelected(row.id, set);\n    };\n\n    row.getToggleRowSelectedProps = makePropGetter(instance.getHooks().getToggleRowSelectedProps, {\n      instance: instance,\n      row: row\n    });\n  }\n\n  function getRowIsSelected(row, selectedRowIds, getSubRows) {\n    if (selectedRowIds[row.id]) {\n      return true;\n    }\n\n    var subRows = getSubRows(row);\n\n    if (subRows && subRows.length) {\n      var allChildrenSelected = true;\n      var someSelected = false;\n      subRows.forEach(function (subRow) {\n        // Bail out early if we know both of these\n        if (someSelected && !allChildrenSelected) {\n          return;\n        }\n\n        if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n          someSelected = true;\n        } else {\n          allChildrenSelected = false;\n        }\n      });\n      return allChildrenSelected ? true : someSelected ? null : false;\n    }\n\n    return false;\n  }\n\n  var defaultInitialRowStateAccessor = function defaultInitialRowStateAccessor(row) {\n    return {};\n  };\n\n  var defaultInitialCellStateAccessor = function defaultInitialCellStateAccessor(cell) {\n    return {};\n  }; // Actions\n\n\n  actions.setRowState = 'setRowState';\n  actions.setCellState = 'setCellState';\n  actions.resetRowState = 'resetRowState';\n  var useRowState = function useRowState(hooks) {\n    hooks.stateReducers.push(reducer$9);\n    hooks.useInstance.push(useInstance$9);\n    hooks.prepareRow.push(prepareRow$4);\n  };\n  useRowState.pluginName = 'useRowState';\n\n  function reducer$9(state, action, previousState, instance) {\n    var _instance$initialRowS = instance.initialRowStateAccessor,\n        initialRowStateAccessor = _instance$initialRowS === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS,\n        _instance$initialCell = instance.initialCellStateAccessor,\n        initialCellStateAccessor = _instance$initialCell === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell,\n        rowsById = instance.rowsById;\n\n    if (action.type === actions.init) {\n      return _extends({\n        rowState: {}\n      }, state);\n    }\n\n    if (action.type === actions.resetRowState) {\n      return _extends({}, state, {\n        rowState: instance.initialState.rowState || {}\n      });\n    }\n\n    if (action.type === actions.setRowState) {\n      var _extends2;\n\n      var rowId = action.rowId,\n          value = action.value;\n      var oldRowState = typeof state.rowState[rowId] !== 'undefined' ? state.rowState[rowId] : initialRowStateAccessor(rowsById[rowId]);\n      return _extends({}, state, {\n        rowState: _extends({}, state.rowState, (_extends2 = {}, _extends2[rowId] = functionalUpdate(value, oldRowState), _extends2))\n      });\n    }\n\n    if (action.type === actions.setCellState) {\n      var _oldRowState$cellStat, _rowsById$_rowId, _rowsById$_rowId$cell, _extends3, _extends4;\n\n      var _rowId = action.rowId,\n          columnId = action.columnId,\n          _value = action.value;\n\n      var _oldRowState = typeof state.rowState[_rowId] !== 'undefined' ? state.rowState[_rowId] : initialRowStateAccessor(rowsById[_rowId]);\n\n      var oldCellState = typeof (_oldRowState == null ? void 0 : (_oldRowState$cellStat = _oldRowState.cellState) == null ? void 0 : _oldRowState$cellStat[columnId]) !== 'undefined' ? _oldRowState.cellState[columnId] : initialCellStateAccessor((_rowsById$_rowId = rowsById[_rowId]) == null ? void 0 : (_rowsById$_rowId$cell = _rowsById$_rowId.cells) == null ? void 0 : _rowsById$_rowId$cell.find(function (cell) {\n        return cell.column.id === columnId;\n      }));\n      return _extends({}, state, {\n        rowState: _extends({}, state.rowState, (_extends4 = {}, _extends4[_rowId] = _extends({}, _oldRowState, {\n          cellState: _extends({}, _oldRowState.cellState || {}, (_extends3 = {}, _extends3[columnId] = functionalUpdate(_value, oldCellState), _extends3))\n        }), _extends4))\n      });\n    }\n  }\n\n  function useInstance$9(instance) {\n    var _instance$autoResetRo = instance.autoResetRowState,\n        autoResetRowState = _instance$autoResetRo === void 0 ? true : _instance$autoResetRo,\n        data = instance.data,\n        dispatch = instance.dispatch;\n    var setRowState = React.useCallback(function (rowId, value) {\n      return dispatch({\n        type: actions.setRowState,\n        rowId: rowId,\n        value: value\n      });\n    }, [dispatch]);\n    var setCellState = React.useCallback(function (rowId, columnId, value) {\n      return dispatch({\n        type: actions.setCellState,\n        rowId: rowId,\n        columnId: columnId,\n        value: value\n      });\n    }, [dispatch]);\n    var getAutoResetRowState = useGetLatest(autoResetRowState);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetRowState()) {\n        dispatch({\n          type: actions.resetRowState\n        });\n      }\n    }, [data]);\n    Object.assign(instance, {\n      setRowState: setRowState,\n      setCellState: setCellState\n    });\n  }\n\n  function prepareRow$4(row, _ref) {\n    var instance = _ref.instance;\n    var _instance$initialRowS2 = instance.initialRowStateAccessor,\n        initialRowStateAccessor = _instance$initialRowS2 === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS2,\n        _instance$initialCell2 = instance.initialCellStateAccessor,\n        initialCellStateAccessor = _instance$initialCell2 === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell2,\n        rowState = instance.state.rowState;\n\n    if (row) {\n      row.state = typeof rowState[row.id] !== 'undefined' ? rowState[row.id] : initialRowStateAccessor(row);\n\n      row.setState = function (updater) {\n        return instance.setRowState(row.id, updater);\n      };\n\n      row.cells.forEach(function (cell) {\n        if (!row.state.cellState) {\n          row.state.cellState = {};\n        }\n\n        cell.state = typeof row.state.cellState[cell.column.id] !== 'undefined' ? row.state.cellState[cell.column.id] : initialCellStateAccessor(cell);\n\n        cell.setState = function (updater) {\n          return instance.setCellState(row.id, cell.column.id, updater);\n        };\n      });\n    }\n  }\n\n  actions.resetColumnOrder = 'resetColumnOrder';\n  actions.setColumnOrder = 'setColumnOrder';\n  var useColumnOrder = function useColumnOrder(hooks) {\n    hooks.stateReducers.push(reducer$a);\n    hooks.visibleColumnsDeps.push(function (deps, _ref) {\n      var instance = _ref.instance;\n      return [].concat(deps, [instance.state.columnOrder]);\n    });\n    hooks.visibleColumns.push(visibleColumns$2);\n    hooks.useInstance.push(useInstance$a);\n  };\n  useColumnOrder.pluginName = 'useColumnOrder';\n\n  function reducer$a(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        columnOrder: []\n      }, state);\n    }\n\n    if (action.type === actions.resetColumnOrder) {\n      return _extends({}, state, {\n        columnOrder: instance.initialState.columnOrder || []\n      });\n    }\n\n    if (action.type === actions.setColumnOrder) {\n      return _extends({}, state, {\n        columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)\n      });\n    }\n  }\n\n  function visibleColumns$2(columns, _ref2) {\n    var columnOrder = _ref2.instance.state.columnOrder;\n\n    // If there is no order, return the normal columns\n    if (!columnOrder || !columnOrder.length) {\n      return columns;\n    }\n\n    var columnOrderCopy = [].concat(columnOrder); // If there is an order, make a copy of the columns\n\n    var columnsCopy = [].concat(columns); // And make a new ordered array of the columns\n\n    var columnsInOrder = []; // Loop over the columns and place them in order into the new array\n\n    var _loop = function _loop() {\n      var targetColumnId = columnOrderCopy.shift();\n      var foundIndex = columnsCopy.findIndex(function (d) {\n        return d.id === targetColumnId;\n      });\n\n      if (foundIndex > -1) {\n        columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);\n      }\n    };\n\n    while (columnsCopy.length && columnOrderCopy.length) {\n      _loop();\n    } // If there are any columns left, add them to the end\n\n\n    return [].concat(columnsInOrder, columnsCopy);\n  }\n\n  function useInstance$a(instance) {\n    var dispatch = instance.dispatch;\n    instance.setColumnOrder = React.useCallback(function (columnOrder) {\n      return dispatch({\n        type: actions.setColumnOrder,\n        columnOrder: columnOrder\n      });\n    }, [dispatch]);\n  }\n\n  defaultColumn.canResize = true; // Actions\n\n  actions.columnStartResizing = 'columnStartResizing';\n  actions.columnResizing = 'columnResizing';\n  actions.columnDoneResizing = 'columnDoneResizing';\n  actions.resetResize = 'resetResize';\n  var useResizeColumns = function useResizeColumns(hooks) {\n    hooks.getResizerProps = [defaultGetResizerProps];\n    hooks.getHeaderProps.push({\n      style: {\n        position: 'relative'\n      }\n    });\n    hooks.stateReducers.push(reducer$b);\n    hooks.useInstance.push(useInstance$b);\n    hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions$1);\n  };\n\n  var defaultGetResizerProps = function defaultGetResizerProps(props, _ref) {\n    var instance = _ref.instance,\n        header = _ref.header;\n    var dispatch = instance.dispatch;\n\n    var onResizeStart = function onResizeStart(e, header) {\n      var isTouchEvent = false;\n\n      if (e.type === 'touchstart') {\n        // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n        if (e.touches && e.touches.length > 1) {\n          return;\n        }\n\n        isTouchEvent = true;\n      }\n\n      var headersToResize = getLeafHeaders(header);\n      var headerIdWidths = headersToResize.map(function (d) {\n        return [d.id, d.totalWidth];\n      });\n      var clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX;\n      var raf;\n      var mostRecentClientX;\n\n      var dispatchEnd = function dispatchEnd() {\n        window.cancelAnimationFrame(raf);\n        raf = null;\n        dispatch({\n          type: actions.columnDoneResizing\n        });\n      };\n\n      var dispatchMove = function dispatchMove() {\n        window.cancelAnimationFrame(raf);\n        raf = null;\n        dispatch({\n          type: actions.columnResizing,\n          clientX: mostRecentClientX\n        });\n      };\n\n      var scheduleDispatchMoveOnNextAnimationFrame = function scheduleDispatchMoveOnNextAnimationFrame(clientXPos) {\n        mostRecentClientX = clientXPos;\n\n        if (!raf) {\n          raf = window.requestAnimationFrame(dispatchMove);\n        }\n      };\n\n      var handlersAndEvents = {\n        mouse: {\n          moveEvent: 'mousemove',\n          moveHandler: function moveHandler(e) {\n            return scheduleDispatchMoveOnNextAnimationFrame(e.clientX);\n          },\n          upEvent: 'mouseup',\n          upHandler: function upHandler(e) {\n            document.removeEventListener('mousemove', handlersAndEvents.mouse.moveHandler);\n            document.removeEventListener('mouseup', handlersAndEvents.mouse.upHandler);\n            dispatchEnd();\n          }\n        },\n        touch: {\n          moveEvent: 'touchmove',\n          moveHandler: function moveHandler(e) {\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n\n            scheduleDispatchMoveOnNextAnimationFrame(e.touches[0].clientX);\n            return false;\n          },\n          upEvent: 'touchend',\n          upHandler: function upHandler(e) {\n            document.removeEventListener(handlersAndEvents.touch.moveEvent, handlersAndEvents.touch.moveHandler);\n            document.removeEventListener(handlersAndEvents.touch.upEvent, handlersAndEvents.touch.moveHandler);\n            dispatchEnd();\n          }\n        }\n      };\n      var events = isTouchEvent ? handlersAndEvents.touch : handlersAndEvents.mouse;\n      var passiveIfSupported = passiveEventSupported() ? {\n        passive: false\n      } : false;\n      document.addEventListener(events.moveEvent, events.moveHandler, passiveIfSupported);\n      document.addEventListener(events.upEvent, events.upHandler, passiveIfSupported);\n      dispatch({\n        type: actions.columnStartResizing,\n        columnId: header.id,\n        columnWidth: header.totalWidth,\n        headerIdWidths: headerIdWidths,\n        clientX: clientX\n      });\n    };\n\n    return [props, {\n      onMouseDown: function onMouseDown(e) {\n        return e.persist() || onResizeStart(e, header);\n      },\n      onTouchStart: function onTouchStart(e) {\n        return e.persist() || onResizeStart(e, header);\n      },\n      style: {\n        cursor: 'col-resize'\n      },\n      draggable: false,\n      role: 'separator'\n    }];\n  };\n\n  useResizeColumns.pluginName = 'useResizeColumns';\n\n  function reducer$b(state, action) {\n    if (action.type === actions.init) {\n      return _extends({\n        columnResizing: {\n          columnWidths: {}\n        }\n      }, state);\n    }\n\n    if (action.type === actions.resetResize) {\n      return _extends({}, state, {\n        columnResizing: {\n          columnWidths: {}\n        }\n      });\n    }\n\n    if (action.type === actions.columnStartResizing) {\n      var clientX = action.clientX,\n          columnId = action.columnId,\n          columnWidth = action.columnWidth,\n          headerIdWidths = action.headerIdWidths;\n      return _extends({}, state, {\n        columnResizing: _extends({}, state.columnResizing, {\n          startX: clientX,\n          headerIdWidths: headerIdWidths,\n          columnWidth: columnWidth,\n          isResizingColumn: columnId\n        })\n      });\n    }\n\n    if (action.type === actions.columnResizing) {\n      var _clientX = action.clientX;\n\n      var _state$columnResizing = state.columnResizing,\n          startX = _state$columnResizing.startX,\n          _columnWidth = _state$columnResizing.columnWidth,\n          _state$columnResizing2 = _state$columnResizing.headerIdWidths,\n          _headerIdWidths = _state$columnResizing2 === void 0 ? [] : _state$columnResizing2;\n\n      var deltaX = _clientX - startX;\n      var percentageDeltaX = deltaX / _columnWidth;\n      var newColumnWidths = {};\n\n      _headerIdWidths.forEach(function (_ref2) {\n        var headerId = _ref2[0],\n            headerWidth = _ref2[1];\n        newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);\n      });\n\n      return _extends({}, state, {\n        columnResizing: _extends({}, state.columnResizing, {\n          columnWidths: _extends({}, state.columnResizing.columnWidths, {}, newColumnWidths)\n        })\n      });\n    }\n\n    if (action.type === actions.columnDoneResizing) {\n      return _extends({}, state, {\n        columnResizing: _extends({}, state.columnResizing, {\n          startX: null,\n          isResizingColumn: null\n        })\n      });\n    }\n  }\n\n  var useInstanceBeforeDimensions$1 = function useInstanceBeforeDimensions(instance) {\n    var flatHeaders = instance.flatHeaders,\n        disableResizing = instance.disableResizing,\n        getHooks = instance.getHooks,\n        columnResizing = instance.state.columnResizing;\n    var getInstance = useGetLatest(instance);\n    flatHeaders.forEach(function (header) {\n      var canResize = getFirstDefined(header.disableResizing === true ? false : undefined, disableResizing === true ? false : undefined, true);\n      header.canResize = canResize;\n      header.width = columnResizing.columnWidths[header.id] || header.originalWidth || header.width;\n      header.isResizing = columnResizing.isResizingColumn === header.id;\n\n      if (canResize) {\n        header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n          instance: getInstance(),\n          header: header\n        });\n      }\n    });\n  };\n\n  function useInstance$b(instance) {\n    var plugins = instance.plugins,\n        dispatch = instance.dispatch,\n        _instance$autoResetRe = instance.autoResetResize,\n        autoResetResize = _instance$autoResetRe === void 0 ? true : _instance$autoResetRe,\n        columns = instance.columns;\n    ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns');\n    var getAutoResetResize = useGetLatest(autoResetResize);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetResize()) {\n        dispatch({\n          type: actions.resetResize\n        });\n      }\n    }, [columns]);\n    var resetResizing = React.useCallback(function () {\n      return dispatch({\n        type: actions.resetResize\n      });\n    }, [dispatch]);\n    Object.assign(instance, {\n      resetResizing: resetResizing\n    });\n  }\n\n  function getLeafHeaders(header) {\n    var leafHeaders = [];\n\n    var recurseHeader = function recurseHeader(header) {\n      if (header.columns && header.columns.length) {\n        header.columns.map(recurseHeader);\n      }\n\n      leafHeaders.push(header);\n    };\n\n    recurseHeader(header);\n    return leafHeaders;\n  }\n\n  var cellStyles = {\n    position: 'absolute',\n    top: 0\n  };\n  var useAbsoluteLayout = function useAbsoluteLayout(hooks) {\n    hooks.getTableBodyProps.push(getRowStyles);\n    hooks.getRowProps.push(getRowStyles);\n    hooks.getHeaderGroupProps.push(getRowStyles);\n    hooks.getFooterGroupProps.push(getRowStyles);\n    hooks.getHeaderProps.push(function (props, _ref) {\n      var column = _ref.column;\n      return [props, {\n        style: _extends({}, cellStyles, {\n          left: column.totalLeft + \"px\",\n          width: column.totalWidth + \"px\"\n        })\n      }];\n    });\n    hooks.getCellProps.push(function (props, _ref2) {\n      var cell = _ref2.cell;\n      return [props, {\n        style: _extends({}, cellStyles, {\n          left: cell.column.totalLeft + \"px\",\n          width: cell.column.totalWidth + \"px\"\n        })\n      }];\n    });\n    hooks.getFooterProps.push(function (props, _ref3) {\n      var column = _ref3.column;\n      return [props, {\n        style: _extends({}, cellStyles, {\n          left: column.totalLeft + \"px\",\n          width: column.totalWidth + \"px\"\n        })\n      }];\n    });\n  };\n  useAbsoluteLayout.pluginName = 'useAbsoluteLayout';\n\n  var getRowStyles = function getRowStyles(props, _ref4) {\n    var instance = _ref4.instance;\n    return [props, {\n      style: {\n        position: 'relative',\n        width: instance.totalColumnsWidth + \"px\"\n      }\n    }];\n  };\n\n  var cellStyles$1 = {\n    display: 'inline-block',\n    boxSizing: 'border-box'\n  };\n\n  var getRowStyles$1 = function getRowStyles(props, _ref) {\n    var instance = _ref.instance;\n    return [props, {\n      style: {\n        display: 'flex',\n        width: instance.totalColumnsWidth + \"px\"\n      }\n    }];\n  };\n\n  var useBlockLayout = function useBlockLayout(hooks) {\n    hooks.getRowProps.push(getRowStyles$1);\n    hooks.getHeaderGroupProps.push(getRowStyles$1);\n    hooks.getFooterGroupProps.push(getRowStyles$1);\n    hooks.getHeaderProps.push(function (props, _ref2) {\n      var column = _ref2.column;\n      return [props, {\n        style: _extends({}, cellStyles$1, {\n          width: column.totalWidth + \"px\"\n        })\n      }];\n    });\n    hooks.getCellProps.push(function (props, _ref3) {\n      var cell = _ref3.cell;\n      return [props, {\n        style: _extends({}, cellStyles$1, {\n          width: cell.column.totalWidth + \"px\"\n        })\n      }];\n    });\n    hooks.getFooterProps.push(function (props, _ref4) {\n      var column = _ref4.column;\n      return [props, {\n        style: _extends({}, cellStyles$1, {\n          width: column.totalWidth + \"px\"\n        })\n      }];\n    });\n  };\n  useBlockLayout.pluginName = 'useBlockLayout';\n\n  function useFlexLayout(hooks) {\n    hooks.getTableProps.push(getTableProps);\n    hooks.getRowProps.push(getRowStyles$2);\n    hooks.getHeaderGroupProps.push(getRowStyles$2);\n    hooks.getFooterGroupProps.push(getRowStyles$2);\n    hooks.getHeaderProps.push(getHeaderProps);\n    hooks.getCellProps.push(getCellProps);\n    hooks.getFooterProps.push(getFooterProps);\n  }\n  useFlexLayout.pluginName = 'useFlexLayout';\n\n  var getTableProps = function getTableProps(props, _ref) {\n    var instance = _ref.instance;\n    return [props, {\n      style: {\n        minWidth: instance.totalColumnsMinWidth + \"px\"\n      }\n    }];\n  };\n\n  var getRowStyles$2 = function getRowStyles(props, _ref2) {\n    var instance = _ref2.instance;\n    return [props, {\n      style: {\n        display: 'flex',\n        flex: '1 0 auto',\n        minWidth: instance.totalColumnsMinWidth + \"px\"\n      }\n    }];\n  };\n\n  var getHeaderProps = function getHeaderProps(props, _ref3) {\n    var column = _ref3.column;\n    return [props, {\n      style: {\n        boxSizing: 'border-box',\n        flex: column.totalFlexWidth ? column.totalFlexWidth + \" 0 auto\" : undefined,\n        minWidth: column.totalMinWidth + \"px\",\n        width: column.totalWidth + \"px\"\n      }\n    }];\n  };\n\n  var getCellProps = function getCellProps(props, _ref4) {\n    var cell = _ref4.cell;\n    return [props, {\n      style: {\n        boxSizing: 'border-box',\n        flex: cell.column.totalFlexWidth + \" 0 auto\",\n        minWidth: cell.column.totalMinWidth + \"px\",\n        width: cell.column.totalWidth + \"px\"\n      }\n    }];\n  };\n\n  var getFooterProps = function getFooterProps(props, _ref5) {\n    var column = _ref5.column;\n    return [props, {\n      style: {\n        boxSizing: 'border-box',\n        flex: column.totalFlexWidth ? column.totalFlexWidth + \" 0 auto\" : undefined,\n        minWidth: column.totalMinWidth + \"px\",\n        width: column.totalWidth + \"px\"\n      }\n    }];\n  };\n\n  actions.columnStartResizing = 'columnStartResizing';\n  actions.columnResizing = 'columnResizing';\n  actions.columnDoneResizing = 'columnDoneResizing';\n  actions.resetResize = 'resetResize';\n  function useGridLayout(hooks) {\n    hooks.stateReducers.push(reducer$c);\n    hooks.getTableProps.push(getTableProps$1);\n    hooks.getHeaderProps.push(getHeaderProps$1);\n    hooks.getRowProps.push(getRowProps);\n  }\n  useGridLayout.pluginName = 'useGridLayout';\n\n  var getTableProps$1 = function getTableProps(props, _ref) {\n    var instance = _ref.instance;\n    var gridTemplateColumns = instance.visibleColumns.map(function (column) {\n      var _instance$state$colum;\n\n      if (instance.state.gridLayout.columnWidths[column.id]) return instance.state.gridLayout.columnWidths[column.id] + \"px\"; // When resizing, lock the width of all unset columns\n      // instead of using user-provided width or defaultColumn width,\n      // which could potentially be 'auto' or 'fr' units that don't scale linearly\n\n      if ((_instance$state$colum = instance.state.columnResizing) == null ? void 0 : _instance$state$colum.isResizingColumn) return instance.state.gridLayout.startWidths[column.id] + \"px\";\n      if (typeof column.width === 'number') return column.width + \"px\";\n      return column.width;\n    });\n    return [props, {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: gridTemplateColumns.join(\" \")\n      }\n    }];\n  };\n\n  var getHeaderProps$1 = function getHeaderProps(props, _ref2) {\n    var column = _ref2.column;\n    return [props, {\n      id: \"header-cell-\" + column.id,\n      style: {\n        position: \"sticky\",\n        //enables a scroll wrapper to be placed around the table and have sticky headers\n        gridColumn: \"span \" + column.totalVisibleHeaderCount\n      }\n    }];\n  };\n\n  var getRowProps = function getRowProps(props, _ref3) {\n    var row = _ref3.row;\n\n    if (row.isExpanded) {\n      return [props, {\n        style: {\n          gridColumn: \"1 / \" + (row.cells.length + 1)\n        }\n      }];\n    }\n\n    return [props, {}];\n  };\n\n  function reducer$c(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        gridLayout: {\n          columnWidths: {}\n        }\n      }, state);\n    }\n\n    if (action.type === actions.resetResize) {\n      return _extends({}, state, {\n        gridLayout: {\n          columnWidths: {}\n        }\n      });\n    }\n\n    if (action.type === actions.columnStartResizing) {\n      var columnId = action.columnId,\n          headerIdWidths = action.headerIdWidths;\n      var columnWidth = getElementWidth(columnId);\n\n      if (columnWidth !== undefined) {\n        var startWidths = instance.visibleColumns.reduce(function (acc, column) {\n          var _extends2;\n\n          return _extends({}, acc, (_extends2 = {}, _extends2[column.id] = getElementWidth(column.id), _extends2));\n        }, {});\n        var minWidths = instance.visibleColumns.reduce(function (acc, column) {\n          var _extends3;\n\n          return _extends({}, acc, (_extends3 = {}, _extends3[column.id] = column.minWidth, _extends3));\n        }, {});\n        var maxWidths = instance.visibleColumns.reduce(function (acc, column) {\n          var _extends4;\n\n          return _extends({}, acc, (_extends4 = {}, _extends4[column.id] = column.maxWidth, _extends4));\n        }, {});\n        var headerIdGridWidths = headerIdWidths.map(function (_ref4) {\n          var headerId = _ref4[0];\n          return [headerId, getElementWidth(headerId)];\n        });\n        return _extends({}, state, {\n          gridLayout: _extends({}, state.gridLayout, {\n            startWidths: startWidths,\n            minWidths: minWidths,\n            maxWidths: maxWidths,\n            headerIdGridWidths: headerIdGridWidths,\n            columnWidth: columnWidth\n          })\n        });\n      } else {\n        return state;\n      }\n    }\n\n    if (action.type === actions.columnResizing) {\n      var clientX = action.clientX;\n      var startX = state.columnResizing.startX;\n\n      var _state$gridLayout = state.gridLayout,\n          _columnWidth = _state$gridLayout.columnWidth,\n          _minWidths = _state$gridLayout.minWidths,\n          _maxWidths = _state$gridLayout.maxWidths,\n          _state$gridLayout$hea = _state$gridLayout.headerIdGridWidths,\n          _headerIdGridWidths = _state$gridLayout$hea === void 0 ? [] : _state$gridLayout$hea;\n\n      var deltaX = clientX - startX;\n      var percentageDeltaX = deltaX / _columnWidth;\n      var newColumnWidths = {};\n\n      _headerIdGridWidths.forEach(function (_ref5) {\n        var headerId = _ref5[0],\n            headerWidth = _ref5[1];\n        newColumnWidths[headerId] = Math.min(Math.max(_minWidths[headerId], headerWidth + headerWidth * percentageDeltaX), _maxWidths[headerId]);\n      });\n\n      return _extends({}, state, {\n        gridLayout: _extends({}, state.gridLayout, {\n          columnWidths: _extends({}, state.gridLayout.columnWidths, {}, newColumnWidths)\n        })\n      });\n    }\n\n    if (action.type === actions.columnDoneResizing) {\n      return _extends({}, state, {\n        gridLayout: _extends({}, state.gridLayout, {\n          startWidths: {},\n          minWidths: {},\n          maxWidths: {}\n        })\n      });\n    }\n  }\n\n  function getElementWidth(columnId) {\n    var _document$getElementB;\n\n    var width = (_document$getElementB = document.getElementById(\"header-cell-\" + columnId)) == null ? void 0 : _document$getElementB.offsetWidth;\n\n    if (width !== undefined) {\n      return width;\n    }\n  }\n\n  exports._UNSTABLE_usePivotColumns = _UNSTABLE_usePivotColumns;\n  exports.actions = actions;\n  exports.defaultColumn = defaultColumn;\n  exports.defaultGroupByFn = defaultGroupByFn;\n  exports.defaultOrderByFn = defaultOrderByFn;\n  exports.defaultRenderer = defaultRenderer;\n  exports.emptyRenderer = emptyRenderer;\n  exports.ensurePluginOrder = ensurePluginOrder;\n  exports.flexRender = flexRender;\n  exports.functionalUpdate = functionalUpdate;\n  exports.loopHooks = loopHooks;\n  exports.makePropGetter = makePropGetter;\n  exports.makeRenderer = makeRenderer;\n  exports.reduceHooks = reduceHooks;\n  exports.safeUseLayoutEffect = safeUseLayoutEffect;\n  exports.useAbsoluteLayout = useAbsoluteLayout;\n  exports.useAsyncDebounce = useAsyncDebounce;\n  exports.useBlockLayout = useBlockLayout;\n  exports.useColumnOrder = useColumnOrder;\n  exports.useExpanded = useExpanded;\n  exports.useFilters = useFilters;\n  exports.useFlexLayout = useFlexLayout;\n  exports.useGetLatest = useGetLatest;\n  exports.useGlobalFilter = useGlobalFilter;\n  exports.useGridLayout = useGridLayout;\n  exports.useGroupBy = useGroupBy;\n  exports.useMountedLayoutEffect = useMountedLayoutEffect;\n  exports.usePagination = usePagination;\n  exports.useResizeColumns = useResizeColumns;\n  exports.useRowSelect = useRowSelect;\n  exports.useRowState = useRowState;\n  exports.useSortBy = useSortBy;\n  exports.useTable = useTable;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=react-table.development.js.map\n","import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultRenderer = ({ value = '' }) => value;\nexport const emptyRenderer = () => <>&nbsp;</>;\n\nexport const defaultColumn = {\n  Cell: defaultRenderer,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n","import { defaultColumn, emptyRenderer } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: emptyRenderer,\n    Footer: emptyRenderer,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n\n  Object.assign(column, {\n    originalWidth: column.width,\n  })\n\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(\n  allColumns,\n  defaultColumn,\n  additionalHeaderProperties = () => ({})\n) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n            ...additionalHeaderProperties(column),\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n              ...additionalHeaderProperties(column),\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = (row, addToExpandedRows = true) => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    if (addToExpandedRows) {\n      expandedRows.push(row)\n    }\n\n    if (row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(row => handleRow(row, expandSubRows))\n    }\n  }\n\n  rows.forEach(row => handleRow(row))\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\nlet passiveSupported = null\nexport function passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    window.addEventListener('test', null, options)\n    window.removeEventListener('test', null, options)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(\n        originalRow,\n        rowIndex,\n        row,\n        parentRows,\n        data\n      )\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { rowsById } = instance\n\n    const isAllRowsExpanded =\n      Object.keys(rowsById).length === Object.keys(state.expanded).length\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const includesSome = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.some(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesSome.autoRemove = val => !val || !val.length\n\nexport const includesValue = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludesValue.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = values[0] || 0\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = [...values].sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n}\n\nexport function unique(values) {\n  return Array.from(new Set(values).values())\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.setGroupBy = 'setGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.setGroupBy) {\n    const { value } = action\n    return {\n      ...state,\n      groupBy: value,\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  const setGroupBy = React.useCallback(\n    value => {\n      dispatch({ type: actions.setGroupBy, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          // Get the columnValues to aggregate\n          const groupedValues = groupedRows.map(row => row.values[column.id])\n\n          // Get the columnValues to aggregate\n          const leafValues = leafRows.map(row => {\n            let columnValue = row.values[column.id]\n\n            if (!depth && column.aggregateValue) {\n              const aggregateValueFn =\n                typeof column.aggregateValue === 'function'\n                  ? column.aggregateValue\n                  : userAggregations[column.aggregateValue] ||\n                    aggregations[column.aggregateValue]\n\n              if (!aggregateValueFn) {\n                console.info({ column })\n                throw new Error(\n                  `React Table: Invalid column.aggregateValue option for column listed above`\n                )\n              }\n\n              columnValue = aggregateValueFn(columnValue, row, column)\n            }\n            return columnValue\n          })\n\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows.map((row) => ({ ...row, depth }))\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n    setGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated =\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\nexport function datetime(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\nexport function string(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.split('').filter(Boolean)\n  b = b.split('').filter(Boolean)\n\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    let alower = aa.toLowerCase()\n    let blower = bb.toLowerCase()\n\n    // Case insensitive comparison until characters match\n    if (alower > blower) {\n      return 1\n    }\n    if (blower > alower) {\n      return -1\n    }\n    // If lowercase characters are identical\n    if (aa > bb) {\n      return 1\n    }\n    if (bb > aa) {\n      return -1\n    }\n    continue\n  }\n\n  return a.length - b.length\n}\n\nexport function number(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  const replaceNonNumeric = /[^0-9.]/gi\n\n  a = Number(String(a).replace(replaceNonNumeric, ''))\n  b = Number(String(b).replace(replaceNonNumeric, ''))\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValuesByColumnID(row1, row2, columnId) {\n  return [row1.values[columnId], row2.values[columnId]]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.setSortBy = 'setSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.setSortBy) {\n    const { sortBy } = action\n    return {\n      ...state,\n      sortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  const setSortBy = React.useCallback(\n    sortBy => {\n      dispatch({ type: actions.setSortBy, sortBy })\n    },\n    [dispatch]\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length === 0) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex < pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n]\n\n// eslint-disable-next-line max-params\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true, getSubRows } = instance\n    const isSelected = state.selectedRowIds[id]\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (row) {\n        if (!row.isGrouped) {\n          if (shouldExist) {\n            newSelectedRowIds[id] = true\n          } else {\n            delete newSelectedRowIds[id]\n          }\n        }\n\n        if (selectSubRows && getSubRows(row)) {\n          return getSubRows(row).forEach(row => handleRowById(row.id))\n        }\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    page.forEach(row => handleRowById(row.id))\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n  return state\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  let isAllPageRowsSelected = isAllRowsSelected\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\n      isAllPageRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleAllPageRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  const subRows = getSubRows(row)\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = row => ({})\nconst defaultInitialCellStateAccessor = cell => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(\n            rowsById[rowId]?.cells?.find(cell => cell.column.id === columnId)\n          )\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(cell)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import React from 'react'\n\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, passiveEventSupported } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    let raf\n    let mostRecentClientX\n\n    const dispatchEnd = () => {\n      window.cancelAnimationFrame(raf)\n      raf = null\n      dispatch({ type: actions.columnDoneResizing })\n    }\n    const dispatchMove = () => {\n      window.cancelAnimationFrame(raf)\n      raf = null\n      dispatch({ type: actions.columnResizing, clientX: mostRecentClientX })\n    }\n\n    const scheduleDispatchMoveOnNextAnimationFrame = clientXPos => {\n      mostRecentClientX = clientXPos\n      if (!raf) {\n        raf = window.requestAnimationFrame(dispatchMove)\n      }\n    }\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => scheduleDispatchMoveOnNextAnimationFrame(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          scheduleDispatchMoveOnNextAnimationFrame(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'col-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = useGetLatest(autoResetResize)\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n","import { actions } from '../publicUtils'\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport function useGridLayout(hooks) {\n  hooks.stateReducers.push(reducer)\n  hooks.getTableProps.push(getTableProps)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getRowProps.push(getRowProps)\n}\n\nuseGridLayout.pluginName = 'useGridLayout'\n\nconst getTableProps = (props, { instance }) => {\n  const gridTemplateColumns = instance.visibleColumns.map(column => {\n    if (instance.state.gridLayout.columnWidths[column.id])\n      return `${instance.state.gridLayout.columnWidths[column.id]}px`\n    // When resizing, lock the width of all unset columns\n    // instead of using user-provided width or defaultColumn width,\n    // which could potentially be 'auto' or 'fr' units that don't scale linearly\n    if (instance.state.columnResizing?.isResizingColumn)\n      return `${instance.state.gridLayout.startWidths[column.id]}px`\n    if (typeof column.width === 'number') return `${column.width}px`\n    return column.width\n  })\n  return [\n    props,\n    {\n      style: {\n        display: `grid`,\n        gridTemplateColumns: gridTemplateColumns.join(` `),\n      },\n    },\n  ]\n}\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    id: `header-cell-${column.id}`,\n    style: {\n      position: `sticky`, //enables a scroll wrapper to be placed around the table and have sticky headers\n      gridColumn: `span ${column.totalVisibleHeaderCount}`,\n    },\n  },\n]\n\nconst getRowProps = (props, { row }) => {\n  if (row.isExpanded) {\n    return [\n      props,\n      {\n        style: {\n          gridColumn: `1 / ${row.cells.length + 1}`,\n        },\n      },\n    ]\n  }\n  return [props, {}]\n}\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      gridLayout: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      gridLayout: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { columnId, headerIdWidths } = action\n    const columnWidth = getElementWidth(columnId)\n\n    if (columnWidth !== undefined) {\n      const startWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: getElementWidth(column.id),\n        }),\n        {}\n      )\n      const minWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: column.minWidth,\n        }),\n        {}\n      )\n      const maxWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: column.maxWidth,\n        }),\n        {}\n      )\n\n      const headerIdGridWidths = headerIdWidths.map(([headerId]) => [\n        headerId,\n        getElementWidth(headerId),\n      ])\n\n      return {\n        ...state,\n        gridLayout: {\n          ...state.gridLayout,\n          startWidths,\n          minWidths,\n          maxWidths,\n          headerIdGridWidths,\n          columnWidth,\n        },\n      }\n    } else {\n      return state\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX } = state.columnResizing\n    const {\n      columnWidth,\n      minWidths,\n      maxWidths,\n      headerIdGridWidths = [],\n    } = state.gridLayout\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdGridWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.min(\n        Math.max(\n          minWidths[headerId],\n          headerWidth + headerWidth * percentageDeltaX\n        ),\n        maxWidths[headerId]\n      )\n    })\n\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        columnWidths: {\n          ...state.gridLayout.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        startWidths: {},\n        minWidths: {},\n        maxWidths: {},\n      },\n    }\n  }\n}\n\nfunction getElementWidth(columnId) {\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\n\n  if (width !== undefined) {\n    return width\n  }\n}\n","import { Fragment, useEffect, useRef, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { ChainId } from \"@wormhole-foundation/sdk\";\nimport { BREAKPOINTS } from \"src/consts\";\nimport { useEnvironment } from \"src/context/EnvironmentContext\";\nimport {\n  ActivityIcon,\n  ChevronDownIcon,\n  CrossIcon,\n  FilterListIcon,\n  FullscreenIcon,\n} from \"src/icons/generic\";\nimport {\n  BlockchainIcon,\n  Counter,\n  Fullscreenable,\n  NavLink,\n  Select,\n  ToggleGroup,\n} from \"src/components/atoms\";\nimport { ErrorPlaceholder } from \"src/components/molecules\";\nimport { useLockBodyScroll, useOutsideClick, useWindowSize } from \"src/utils/hooks\";\nimport { getTokenIcon } from \"src/utils/token\";\nimport { formatNumber } from \"src/utils/number\";\nimport { getISODateZeroed, oneDayAgoISOString, todayISOString } from \"src/utils/date\";\nimport { getChainName } from \"src/utils/wormhole\";\nimport { ChainFilterMainnet, ChainFilterTestnet } from \"src/utils/filterUtils\";\nimport { getClient } from \"src/api/Client\";\nimport { Chart } from \"./Chart\";\nimport analytics from \"src/analytics\";\nimport \"./styles.scss\";\n\nconst METRIC_CHART_LIST = [\n  { label: \"Volume\", value: \"volume\", ariaLabel: \"Volume\" },\n  { label: \"Transfers\", value: \"transactions\", ariaLabel: \"Transfers\" },\n];\n\nconst SCALE_CHART_LIST = [\n  { label: \"Logarithmic\", value: \"logarithmic\", ariaLabel: \"Logarithmic\" },\n  { label: \"Linear\", value: \"linear\", ariaLabel: \"Linear\" },\n];\n\nconst RANGE_LIST = [\n  { label: \"Last 7 days\", value: getISODateZeroed(7), timespan: \"1d\", timeRange: \"7d\" },\n  { label: \"Last 14 days\", value: getISODateZeroed(14), timespan: \"1d\", timeRange: \"14d\" },\n  { label: \"Last 30 days\", value: getISODateZeroed(30), timespan: \"1d\", timeRange: \"30d\" },\n  { label: \"Last 90 days\", value: getISODateZeroed(90), timespan: \"1d\", timeRange: \"90d\" },\n];\n\nconst TokenActivity = ({ isHomePage = false }: { isHomePage?: boolean }) => {\n  const { environment } = useEnvironment();\n  const currentNetwork = environment.network;\n  const isMainnet = currentNetwork === \"Mainnet\";\n\n  const filterContainerRef = useRef<HTMLDivElement>(null);\n  const orderedChains = isMainnet ? ChainFilterMainnet : ChainFilterTestnet;\n\n  const { width } = useWindowSize();\n  const isDesktop = width >= BREAKPOINTS.desktop;\n\n  const [selectedTopAssetTimeRange, setSelectedTopAssetTimeRange] = useState(RANGE_LIST[0]);\n\n  const [scaleSelected, setScaleSelectedState] = useState<\"linear\" | \"logarithmic\">(\"linear\");\n  const setScaleSelected = (value: \"linear\" | \"logarithmic\", track: boolean) => {\n    setScaleSelectedState(value);\n\n    if (track) {\n      analytics.track(\"scaleSelected\", {\n        selected: value,\n        selectedType: \"tokenActivity\",\n      });\n    }\n  };\n  const [chartSelected, setChartSelected] = useState<\"area\" | \"bar\">(\"area\");\n  const [metricSelected, setMetricSelected] = useState<\"volume\" | \"transactions\">(\"volume\");\n  const [openFilters, setOpenFilters] = useState(false);\n  const [rowSelected, setRowSelected] = useState<number>(0);\n  const [tokenSelectedByUser, setTokenSelectedByUser] = useState(false);\n\n  const [filters, setFiltersState] = useState({\n    from: getISODateZeroed(7),\n    to: todayISOString,\n    timespan: \"1d\",\n    sourceChain: [],\n    targetChain: [],\n    symbol: { label: \"\", value: \"\" },\n  });\n\n  const setFilters = (newFilters: typeof filters, timeRange?: string) => {\n    analytics.track(\"tokenActivity\", {\n      network: currentNetwork,\n      selectedType: metricSelected,\n      chain:\n        (filters.sourceChain?.length > 0\n          ? filters.sourceChain.map(chain => chain.label).join(\", \")\n          : \"Unset\") +\n        (filters.targetChain?.length > 0\n          ? \" -> \" + filters.targetChain.map(chain => chain.label).join(\", \")\n          : \"\"),\n      symbol: newFilters?.symbol?.label,\n      selectedTimeRange: timeRange ? timeRange : selectedTopAssetTimeRange?.label,\n    });\n\n    setFiltersState(newFilters);\n  };\n\n  const sourceChains = filters.sourceChain.map(({ value }) => Number(value) as ChainId);\n  const targetChains = filters.targetChain.map(({ value }) => Number(value) as ChainId);\n\n  const CHAIN_LIST: { label: string; value: string }[] = orderedChains.map(chainId => ({\n    icon: (\n      <BlockchainIcon\n        background=\"var(--color-white-10)\"\n        chainId={chainId}\n        colorless\n        lazy={false}\n        network={currentNetwork}\n        size={24}\n      />\n    ),\n    label: getChainName({ network: currentNetwork, chainId }),\n    value: String(chainId),\n  }));\n\n  const {\n    isFetching: isFetchingList,\n    isError: isErrorList,\n    data: dataList,\n  } = useQuery(\n    [\"tokensSymbolVolume\", currentNetwork, selectedTopAssetTimeRange],\n    async () => {\n      const response = await getClient().guardianNetwork.getTokensSymbolVolume({\n        limit: 10,\n        timeRange: selectedTopAssetTimeRange?.timeRange as \"7d\" | \"14d\" | \"30d\" | \"90d\",\n      });\n      return response;\n    },\n    {\n      onSuccess: response => {\n        const updateFiltersAndSelection = (index: number) => {\n          const newSymbol = response[index]?.symbol;\n          if (rowSelected !== index) setRowSelected(index);\n          if (filters.symbol.value !== newSymbol) {\n            setFilters({\n              ...filters,\n              symbol: {\n                label: newSymbol,\n                value: newSymbol,\n              },\n            });\n          }\n        };\n\n        // find the index of the selected symbol in the response, or use the first symbol if not found or not selected by the user\n        const symbolIndex = response.findIndex(item => item.symbol === filters.symbol.value);\n        updateFiltersAndSelection(!tokenSelectedByUser || symbolIndex === -1 ? 0 : symbolIndex);\n      },\n    },\n  );\n\n  const {\n    isLoading: isLoadingChart,\n    isError: isErrorChart,\n    data: dataChart,\n  } = useQuery(\n    [\n      \"tokensSymbolActivity\",\n      filters.from,\n      filters.to,\n      filters.symbol.value,\n      filters.timespan,\n      sourceChains,\n      targetChains,\n    ],\n    () =>\n      getClient().guardianNetwork.getTokensSymbolActivity({\n        from: filters.from,\n        to: todayISOString,\n        symbol: filters.symbol.value,\n        timespan: filters.timespan,\n        sourceChain: sourceChains,\n        targetChain: targetChains,\n      }),\n    {\n      enabled: !!dataList && dataList.length > 0 && !isFetchingList,\n    },\n  );\n\n  const applyFilters = () => {\n    setOpenFilters(false);\n  };\n\n  const resetFilters = () => {\n    setFilters({\n      ...filters,\n      sourceChain: [],\n      targetChain: [],\n    });\n    setOpenFilters(false);\n  };\n\n  const handleRowSelected = (rowIndex: number) => {\n    setFilters({\n      ...filters,\n      symbol: {\n        label: dataList[rowIndex].symbol,\n        value: dataList[rowIndex].symbol,\n      },\n    });\n    setRowSelected(!isDesktop && rowIndex === rowSelected ? -1 : rowIndex);\n    setTokenSelectedByUser(true);\n  };\n\n  useEffect(() => {\n    if (!isMainnet) {\n      setMetricSelected(\"transactions\");\n    }\n  }, [isMainnet]);\n\n  useOutsideClick({\n    ref: filterContainerRef,\n    callback: () => setOpenFilters(false),\n  });\n\n  useLockBodyScroll({\n    isLocked: !isDesktop && openFilters,\n    scrollableClasses: [\"select__option\"],\n  });\n\n  const fullscreenBtnRef = useRef(null);\n\n  return (\n    <Fullscreenable\n      className=\"token-activity\"\n      buttonRef={fullscreenBtnRef}\n      itemName=\"tokenActivity\"\n    >\n      {openFilters && !isDesktop && <div className=\"token-activity-bg\" />}\n\n      <h3 className=\"token-activity-title\">\n        <ActivityIcon /> Top 10 Tokens Transferred\n        <div className=\"token-activity-title-fullscreen\" ref={fullscreenBtnRef}>\n          <FullscreenIcon width={20} />\n        </div>\n        {isHomePage && (\n          <NavLink\n            className=\"token-activity-title-link\"\n            to=\"/analytics/tokens\"\n            onClick={() => {\n              analytics.track(\"viewMore\", {\n                network: currentNetwork,\n                selected: \"Token Activity\",\n              });\n            }}\n          >\n            View More\n          </NavLink>\n        )}\n      </h3>\n\n      <div className=\"token-activity-container\">\n        <div className=\"token-activity-container-top\">\n          <div\n            className={`token-activity-container-top-menu ${openFilters ? \"open\" : \"\"}`}\n            ref={filterContainerRef}\n          >\n            <h4 className=\"token-activity-container-top-menu-title\">Filters</h4>\n\n            <button\n              className=\"token-activity-container-top-menu-close-btn\"\n              onClick={() => setOpenFilters(false)}\n            >\n              <CrossIcon width={24} />\n            </button>\n\n            <Select\n              ariaLabel=\"Select Source Chain\"\n              buttonStyles={{\n                width: \"100%\",\n                justifyContent: \"space-between\",\n                height: isDesktop ? 36 : 48,\n              }}\n              items={CHAIN_LIST}\n              menuFixed={!isDesktop}\n              menuListStyles={{ maxHeight: isDesktop ? 264 : 180 }}\n              name=\"topAssetTimeRange\"\n              onValueChange={value => setFilters({ ...filters, sourceChain: value })}\n              optionStyles={{ padding: 16 }}\n              text={\n                <div className=\"token-activity-container-top-menu-select-text\">\n                  {filters.sourceChain.length > 0 && (\n                    <Counter>{filters.sourceChain.length}</Counter>\n                  )}\n                  Source chain\n                </div>\n              }\n              type=\"searchable\"\n              value={filters.sourceChain}\n            />\n\n            <Select\n              ariaLabel=\"Select Target Chain\"\n              buttonStyles={{\n                width: \"100%\",\n                justifyContent: \"space-between\",\n                height: isDesktop ? 36 : 48,\n              }}\n              items={CHAIN_LIST}\n              menuFixed={!isDesktop}\n              menuListStyles={{ maxHeight: isDesktop ? 264 : 180 }}\n              name=\"topAssetTimeRange\"\n              onValueChange={value => setFilters({ ...filters, targetChain: value })}\n              optionStyles={{ padding: 16 }}\n              text={\n                <div className=\"token-activity-container-top-menu-select-text\">\n                  {filters.targetChain.length > 0 && (\n                    <Counter>{filters.targetChain.length}</Counter>\n                  )}\n                  Target chain\n                </div>\n              }\n              type=\"searchable\"\n              value={filters.targetChain}\n            />\n\n            {!isDesktop && (\n              <ToggleGroup\n                ariaLabel=\"Select metric type (volume or transfers)\"\n                className=\"token-activity-container-top-toggle\"\n                items={isMainnet ? METRIC_CHART_LIST : [METRIC_CHART_LIST[1]]}\n                onValueChange={value => {\n                  if (value === \"transactions\") {\n                    setScaleSelected(\"linear\", false);\n                  }\n                  setMetricSelected(value);\n\n                  analytics.track(\"metricSelected\", {\n                    network: currentNetwork,\n                    selected: value,\n                    selectedType: \"tokenActivity\",\n                  });\n                }}\n                value={metricSelected}\n              />\n            )}\n\n            {!isDesktop && chartSelected === \"area\" && metricSelected === \"volume\" && (\n              <ToggleGroup\n                ariaLabel=\"Select scale (linear or logarithmic)\"\n                className=\"token-activity-container-top-toggle\"\n                // className=\"token-activity-chart-top-scale\"\n                items={SCALE_CHART_LIST}\n                onValueChange={value => setScaleSelected(value, true)}\n                value={scaleSelected}\n              />\n            )}\n\n            <div className=\"token-activity-container-top-menu-buttons\">\n              <button className=\"apply-btn\" onClick={applyFilters}>\n                Apply Filters\n              </button>\n\n              <button\n                className=\"reset-btn\"\n                disabled={filters.sourceChain.length === 0 && filters.targetChain.length === 0}\n                onClick={resetFilters}\n              >\n                Reset Filters\n              </button>\n            </div>\n          </div>\n\n          {isDesktop && (\n            <ToggleGroup\n              ariaLabel=\"Select metric type (volume or transfers)\"\n              className=\"token-activity-container-top-toggle\"\n              items={isMainnet ? METRIC_CHART_LIST : [METRIC_CHART_LIST[1]]}\n              onValueChange={value => {\n                if (value === \"transactions\") {\n                  setScaleSelected(\"linear\", false);\n                }\n                setMetricSelected(value);\n\n                analytics.track(\"metricSelected\", {\n                  network: currentNetwork,\n                  selected: value,\n                  selectedType: \"tokenActivity\",\n                });\n              }}\n              value={metricSelected}\n            />\n          )}\n\n          <Select\n            ariaLabel=\"Select Time Range\"\n            className=\"token-activity-container-top-select\"\n            items={RANGE_LIST}\n            name=\"topAssetTimeRange\"\n            onValueChange={value => {\n              setSelectedTopAssetTimeRange(value);\n              setFilters(\n                {\n                  ...filters,\n                  from: value.value,\n                  timespan: value.timespan,\n                },\n                value?.label,\n              );\n            }}\n            value={selectedTopAssetTimeRange}\n          />\n\n          <button\n            className=\"token-activity-container-top-filters-btn\"\n            onClick={() => setOpenFilters(true)}\n          >\n            <FilterListIcon />\n            <span className=\"token-activity-container-top-filters-btn-txt\">Filters</span>\n            {(filters.sourceChain.length > 0 || filters.targetChain.length > 0) && (\n              <Counter>\n                {filters.sourceChain.length > 0 && filters.targetChain.length > 0 ? 2 : 1}\n              </Counter>\n            )}\n          </button>\n        </div>\n\n        <div className=\"token-activity-container-content\">\n          <div className=\"token-activity-container-content-list\">\n            <div className=\"token-activity-container-content-list-title\">Tokens List</div>\n\n            <div className=\"token-activity-container-content-list-header\">\n              <div>SYMBOL</div> <div>VOLUME</div>\n            </div>\n\n            {isErrorList ? (\n              <ErrorPlaceholder />\n            ) : isFetchingList ? (\n              <div className=\"token-activity-container-content-list-loader\">\n                {Array.from({ length: 10 }).map((_, i) => (\n                  <div className=\"token-activity-container-content-list-loader-row\" key={i} />\n                ))}\n              </div>\n            ) : (\n              dataList?.map((item, rowIndex) => (\n                <Fragment key={rowIndex}>\n                  <div\n                    className={`token-activity-container-content-list-row row-${rowIndex} ${\n                      rowIndex === rowSelected ? \"open\" : \"\"\n                    }`}\n                    onClick={() => handleRowSelected(rowIndex)}\n                  >\n                    <div className=\"token-activity-container-content-list-row-symbol\">\n                      <img\n                        src={getTokenIcon(item.symbol)}\n                        alt={`${item.symbol} icon`}\n                        height=\"24\"\n                        width=\"24\"\n                        className=\"top-asset-list-row-item-to-icon\"\n                        loading=\"lazy\"\n                      />\n\n                      <span>{item.symbol}</span>\n                    </div>\n\n                    <div className=\"token-activity-container-content-list-row-volume\">\n                      ${formatNumber(item.volume, 0)}\n                      <ChevronDownIcon />\n                    </div>\n                  </div>\n\n                  {width < BREAKPOINTS.desktop && rowSelected === rowIndex && (\n                    <Chart\n                      data={dataChart}\n                      filters={filters}\n                      isError={isErrorChart}\n                      isLoading={isLoadingChart}\n                      metricSelected={metricSelected}\n                      rowSelected={rowSelected}\n                      setScaleSelected={setScaleSelected}\n                      scaleSelected={scaleSelected}\n                      chartSelected={chartSelected}\n                      setChartSelected={setChartSelected}\n                    />\n                  )}\n                </Fragment>\n              ))\n            )}\n          </div>\n\n          {width >= BREAKPOINTS.desktop && (\n            <Chart\n              data={dataChart}\n              filters={filters}\n              isError={isErrorChart}\n              isLoading={isLoadingChart}\n              metricSelected={metricSelected}\n              rowSelected={rowSelected}\n              setScaleSelected={setScaleSelected}\n              scaleSelected={scaleSelected}\n              setChartSelected={setChartSelected}\n              chartSelected={chartSelected}\n            />\n          )}\n        </div>\n      </div>\n    </Fullscreenable>\n  );\n};\n\nexport default TokenActivity;\n","import { useRef } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { BREAKPOINTS } from \"src/consts\";\nimport { Loader, ToggleGroup } from \"src/components/atoms\";\nimport { ErrorPlaceholder, WormholeScanBrand } from \"src/components/molecules\";\nimport { changePathOpacity, formatterYAxis, updatePathStyles } from \"src/utils/apexChartUtils\";\nimport { TokensSymbolActivityOutput } from \"src/api/guardian-network/types\";\nimport { useWindowSize } from \"src/utils/hooks\";\nimport {\n  ActivityIcon,\n  AnalyticsIcon,\n  ArrowRightIcon,\n  LinearIcon,\n  LogarithmicIcon,\n} from \"src/icons/generic\";\nimport { formatNumber } from \"src/utils/number\";\nimport { toLocaleDate } from \"src/utils/date\";\nimport \"./styles.scss\";\n\ntype Props = {\n  data: TokensSymbolActivityOutput;\n  isError: boolean;\n  isLoading: boolean;\n  metricSelected: \"volume\" | \"transactions\";\n  rowSelected: number;\n  filters: {\n    timespan: string;\n  };\n  setScaleSelected: (value: \"linear\" | \"logarithmic\", track: boolean) => void;\n  scaleSelected: \"linear\" | \"logarithmic\";\n  chartSelected: \"area\" | \"bar\";\n  setChartSelected: (value: \"area\" | \"bar\") => void;\n};\n\nconst TYPE_CHART_LIST = [\n  { label: <ActivityIcon width={24} />, value: \"area\", ariaLabel: \"Area\" },\n  { label: <AnalyticsIcon width={24} />, value: \"bar\", ariaLabel: \"Bar\" },\n];\n\nconst SCALE_CHART_LIST = [\n  { label: <LogarithmicIcon width={22} />, value: \"logarithmic\", ariaLabel: \"Logarithmic\" },\n  { label: <LinearIcon width={22} />, value: \"linear\", ariaLabel: \"Linear\" },\n];\n\nexport const Chart = ({\n  data,\n  filters,\n  isError,\n  isLoading,\n  metricSelected,\n  setScaleSelected,\n  scaleSelected,\n  chartSelected,\n  setChartSelected,\n}: Props) => {\n  const chartRef = useRef(null);\n\n  const { width } = useWindowSize();\n  const isTablet = width >= BREAKPOINTS.tablet;\n  const isDesktop = width >= BREAKPOINTS.desktop;\n  const isBigDesktop = width >= BREAKPOINTS.bigDesktop;\n\n  const token = data?.tokens?.length ? data.tokens[0] : null;\n\n  const dataTransformed = token\n    ? token.time_range_data?.map(item => ({\n        from: new Date(item.from).toISOString(),\n        to: new Date(item.to).toISOString(),\n        symbol: token.token_symbol,\n        volume: item.total_value_transferred,\n        transactions: item.total_messages,\n      }))\n    : null;\n\n  const fromDateFormatted = toLocaleDate(dataTransformed?.[0]?.from);\n  const toDateFormatted = toLocaleDate(dataTransformed?.[dataTransformed.length - 1]?.to);\n\n  return (\n    <div className=\"token-activity-chart\" ref={chartRef}>\n      <div className=\"token-activity-chart-title\">\n        Token Activity{\" \"}\n        <div className=\"token-activity-chart-title-range\">\n          {fromDateFormatted && toDateFormatted && (\n            <>\n              {fromDateFormatted}\n              <ArrowRightIcon />\n              {toDateFormatted}\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"token-activity-chart-graph\">\n        {isError ? (\n          <ErrorPlaceholder errorType=\"chart\" />\n        ) : isLoading ? (\n          <Loader />\n        ) : (\n          <>\n            <WormholeScanBrand />\n\n            <div className=\"token-activity-chart-top\">\n              <div className=\"token-activity-chart-top-toggles\">\n                {isDesktop && chartSelected === \"area\" && metricSelected === \"volume\" && (\n                  <ToggleGroup\n                    ariaLabel=\"Select scale\"\n                    items={SCALE_CHART_LIST}\n                    onValueChange={value => setScaleSelected(value, true)}\n                    type=\"secondary\"\n                    value={scaleSelected}\n                  />\n                )}\n\n                <ToggleGroup\n                  ariaLabel=\"Select type\"\n                  items={TYPE_CHART_LIST}\n                  onValueChange={value => setChartSelected(value)}\n                  type=\"secondary\"\n                  value={chartSelected}\n                />\n              </div>\n            </div>\n\n            <ReactApexChart\n              key={chartSelected + token?.token_symbol + metricSelected}\n              type={chartSelected}\n              height={isDesktop ? 630 : 415}\n              width=\"100%\"\n              series={[\n                {\n                  name: \"Volume or Transfers\",\n                  color: \"var(--color-lime)\",\n                  data: dataTransformed\n                    ? metricSelected === \"volume\"\n                      ? dataTransformed?.map(({ volume }) => volume)\n                      : dataTransformed?.map(({ transactions }) => transactions)\n                    : [],\n                },\n              ]}\n              options={{\n                chart: {\n                  events:\n                    chartSelected === \"bar\"\n                      ? {\n                          mouseLeave: () => {\n                            changePathOpacity({ ref: chartRef, opacity: 1 });\n                          },\n                          mouseMove(e, chart, options) {\n                            if (options.dataPointIndex < 0) {\n                              changePathOpacity({\n                                ref: chartRef,\n                                opacity: 1,\n                              });\n                            }\n                          },\n                        }\n                      : {},\n                  toolbar: { show: false },\n                  zoom: { enabled: false },\n                },\n                dataLabels: { enabled: false },\n                fill: {\n                  type: chartSelected === \"area\" ? \"gradient\" : \"solid\",\n                  gradient: {\n                    opacityFrom: 0.4,\n                    opacityTo: 0,\n                    shadeIntensity: 0,\n                    stops: [0, 100],\n                    type: \"vertical\",\n                  },\n                },\n                grid: {\n                  borderColor: \"var(--color-gray-900)\",\n                  padding: {\n                    bottom: 0,\n                    left: 32,\n                    right: 16,\n                    top: 64,\n                  },\n                  show: true,\n                  strokeDashArray: 5,\n                },\n                labels: dataTransformed?.map(({ from }) => from),\n                states: {\n                  hover: {\n                    filter: {\n                      type: \"none\",\n                    },\n                  },\n                  active: {\n                    filter: {\n                      type: \"none\",\n                    },\n                  },\n                },\n                stroke: {\n                  curve: \"smooth\",\n                  width: chartSelected === \"area\" ? 2 : 0,\n                },\n                tooltip: {\n                  custom: function ({ series, seriesIndex, dataPointIndex, w }) {\n                    const dataPoint = dataTransformed[dataPointIndex];\n                    const { from, to, volume, symbol, transactions } = dataPoint;\n\n                    if (chartSelected === \"bar\") {\n                      updatePathStyles({ chartRef, dataPointIndex });\n                    }\n\n                    return `<div class='token-activity-chart-tooltip'>\n                              <div class='token-activity-chart-tooltip-date'>\n                                <div>\n                                  From:\n                                  ${new Date(from).toLocaleString(\"en-GB\", {\n                                    hour: \"2-digit\",\n                                    minute: \"2-digit\",\n                                  })},\n                                  ${new Date(from).toLocaleString(\"en-GB\", {\n                                    day: \"2-digit\",\n                                    month: \"long\",\n                                    year: \"numeric\",\n                                  })}\n                                </div>\n                                <div>\n                                  To:\n                                  ${new Date(to).toLocaleString(\"en-GB\", {\n                                    hour: \"2-digit\",\n                                    minute: \"2-digit\",\n                                  })},\n                                  ${new Date(to).toLocaleString(\"en-GB\", {\n                                    day: \"2-digit\",\n                                    month: \"long\",\n                                    year: \"numeric\",\n                                  })}\n                                </div>\n                              </div>\n                              <div class='token-activity-chart-tooltip-info'>\n                                ${symbol} Transferred:\n                                <span>\n                                  ${\n                                    metricSelected === \"volume\"\n                                      ? `$${formatNumber(volume)}`\n                                      : transactions\n                                  }\n                                </span>\n                              </div>\n                            </div>`;\n                  },\n                  followCursor: isDesktop,\n                  intersect: false,\n                  shared: true,\n                },\n                xaxis: {\n                  axisBorder: {\n                    show: false,\n                  },\n                  axisTicks: { show: false },\n                  crosshairs: {\n                    show: true,\n                  },\n                  labels: {\n                    formatter: value => {\n                      let date = \"\";\n\n                      if (filters.timespan === \"1h\") {\n                        date = new Date(value).toLocaleString(\"en-GB\", {\n                          hour: \"2-digit\",\n                          minute: \"2-digit\",\n                        });\n                      } else if (filters.timespan === \"1d\") {\n                        date = new Date(value).toLocaleString(\"en-GB\", {\n                          day: \"2-digit\",\n                          month: \"short\",\n                        });\n                      } else {\n                        date = new Date(value).toLocaleString(\"en-GB\", {\n                          month: \"short\",\n                          year: \"2-digit\",\n                        });\n                      }\n\n                      return date;\n                    },\n                    hideOverlappingLabels: true,\n                    offsetX: 0,\n                    rotate: 0,\n                    style: {\n                      colors: \"var(--color-gray-400)\",\n                      fontFamily: \"Roboto Mono, Roboto, sans-serif\",\n                      fontSize: \"12px\",\n                      fontWeight: 400,\n                    },\n                    trim: false,\n                  },\n                  tickAmount: isBigDesktop ? 10 : isDesktop ? 6 : isTablet ? 4 : 2,\n                  tooltip: {\n                    enabled: false,\n                  },\n                },\n                yaxis: {\n                  axisBorder: {\n                    show: false,\n                  },\n                  axisTicks: { show: false },\n                  labels: {\n                    formatter: (val, opts) => {\n                      if (metricSelected === \"volume\") {\n                        return `$${formatterYAxis(val, opts)}`;\n                      } else {\n                        return formatterYAxis(val, opts);\n                      }\n                    },\n                    align: \"left\",\n                    style: {\n                      colors: \"var(--color-gray-400)\",\n                      fontFamily: \"Roboto Mono, Roboto, sans-serif\",\n                      fontSize: \"12px\",\n                      fontWeight: 400,\n                    },\n                  },\n                  logarithmic: scaleSelected === \"logarithmic\" && chartSelected === \"area\",\n                  forceNiceScale: scaleSelected === \"logarithmic\" && chartSelected === \"area\",\n                  min: 0,\n                  opposite: true,\n                  tickAmount: 8,\n                },\n              }}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","export","_chainActivityDefault","default","_searchNotFoundDefault","_tableDefault","_tokenActivityDefault","_chainActivity","interopDefault","_searchNotFound","_table","_tokenActivity","_jsxRuntime","_react","_reactApexcharts","_reactApexchartsDefault","_reactQuery","_sdk","_environmentContext","_analytics","_analyticsDefault","_atoms","_molecules","_apexChartUtils","_wormhole","_client","_hooks","_number","_generic","_date","_filterUtils","_chainActivityUtils","_consts","TYPE_CHART_LIST","label","jsx","ActivityIcon","width","value","ariaLabel","AnalyticsIcon","SCALE_CHART_LIST","LogarithmicIcon","LinearIcon","SCALE_CHART_LIST_TEXT","METRIC_CHART_LIST","useWindowSize","isTablet","BREAKPOINTS","tablet","isDesktop","desktop","isBigDesktop","bigDesktop","environment","useEnvironment","currentNetwork","network","isMainnet","chartRef","useRef","someZeroValue","setSomeZeroValue","useState","chartSelected","setChartSelected","isLoading","setIsLoading","scaleSelected","setScaleSelectedState","setScaleSelected","track","selected","selectedType","metricSelected","setMetricSelected","initialDataDate","Date","setFullYear","getFullYear","startDate","setStartDate","endDate","setEndDate","startDateDisplayed","setStartDateDisplayed","endDateDisplayed","setEndDateDisplayed","showAllSourceChains","setShowAllSourceChains","showAllTargetChains","setShowAllTargetChains","allChainsSerie","setAllChainsSerie","series","setSeries","messagesNumber","setMessagesNumber","allMessagesNumber","setAllMessagesNumber","volumeNumber","setVolumeNumber","allVolumeNumber","setAllVolumeNumber","lastBtnSelected","setLastBtnSelected","openFilters","setOpenFilters","timeRangeData","data","toLocaleDate","to","useLockBodyScroll","isLocked","scrollableClasses","orderedChains","ChainFilterMainnet","ChainFilterTestnet","ALL_SOURCE_CHAINS","icon","GlobeIcon","style","color","showMinus","disabled","ALL_TARGET_CHAINS","sourceChainListSelected","setSourceChainListSelected","targetChainListSelected","setTargetChainListSelected","SOURCE_CHAIN_LIST","map","chainId","getChainName","BlockchainIcon","background","className","colorless","lazy","size","some","item","TARGET_CHAIN_LIST","filters","setFilters","from","toISOString","timespan","sourceChain","targetChain","appId","isUTC00","getTimezoneOffset","isUTCPositive","tickAmount","Math","min","lastTrackedObjectRef","trackAnalytics","objectToSend","selectedTimeRange","toUpperCase","chain","join","JSON","stringify","current","dataAllChains","isError","isErrorAllChains","isFetching","isFetchingAllChains","useQuery","getClient","guardianNetwork","getChainActivity","Promise","getDateList","useCallback","start","end","dateList","dateDifferenceInDays","calculateDateDifferenceInDays","SHORT_TIMESPAN_LIMIT","setUTCHours","getUTCHours","push","MEDIUM_TIMESPAN_LIMIT","startOfDayUTC","getTime","DAY_IN_MILLISECONDS","setUTCDate","getUTCDate","startOfMonthUTC","lastMonthRemoved","setMonth","getMonth","setUTCMonth","getUTCMonth","handleChainSelection","type","lastChainSelected","filter","chainsSelected","chainsSelectedWithoutAll","includes","handleFiltersOpened","prev","useEffect","newFrom","setDate","getDate","newTo","prevFilters","seriesForAllChains","totalVolumeAndCountPerDay","values","reduce","acc","curr","key","slice","emitter_chain","volume","count","details","index","findIndex","detail","splice","y","completeData","obj","date","getNextDate","forEach","sort","a","b","totalMessages","totalVolume","dataByChain","allDates","chainIndices","formatDate","colors","selectedChains","existingData","find","keys","newSeries","localeCompare","sumOfVolume","checkForZeroValues","path","hasZeroValue","hasNonZeroValue","checkValue","currentPath","entries","val","seriesHasZeroValue","seriesHasNonZeroValue","seriesItem","fullscreenBtnRef","jsxs","Fullscreenable","buttonRef","itemName","children","onClick","ref","FullscreenIcon","FilterListIcon","Counter","CrossIcon","Calendar","showDateRange","Select","items","menuFixed","menuListStyles","maxHeight","onValueChange","text","ToggleGroup","formatNumber","ErrorPlaceholder","errorType","Loader","Fragment","WormholeScanBrand","serie","height","options","chart","events","mouseLeave","changePathOpacity","opacity","mouseMove","e","dataPointIndex","toolbar","show","zoom","enabled","stacked","dataLabels","grid","borderColor","strokeDashArray","xaxis","lines","yaxis","padding","top","states","hover","active","stroke","curve","dashArray","fill","gradient","shadeIntensity","opacityFrom","opacityTo","stops","legend","fontFamily","fontSize","fontWeight","floating","labels","markers","radius","onItemClick","toggleDataSeries","position","offsetY","offsetX","horizontalAlign","showForSingleSeries","itemMargin","horizontal","axisBorder","strokeWidth","axisTicks","crosshairs","formatter","formatXaxisLabels","hideOverlappingLabels","rotate","trim","tooltip","formatterYAxis","opposite","logarithmic","forceNiceScale","custom","seriesIndex","w","config","allDataForDate","totalY","updatePathStyles","toLocaleString","hour","minute","day","month","year","numberToSuffix","acronym","chainToChainId","every","grayColors","intersect","shared","_error400","_error400Default","_error500","_error500Default","_error502","_error502Default","_error503","_error503Default","q","errorCode","navigate","useNavigateCustom","goHome","_searchNotFoundSvg","_searchNotFoundSvgDefault","page","title","src","alt","loading","href","DISCORD_URL","target","rel","getBundleURL","bundleURL","getBaseURL","url","replace","matches","stack","match","getOrigin","_astronautSvg","_astronautSvgDefault","_error500Svg","_error500SvgDefault","_error502Svg","_error502SvgDefault","_error503Svg","_error503SvgDefault","_reactTable","columns","defaultSortBy","emptyMessage","numberOfColumns","numberOfRows","onRowClick","trackTxsSortBy","openSortBy","setOpenSortBy","currentSortBy","setCurrentSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setSortBy","useTable","initialState","sortBy","disableSortRemove","useSortBy","sortedColumn","flatMap","group","headers","col","isSorted","desc","isSortedDesc","headerGroup","column","render","toString","selectedColumn","toggleSortBy","optionStyles","getHeaderGroupProps","setTimeout","header","sortIcon","SortByIcon","getHeaderProps","getSortByToggleProps","Tooltip","Array","_","colSpan","row","justAppeared","original","txHash","txHashId","getRowProps","cells","cell","getCellProps","exports1","React","asyncGeneratorStep","gen","reject","_next","_throw","arg","info","error","done","then","_asyncToGenerator","fn","args","arguments","apply","undefined","_extends","assign","source","prototype","hasOwnProperty","_objectWithoutPropertiesLoose","excluded","sourceKeys","indexOf","_toPropertyKey","_toPrimitive","input","hint","prim","Symbol","toPrimitive","TypeError","String","Number","actions","init","defaultRenderer","_ref","_ref$value","emptyRenderer","createElement","defaultColumn","Cell","minWidth","maxWidth","MAX_SAFE_INTEGER","mergeProps","_len","propList","_key","props","next","rest","makePropGetter","hooks","meta","userProps","concat","handlePropGetter","prevProps","isArray","reduceHooks","initial","allowUndefined","nextValue","console","loopHooks","context","hook","ensurePluginOrder","plugins","befores","pluginName","afters","pluginIndex","plugin","before","beforeIndex","functionalUpdate","updater","old","useGetLatest","safeUseLayoutEffect","document","useLayoutEffect","useMountedLayoutEffect","deps","mountedRef","makeRenderer","instance","Comp","flexRender","component","proto","isReactComponent","isClassComponent","getPrototypeOf","$$typeof","description","flattenColumns","flattenBy","assignColumnAccessor","accessor","Header","accessorPath","split","getBy","def","pathObj","cacheKey","pathObjCache","flattenDeep","arr","newArr","d","reOpenBracket","reCloseBracket","set","cursor","pathPart","decorateColumn","userDefaultColumn","Footer","originalWidth","Map","getFirstDefined","isFunction","flat","recurse","expandRows","manualExpandedKey","expanded","_ref$expandSubRows","expandSubRows","expandedRows","handleRow","addToExpandedRows","isExpanded","canExpand","subRows","getFilterMethod","userFilterTypes","filterTypes","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","passiveSupported","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","totalVisibleHeaderCount","defaultGetFooterProps","_ref2","defaultGetHeaderGroupProps","_ref3","defaultGetFooterGroupProps","_ref4","defaultGetRowProps","_ref5","defaultGetCellProps","_ref6","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","stateReducers","reducer","useInstanceBeforeDimensions","headerGroupsDeps","state","hiddenColumns","useInstance","onChange","toggleHidden","checked","isVisible","allColumnsHidden","indeterminate","action","previousState","should","columnId","shouldAll","allColumns","isMountedRef","handleColumn","parentVisible","subColumn","subHeader","flatHeaders","dispatch","getHooks","_instance$autoResetHi","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","_props$initialState","_props$defaultColumn","_props$getSubRows","getSubRows","_props$getRowId","getRowId","_props$stateReducer","stateReducer","_props$useControlledS","useControlledState","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","reducer$1","useInstance$1","rowsById","isAllRowsExpanded","rowId","_extends2","setExpanded","exists","shouldExist","_state$expanded","_instance$manualExpan","_instance$paginateExp","paginateExpandedRows","_instance$expandSubRo","_instance$autoResetEx","autoResetExpanded","getAutoResetExpanded","Boolean","useMemo","expandedDepth","maxDepth","splitId","max","preExpandedRows","ids","filterValue","toLowerCase","exactText","rowValue","exactTextCase","includesAll","includesSome","includesValue","exact","equals","between","Infinity","temp","freeze","__proto__","resetFilters","setFilter","setAllFilters","useFilters","reducer$2","useInstance$2","filterMethod","previousfilter","newFilter","_allColumns","_userFilterTypes","flatRows","manualFilters","_instance$defaultCanF","defaultCanFilter","disableFilters","_instance$autoResetFi","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","found","_React$useMemo","filteredFlatRows","filteredRowsById","filterRows","depth","filteredRows","filteredSoFar","preFilteredRows","warn","nonFilteredColumns","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","reducer$3","useInstance$3","globalFilter","manualGlobalFilter","globalFilterValue","_instance$autoResetGl","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","aggregations","minMax","average","median","mid","floor","nums","unique","Set","uniqueCount","emptyArray","emptyObject","resetGroupBy","setGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","reducer$4","visibleColumnsDeps","groupBy","visibleColumns","useInstance$4","prepareRow$1","canGroupBy","persist","g","isGrouped","groupedIndex","defaultUserAggregations","_instance$groupByFn","groupByFn","defaultGroupByFn","manualGroupBy","_instance$aggregation","userAggregations","_instance$autoResetGr","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","aggregateRowsToValues","leafRows","groupedRows","aggregateFn","aggregate","groupedValues","leafValues","columnValue","aggregateValue","aggregateValueFn","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupUpRecursively","parentId","groupByVal","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","_row$subRows","isPlaceholder","isAggregated","resKey","reSplitAlphaNumeric","compareBasic","getRowValuesByColumnID","row1","row2","isNaN","sortTypes","alphanumeric","rowA","rowB","_getRowValuesByColumn","aa","shift","bb","an","parseInt","bn","combo","datetime","_getRowValuesByColumn2","basic","_getRowValuesByColumn3","string","_getRowValuesByColumn4","alower","blower","number","_getRowValuesByColumn5","replaceNonNumeric","resetSortBy","clearSortBy","sortType","sortDescFirst","defaultGetSortByToggleProps","reducer$5","useInstance$5","_instance$isMultiSort","isMultiSortEvent","shiftKey","canSort","disableMultiSort","newSortBy","_sortBy","sortAction","multi","disableMultiRemove","_instance$maxMultiSor","maxMultiSortColCount","_sortBy2","existingSortBy","existingIndex","hasDescDefined","_newSortBy","_instance$orderByFn","orderByFn","defaultOrderByFn","userSortTypes","manualSortBy","defaultCanSort","disableSortBy","_instance$autoResetSo","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","sortedIndex","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","reducer$6","useInstance$6","pageSize","pageIndex","pageCount","newPageIndex","canNavigate","topRowIndex","_instance$autoResetPa","autoResetPage","userPageCount","_instance$state","manualPagination","getAutoResetPage","ceil","pageOptions","pageStart","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","reducer$7","useInstanceAfterData","accessValue","materializedColumns","materializedColumnsDeps","visibleColumns$1","useInstance$7","prepareRow$2","defaultPivotColumns","canPivot","pivotColumns","setPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","buildPivotColumns","pivotFilters","pivotColumn","uniqueValue","columnGroup","PivotHeader","isPivotGroup","pivotValue","sourceColumn","isPivoted","originalRow","_ref5$instance$state","_ref7","_instance$autoResetPi","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","toggleAllPageRowsSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","defaultGetToggleAllPageRowsSelectedProps","reducer$8","useInstance$8","prepareRow$3","_instance$manualRowSe","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","isAllPageRowsSelected","setSelected","_instance$nonGroupedR","_setSelected","_rowsById","_instance$selectSubRo","selectSubRows","newSelectedRowIds","handleRowById","_setSelected2","_rowsById2","_instance$selectSubRo2","_selectSubRows","_getSubRows","_selectAll","_newSelectedRowIds","_handleRowById","_instance$nonGroupedR2","_instance$autoResetSe","autoResetSelectedRows","_instance$selectSubRo3","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","reducer$9","useInstance$9","prepareRow$4","_instance$initialRowS","initialRowStateAccessor","_instance$initialCell","initialCellStateAccessor","rowState","oldRowState","_oldRowState$cellStat","_rowsById$_rowId","_rowsById$_rowId$cell","_extends3","_extends4","_rowId","_value","_oldRowState","oldCellState","cellState","_instance$autoResetRo","autoResetRowState","getAutoResetRowState","_instance$initialRowS2","_instance$initialCell2","setState","resetColumnOrder","setColumnOrder","useColumnOrder","reducer$a","columnOrder","visibleColumns$2","useInstance$a","columnOrderCopy","columnsCopy","columnsInOrder","_loop","targetColumnId","foundIndex","canResize","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","getResizerProps","defaultGetResizerProps","reducer$b","useInstance$b","useInstanceBeforeDimensions$1","onResizeStart","leafHeaders","raf","mostRecentClientX","isTouchEvent","touches","headerIdWidths","headersToResize","recurseHeader","totalWidth","clientX","round","dispatchEnd","cancelAnimationFrame","dispatchMove","scheduleDispatchMoveOnNextAnimationFrame","clientXPos","requestAnimationFrame","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","passiveIfSupported","passiveEventSupported","supported","passive","addEventListener","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","_clientX","_state$columnResizing","_columnWidth","_state$columnResizing2","percentageDeltaX","deltaX","newColumnWidths","_headerIdWidths","headerId","headerWidth","disableResizing","isResizing","_instance$autoResetRe","autoResetResize","getAutoResetResize","resetResizing","cellStyles","useAbsoluteLayout","getRowStyles","getFooterGroupProps","left","totalLeft","getFooterProps","totalColumnsWidth","cellStyles$1","display","boxSizing","getRowStyles$1","useBlockLayout","useFlexLayout","getRowStyles$2","totalColumnsMinWidth","flex","totalFlexWidth","totalMinWidth","useGridLayout","reducer$c","getTableProps$1","getHeaderProps$1","gridTemplateColumns","_instance$state$colum","gridLayout","startWidths","gridColumn","getElementWidth","minWidths","maxWidths","headerIdGridWidths","_state$gridLayout","_minWidths","_maxWidths","_state$gridLayout$hea","_headerIdGridWidths","_document$getElementB","getElementById","offsetWidth","useAsyncDebounce","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","regeneratorRuntime","mark","_callee2","_len2","_key2","_args2","wrap","_context2","promise","timeout","clearTimeout","_callee","_context","t0","t1","sent","t2","finish","stop","abrupt","instanceRef","useOptions","columnsDeps","allColumnsDeps","useFinalInstance","_getInstance","userColumns","getStateReducer","s","handler","_React$useReducer","useReducer","reducerState","linkColumnStructure","allColumnsQueue","accessRowsForColumn","accessValueHooks","accessRow","rowIndex","parentRows","originalSubRows","initialRows","duplicateColumns","makeHeaderGroups","additionalHeaderProperties","scanColumns","uid","getUID","parentColumns","hasParents","newParent","latestParentColumn","reverse","originalId","placeholderOf","all","visibleColumnsDep","_calculateHeaderWidth","calculateHeaderWidths","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","subHeaders","_calculateHeaderWidth2","totalMaxWidth","totalColumnsMaxWidth","footerGroups","_token","_chart","RANGE_LIST","getISODateZeroed","timeRange","isHomePage","filterContainerRef","selectedTopAssetTimeRange","setSelectedTopAssetTimeRange","rowSelected","setRowSelected","tokenSelectedByUser","setTokenSelectedByUser","setFiltersState","todayISOString","symbol","newFilters","sourceChains","targetChains","CHAIN_LIST","isFetchingList","isErrorList","dataList","getTokensSymbolVolume","limit","onSuccess","response","symbolIndex","updateFiltersAndSelection","newSymbol","isLoadingChart","isErrorChart","dataChart","getTokensSymbolActivity","handleRowSelected","useOutsideClick","callback","NavLink","buttonStyles","justifyContent","getTokenIcon","ChevronDownIcon","Chart","token","tokens","dataTransformed","time_range_data","token_symbol","total_value_transferred","transactions","total_messages","fromDateFormatted","toDateFormatted","ArrowRightIcon","bottom","right","followCursor","opts","align","renderErr","isExoticComponent","makePathArray","makeDefaultPluginHooks","expandAll","findExpandedDepth","stateWithoutGlobalFilter","resolvedGroupBy","groupByColumns","nonGroupByColumns","rowGroupsMap","aggregatedGroupedRows","pageEnd","resolvedPivot","newMaterialized","selectAll","getLeafHeaders"],"version":3,"file":"Home.afadaf2e.js.map"}