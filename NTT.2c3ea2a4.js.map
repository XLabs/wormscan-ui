{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,G,I,E,E,qBCAA,EAAA,EAAA,SACA,EAAA,EAAA,eACA,EAAA,EAAA,iB,E,E,c,C,GACA,EAAA,EAAA,kBACA,EAAA,EAAA,0BACA,EAAA,EAAA,kCACA,EAAA,EAAA,cACA,EAAA,EAAA,wBACA,EAAA,EAAA,oBACA,EAAA,EAAA,WACA,EAAA,EAAA,sBACA,EAAA,iBA4Ie,EAAA,OAAA,CA1IH,KACV,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,EAAU,KACR,AAAA,CAAA,EAAA,EAAA,OAAQ,AAAR,EAAU,IAAI,CAAC,CAAE,MAAO,eAAgB,EAC1C,EAAG,EAAE,EAEL,GAAM,CAAE,YAAA,CAAW,CAAE,CAAG,AAAA,CAAA,EAAA,EAAA,cAAc,AAAd,IAElB,EAAY,AAAmB,YADd,EAAY,OAAO,CAGpC,CACJ,KAAM,CAAS,CACf,UAAW,CAAc,CACzB,QAAS,CAAY,CACtB,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EACF,CAAC,eAAe,CAChB,IACE,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,IACG,eAAe,CAAC,iBAAiB,GACjC,IAAI,CAAC,AAAA,GAKG,AAJe,EAAM,MAAM,CAChC,AAAA,GAAQ,AAAkB,0BAAlB,EAAK,QAAQ,EAAgC,EAAK,QAAQ,GAAK,EAAA,UAAU,CAG/D,CAAC,EAAE,EAE7B,CAAE,QAAS,CAAU,GAGjB,CACJ,KAAM,CAAU,CAChB,WAAY,CAAoB,CAChC,QAAS,CAAiB,CAC3B,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EACF,CAAC,mBAAmB,CACpB,UACE,IAAM,EAAiB,MAAM,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,IAAY,MAAM,CAAC,eAAe,GAC/D,OAAO,GACH,OAAO,AAAA,GAAQ,AAA4B,MAA5B,EAAK,kBAAkB,EAAY,AAAsB,aAAtB,EAAK,YAAY,EACpE,IAAI,AAAA,GAAS,CAAA,CACZ,aAAc,EAAK,YAAY,CAC/B,OAAQ,EAAK,MAAM,CACnB,mBAAoB,CAAC,EAAK,uBAAuB,CACjD,wBAAyB,CAAC,EAAK,kBAAkB,CACjD,UAAW,CAAC,EAAK,uBAAuB,EAAI,EAC5C,aAAc,CAAC,EAAK,UAAU,CAC9B,YAAa,CAAC,EAAK,KAAK,CACxB,MACE,AAAA,AAAA,EAAA,IAAA,CAAC,MADH,CACO,UAAU,wC,S,CACb,AAAA,AAAA,EAAA,GAAA,CAAC,MAAD,CACE,IAAK,GAAM,OAAO,MAClB,IAAK,CAAA,EAAG,EAAK,MAAM,CAAC,KAAK,CAAC,CAC1B,OAAO,KACP,MAAM,KACN,UAAU,kCACV,QAAQ,M,GAET,EAAK,MAAM,C,A,GAGhB,sBACE,AAAA,AAAA,EAAA,IAAA,CAAC,MADH,CACO,UAAU,kC,S,CACb,AAAA,AAAA,EAAA,GAAA,CAAC,KAAD,CAAI,SAAA,yB,GAA4B,IAAE,AAAA,AAAA,EAAA,YAAW,CAAE,CAAC,EAAK,uBAAuB,CAAE,G,A,GAGlF,kBACE,AAAA,AAAA,EAAA,IAAA,CAAC,MADH,CACO,UAAU,kC,S,CACb,AAAA,AAAA,EAAA,GAAA,CAAC,KAAD,CAAI,SAAA,oB,GACH,AAAA,AAAA,EAAA,YAAW,CAAE,CAAC,EAAK,kBAAkB,CAAE,G,A,GAG5C,IACE,AAAA,AAAA,EAAA,IAAA,CAAC,MADH,CACO,UAAU,kC,S,CACb,AAAA,AAAA,EAAA,GAAA,CAAC,KAAD,CAAI,SAAA,yB,GAA4B,IAC/B,AAAA,AAAA,EAAA,YAAY,CACX,GAAM,wBAA0B,CAAC,EAAK,uBAAuB,CAAG,KAAA,EAChE,G,A,GAIN,OACE,AAAA,AAAA,EAAA,IAAA,CAAC,MADH,CACO,UAAU,yC,S,CACb,AAAA,AAAA,EAAA,GAAA,CAAC,KAAD,CAAI,SAAA,Y,GAAe,IAAE,AAAA,AAAA,EAAA,YAAW,CAAE,CAAC,EAAK,UAAU,CAAE,G,A,GAGxD,MACE,AAAA,AAAA,EAAA,IAAA,CAAC,MADH,CACO,UAAU,kC,S,CAAkC,IAC7C,AAAA,AAAA,EAAA,YAAW,CAAE,CAAC,AAAC,CAAA,CAAC,EAAK,KAAI,AAAJ,EAAO,OAAO,CAAC,I,A,GAG1C,YACE,AAAA,AAAA,EAAA,GAAA,CAAC,MADH,CACO,UAAU,+CACb,SAAA,AAAA,AAAA,EAAA,GAAA,CAAC,AAAA,EAAA,OAAO,CAAR,CACE,QAAS,IAAM,OAAO,QAAQ,CAAC,EAAG,GAClC,GAAI,CAAC,eAAe,EAAE,EAAK,YAAY,CAAC,CAAC,EAAE,EAAK,MAAM,CAAA,CAAE,CACzD,SAAA,c,E,EAKP,CAAA,EACJ,EACA,CACE,QAAS,CACX,GAGF,MACE,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,UAAU,CADb,CAEI,SAAA,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,W,S,CACb,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,KAAD,CAAI,UAAU,iB,S,CACZ,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,YAAW,CAAZ,CAAc,SAAU,EAAA,UAAS,CAAG,MAAO,E,GAAM,O,A,GAEnD,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,IAAD,CAAG,UAAU,uB,S,CAAuB,qMAGd,IACpB,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,IAAD,CACE,UAAU,mCACV,KAAM,EAAA,OAAM,CACZ,OAAO,SACP,IAAI,aACL,SAAA,Y,G,A,GAKH,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,KAAI,CAAL,CAAO,KAAM,EAAW,UAAW,EAAgB,QAAS,C,GAE5D,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,gBAAe,CAAhB,CACE,KAAM,EACN,UAAW,EACX,QAAS,C,G,A,E,EAKnB,C,E,C,oB,Q,M,Q,c,Q,gB,Q,iB,Q,yB,Q,iC,Q,a,Q,uB,Q,mB,Q,U,Q,qB,Q,gB,Q,iD,O,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GC1Ia,EAAA,MAAA,CAAA,EAAA,QAAA,IAAA,G,I,E,E,qBAVb,EAAA,EAAA,wBACA,EAAA,EAAA,qBACA,EAAA,EAAA,oBAQO,IAAM,EAAQ,CAAC,CAAE,KAAA,CAAI,CAAE,UAAA,CAAS,CAAE,QAAA,CAAO,CAAS,IACvD,IAAM,EAAc,AAAC,GAAoB,EAAQ,AAAA,CAAA,EAAA,EAAA,YAAW,AAAX,EAAa,CAAC,EAAO,GAAK,KAE3E,MACE,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MADH,CACO,UAAU,iBACZ,SAAA,EACC,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,MAAK,CAAA,CAAA,GAEN,AAHD,CAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,QAAA,CAAA,C,S,CAIG,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,sB,S,CACb,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,4B,S,CAA4B,eAEzC,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAD,CAAc,KAAK,sD,G,A,GAErB,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,4B,S,CAA4B,IACvC,EAAU,KAAO,EAAY,GAAM,yB,A,G,A,GAGzC,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,sB,S,CACb,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,4B,S,CAA4B,aAEzC,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAD,CAAc,KAAK,sD,G,A,GAErB,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,4B,S,CAA4B,IACvC,EAAU,KAAO,EAAY,GAAM,qB,A,G,A,GAGzC,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,sB,S,CACb,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,4B,S,CAA4B,sBAEzC,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAD,CAAc,KAAK,wD,G,A,GAErB,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,4B,S,CAA4B,IACvC,EAAU,KAAO,EAAY,GAAM,qB,A,G,A,GAGzC,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,sB,S,CACb,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,4B,S,CAA4B,kBAEzC,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAD,CAAc,KAAK,+C,G,A,GAErB,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAAD,CAAK,UAAU,4BACZ,SAAA,EAAU,KAAO,EAAY,GAAM,e,G,A,GAGxC,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,sB,S,CACb,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MAAD,CAAK,UAAU,4B,S,CAA4B,gBAEzC,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAD,CAAc,KAAK,uD,G,A,GAErB,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAAD,CAAK,UAAU,4BACZ,SAAA,EAAU,KAAO,EAAY,GAAM,kB,G,A,G,A,E,EAOlD,EAEM,EAAe,CAAC,CAAE,KAAA,CAAI,CAAoB,GAC9C,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,OAAM,CADT,CACW,QAAS,EAAM,KAAK,OAC3B,SAAA,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAAD,CAAK,UAAU,iCACb,SAAA,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,cAAc,CAAf,CAAA,E,E,E,E,C,oB,Q,uB,Q,oB,Q,mB,Q,iD,O,E,C,Q,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GC7DO,EAAA,MAAA,CAAA,EAAA,mBAAA,IAAA,G,I,E,E,qBAbb,EAAA,EAAA,SACA,EAAA,EAAA,qBACA,EAAA,EAAA,cACA,EAAA,EAAA,4BACA,EAAA,EAAA,mBACA,EAAA,EAAA,sBAQO,IAAM,EAAmB,CAAC,CAAE,KAAA,CAAI,CAAE,UAAA,CAAS,CAAE,QAAA,CAAO,CAAS,IAClE,GAAM,CAAE,MAAA,CAAK,CAAE,CAAG,AAAA,CAAA,EAAA,EAAA,aAAa,AAAb,IACZ,EAAY,GAAS,AAAA,EAAA,WAAU,CAAE,OAAO,CACxC,EAAW,AAAA,CAAA,EAAA,EAAA,iBAAiB,AAAjB,IAEX,EAAU,AAAA,CAAA,EAAA,EAAA,OAAM,AAAN,EAAQ,IACf,EACH,EAAA,WAAU,CACV,IAAI,EAAA,WAAU,CAAG,CAAE,OAAQ,eAAgB,SAAU,aAAiC,EAAE,CAC3F,CAAC,EAAU,EAEd,MACE,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,MADH,CACO,UAAU,uB,S,CACb,AAAA,CAAA,EAAA,EAAA,IAAA,AAAA,EAAC,KAAD,CAAI,UAAU,6B,S,CACZ,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,gBAAe,CAAhB,CAAA,GAAoB,8B,A,GAGrB,EACC,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MADF,CACM,UAAU,6BAA6B,SAAA,sBAE5C,GAAA,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,MAAD,CAAK,UAAU,6BACb,SAAA,AAAA,CAAA,EAAA,EAAA,GAAA,AAAA,EAAC,EAAA,KAAK,CAAN,CACE,QAAS,EACT,KAAM,GAAM,OAAS,EAAI,EAAO,EAAE,CAClC,aAAa,6BACb,UAAW,EACX,cAAe,CACb,GAAI,wBACJ,KAAM,CAAA,CACR,EACA,WAAY,AAAA,IACV,GAAI,EAEF,OADA,OAAO,QAAQ,CAAC,EAAG,GACZ,EAAS,CAAC,eAAe,EAAE,EAAE,YAAY,CAAC,CAAC,EAAE,EAAE,MAAM,CAAA,CAAE,CAElE,C,E,G,A,EAMZ,C,E,C,oB,Q,M,Q,oB,Q,a,Q,2B,Q,kB,Q,qB,Q,iD,O,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCzBa,EAAA,MAAA,CAAA,EAAA,cAAA,IAAA,GAJb,IAAM,EAAe,AAAC,GAAyB,CAAC,EAAsB,IAC7D,EAAM,QAAQ,CAAC,EAAI,CAAe,EAAK,QAAQ,CAAC,EAAI,CAGhD,EAAyC,CACpD,CAAE,OAAQ,QAAS,SAAU,QAAS,SAXnB,CAAC,EAAsB,KAC1C,IAAM,EAAI,EAAK,QAAQ,CAAC,MAAM,CAAC,WAAW,GACpC,EAAI,EAAK,QAAQ,CAAC,MAAM,CAAC,WAAW,GAC1C,OAAO,EAAE,aAAa,CAAC,EACzB,CAO+D,EAC7D,CACE,OAAQ,0BACR,SAAU,wBACV,SAAU,EAAa,qBACzB,EACA,CACE,OAAQ,qBACR,SAAU,oBACV,SAAU,EAAa,0BACzB,EACA,CAAE,OAAQ,0BAA2B,SAAU,MAAO,SAAU,EAAa,YAAa,EAE1F,CAAE,OAAQ,QAAS,SAAU,QAAS,SAAU,EAAa,cAAe,EAC7E,A,E,C,iD,O,E,C,M,C,W,E,C,E,E,E,C,E","sources":["<anon>","src/pages/Analytics/NTT/index.tsx","src/pages/Analytics/NTT/Stats.tsx","src/pages/Analytics/NTT/TokensTradedList.tsx","src/utils/nttUtils.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"brvXB\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _reactQuery = require(\"react-query\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nvar _client = require(\"src/api/Client\");\nvar _baseLayout = require(\"src/layouts/BaseLayout\");\nvar _environmentContext = require(\"src/context/EnvironmentContext\");\nvar _consts = require(\"src/consts\");\nvar _atoms = require(\"src/components/atoms\");\nvar _number = require(\"src/utils/number\");\nvar _stats = require(\"./Stats\");\nvar _tokensTradedList = require(\"./TokensTradedList\");\nvar _stylesScss = require(\"./styles.scss\");\nconst NTT = ()=>{\n    (0, _react.useEffect)(()=>{\n        (0, _analyticsDefault.default).page({\n            title: `ANALYTICS-NTT`\n        });\n    }, []);\n    const { environment } = (0, _environmentContext.useEnvironment)();\n    const currentNetwork = environment.network;\n    const isMainnet = currentNetwork === \"Mainnet\";\n    const { data: dataStats, isLoading: isLoadingStats, isError: isErrorStats } = (0, _reactQuery.useQuery)([\n        \"nttPageStats\"\n    ], ()=>(0, _client.getClient)().guardianNetwork.getProtocolsStats().then((stats)=>{\n            const statsFiltered = stats.filter((item)=>item.protocol === \"native_token_transfer\" || item.protocol === (0, _consts.NTT_APP_ID));\n            return statsFiltered[0];\n        }), {\n        enabled: isMainnet\n    });\n    const { data: tokensList, isFetching: isFetchingTokensList, isError: isErrorTokensList } = (0, _reactQuery.useQuery)([\n        \"nttPageTokenList\"\n    ], async ()=>{\n        const dataTokensList = await (0, _client.getClient)().nttApi.getNttTokenList();\n        return dataTokensList?.filter((item)=>item.circulating_supply !== \"0\" && item.coingecko_id !== \"usd-coin\").map((item)=>({\n                coingecko_id: item.coingecko_id,\n                symbol: item.symbol,\n                fullyDilutedNumber: +item.fully_diluted_valuation,\n                circulatingSupplyNumber: +item.circulating_supply,\n                tvtNumber: +item.total_value_transferred || 0,\n                volumeNumber: +item.volume_24h,\n                priceNumber: +item.price,\n                token: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"ntt-page-tokens-list-table-item token\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"img\", {\n                            src: item?.image?.small,\n                            alt: `${item.symbol} icon`,\n                            height: \"24\",\n                            width: \"24\",\n                            className: \"top-asset-list-row-item-to-icon\",\n                            loading: \"lazy\"\n                        }),\n                        item.symbol\n                    ]\n                }),\n                fullyDilutedValuation: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"ntt-page-tokens-list-table-item\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                            children: \"FULLY DILUTED VALUATION\"\n                        }),\n                        \"$\",\n                        (0, _number.formatNumber)(+item.fully_diluted_valuation, 0)\n                    ]\n                }),\n                circulatingSupply: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"ntt-page-tokens-list-table-item\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                            children: \"CIRCULATING SUPPLY\"\n                        }),\n                        (0, _number.formatNumber)(+item.circulating_supply, 0)\n                    ]\n                }),\n                tvt: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"ntt-page-tokens-list-table-item\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                            children: \"TOTAL VALUE TRANSFERRED\"\n                        }),\n                        \"$\",\n                        (0, _number.formatNumber)(item?.total_value_transferred ? +item.total_value_transferred : undefined, 0)\n                    ]\n                }),\n                volume: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"ntt-page-tokens-list-table-item volume\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                            children: \"24H VOLUME\"\n                        }),\n                        \"$\",\n                        (0, _number.formatNumber)(+item.volume_24h, 0)\n                    ]\n                }),\n                price: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"ntt-page-tokens-list-table-item\",\n                    children: [\n                        \"$\",\n                        (0, _number.formatNumber)(+(+item.price).toFixed(4))\n                    ]\n                }),\n                viewDetails: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                    className: \"ntt-page-tokens-list-table-item view-details\",\n                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.NavLink), {\n                        onClick: ()=>window.scrollTo(0, 0),\n                        to: `/analytics/ntt/${item.coingecko_id}/${item.symbol}`,\n                        children: \"View details\"\n                    })\n                })\n            }));\n    }, {\n        enabled: isMainnet\n    });\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _baseLayout.BaseLayout), {\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n            className: \"ntt-page\",\n            children: [\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h1\", {\n                    className: \"ntt-page-title\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ProtocolIcon), {\n                            protocol: (0, _consts.NTT_APP_ID),\n                            width: 24\n                        }),\n                        \" NTT\"\n                    ]\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"p\", {\n                    className: \"ntt-page-description\",\n                    children: [\n                        \"Native Token Transfers (NTT) is an open framework that enables the seamless creation and transfer of multichain tokens, while maintaining ownership and contract upgradability across blockchains.\",\n                        \" \",\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"a\", {\n                            className: \"governor-header-description-link\",\n                            href: (0, _consts.NTT_URL),\n                            target: \"_blank\",\n                            rel: \"noreferrer\",\n                            children: \"Learn more\"\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _stats.Stats), {\n                    data: dataStats,\n                    isLoading: isLoadingStats,\n                    isError: isErrorStats\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _tokensTradedList.TokensTradedList), {\n                    data: tokensList,\n                    isLoading: isFetchingTokensList,\n                    isError: isErrorTokensList\n                })\n            ]\n        })\n    });\n};\nexports.default = NTT;\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"react-query\":\"dbjqN\",\"src/analytics\":\"cr0zc\",\"src/api/Client\":\"bTumr\",\"src/layouts/BaseLayout\":\"ibTEQ\",\"src/context/EnvironmentContext\":\"jjAhi\",\"src/consts\":\"2l9qr\",\"src/components/atoms\":\"jMZmV\",\"src/utils/number\":\"c38zr\",\"./Stats\":\"cdTCL\",\"./TokensTradedList\":\"2liEz\",\"./styles.scss\":\"SAfxV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"cdTCL\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"Stats\", ()=>Stats);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _atoms = require(\"src/components/atoms\");\nvar _generic = require(\"src/icons/generic\");\nvar _number = require(\"src/utils/number\");\nconst Stats = ({ data, isLoading, isError })=>{\n    const renderValue = (value)=>value ? (0, _number.formatNumber)(+value, 0) : \" -\";\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n        className: \"ntt-page-stats\",\n        children: isLoading ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Loader), {}) : /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n            children: [\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"ntt-page-stats-item\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"ntt-page-stats-item-label\",\n                            children: [\n                                \"TOTAL VOLUME\",\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(StatsTooltip, {\n                                    text: \"Total value in USD transferred through Wormhole NTT.\"\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"ntt-page-stats-item-value\",\n                            children: [\n                                \"$\",\n                                isError ? \" -\" : renderValue(data?.total_value_transferred)\n                            ]\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"ntt-page-stats-item\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"ntt-page-stats-item-label\",\n                            children: [\n                                \"24H VOLUME\",\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(StatsTooltip, {\n                                    text: \"USD volume transferred via NTT in the last 24 hours.\"\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"ntt-page-stats-item-value\",\n                            children: [\n                                \"$\",\n                                isError ? \" -\" : renderValue(data?.last_24_hour_volume)\n                            ]\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"ntt-page-stats-item\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"ntt-page-stats-item-label\",\n                            children: [\n                                \"TOTAL VALUE SECURED\",\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(StatsTooltip, {\n                                    text: \"Sum of the fully diluted valuations of all NTT tokens.\"\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"ntt-page-stats-item-value\",\n                            children: [\n                                \"$\",\n                                isError ? \" -\" : renderValue(data?.total_value_secured)\n                            ]\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"ntt-page-stats-item\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"ntt-page-stats-item-label\",\n                            children: [\n                                \"TOTAL TRANSFERS\",\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(StatsTooltip, {\n                                    text: \"Total number of NTT transfers made over time.\"\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                            className: \"ntt-page-stats-item-value\",\n                            children: isError ? \" -\" : renderValue(data?.total_messages)\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"ntt-page-stats-item\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"ntt-page-stats-item-label\",\n                            children: [\n                                \"24H TRANSFERS\",\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(StatsTooltip, {\n                                    text: \"Number of NTT transactions made in the last 24 hours.\"\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                            className: \"ntt-page-stats-item-value\",\n                            children: isError ? \" -\" : renderValue(data?.last_day_messages)\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n};\nconst StatsTooltip = ({ text })=>/*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Tooltip), {\n        tooltip: text,\n        type: \"info\",\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n            className: \"ntt-page-stats-item-label-icon\",\n            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.InfoCircleIcon), {})\n        })\n    });\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"src/components/atoms\":\"jMZmV\",\"src/icons/generic\":\"23xak\",\"src/utils/number\":\"c38zr\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"2liEz\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"TokensTradedList\", ()=>TokensTradedList);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _generic = require(\"src/icons/generic\");\nvar _consts = require(\"src/consts\");\nvar _organisms = require(\"src/components/organisms\");\nvar _hooks = require(\"src/utils/hooks\");\nvar _nttUtils = require(\"src/utils/nttUtils\");\nconst TokensTradedList = ({ data, isLoading, isError })=>{\n    const { width } = (0, _hooks.useWindowSize)();\n    const isDesktop = width >= (0, _consts.BREAKPOINTS).desktop;\n    const navigate = (0, _hooks.useNavigateCustom)();\n    const columns = (0, _react.useMemo)(()=>{\n        return isDesktop ? (0, _nttUtils.COLUMNS_NTT) : [\n            ...(0, _nttUtils.COLUMNS_NTT),\n            {\n                Header: \"View Details\",\n                accessor: \"viewDetails\"\n            }\n        ];\n    }, [\n        isDesktop\n    ]);\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n        className: \"ntt-page-tokens-list\",\n        children: [\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h3\", {\n                className: \"ntt-page-tokens-list-title\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.Rectangle3DIcon2), {}),\n                    \" Tokens Transferred via NTT\"\n                ]\n            }),\n            isError ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"ntt-page-tokens-list-error\",\n                children: \"Failed to get tokens\"\n            }) : /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"ntt-page-tokens-list-table\",\n                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _organisms.Table), {\n                    columns: columns,\n                    data: data?.length > 0 ? data : [],\n                    emptyMessage: \"There are no transactions.\",\n                    isLoading: isLoading,\n                    defaultSortBy: {\n                        id: \"fullyDilutedValuation\",\n                        desc: true\n                    },\n                    onRowClick: (v)=>{\n                        if (isDesktop) {\n                            window.scrollTo(0, 0);\n                            return navigate(`/analytics/ntt/${v.coingecko_id}/${v.symbol}`);\n                        }\n                    }\n                })\n            })\n        ]\n    });\n};\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"src/icons/generic\":\"23xak\",\"src/consts\":\"2l9qr\",\"src/components/organisms\":\"lKAW4\",\"src/utils/hooks\":\"2VXdL\",\"src/utils/nttUtils\":\"aoo2D\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"aoo2D\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"COLUMNS_NTT\", ()=>COLUMNS_NTT);\nconst sortBySymbol = (rowA, rowB)=>{\n    const a = rowA.original.symbol.toUpperCase();\n    const b = rowB.original.symbol.toUpperCase();\n    return a.localeCompare(b);\n};\nconst sortByNumber = (key)=>(rowA, rowB)=>{\n        return rowA.original[key] - rowB.original[key];\n    };\nconst COLUMNS_NTT = [\n    {\n        Header: \"Token\",\n        accessor: \"token\",\n        sortType: sortBySymbol\n    },\n    {\n        Header: \"Fully Diluted Valuation\",\n        accessor: \"fullyDilutedValuation\",\n        sortType: sortByNumber(\"fullyDilutedNumber\")\n    },\n    {\n        Header: \"Circulating Supply\",\n        accessor: \"circulatingSupply\",\n        sortType: sortByNumber(\"circulatingSupplyNumber\")\n    },\n    {\n        Header: \"Total Value Transferred\",\n        accessor: \"tvt\",\n        sortType: sortByNumber(\"tvtNumber\")\n    },\n    // { Header: \"24h Volume\", accessor: \"volume\", sortType: sortByNumber(\"volumeNumber\") },\n    {\n        Header: \"Price\",\n        accessor: \"price\",\n        sortType: sortByNumber(\"priceNumber\")\n    }\n];\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"SAfxV\":[function() {},{}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=NTT.2c3ea2a4.js.map\n","import { useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport analytics from \"src/analytics\";\nimport { getClient } from \"src/api/Client\";\nimport { BaseLayout } from \"src/layouts/BaseLayout\";\nimport { useEnvironment } from \"src/context/EnvironmentContext\";\nimport { NTT_APP_ID, NTT_URL } from \"src/consts\";\nimport { NavLink, ProtocolIcon } from \"src/components/atoms\";\nimport { formatNumber } from \"src/utils/number\";\nimport { Stats } from \"./Stats\";\nimport { TokensTradedList } from \"./TokensTradedList\";\nimport \"./styles.scss\";\n\nconst NTT = () => {\n  useEffect(() => {\n    analytics.page({ title: `ANALYTICS-NTT` });\n  }, []);\n\n  const { environment } = useEnvironment();\n  const currentNetwork = environment.network;\n  const isMainnet = currentNetwork === \"Mainnet\";\n\n  const {\n    data: dataStats,\n    isLoading: isLoadingStats,\n    isError: isErrorStats,\n  } = useQuery(\n    [\"nttPageStats\"],\n    () =>\n      getClient()\n        .guardianNetwork.getProtocolsStats()\n        .then(stats => {\n          const statsFiltered = stats.filter(\n            item => item.protocol === \"native_token_transfer\" || item.protocol === NTT_APP_ID,\n          );\n\n          return statsFiltered[0];\n        }),\n    { enabled: isMainnet },\n  );\n\n  const {\n    data: tokensList,\n    isFetching: isFetchingTokensList,\n    isError: isErrorTokensList,\n  } = useQuery(\n    [\"nttPageTokenList\"],\n    async () => {\n      const dataTokensList = await getClient().nttApi.getNttTokenList();\n      return dataTokensList\n        ?.filter(item => item.circulating_supply !== \"0\" && item.coingecko_id !== \"usd-coin\")\n        .map(item => ({\n          coingecko_id: item.coingecko_id,\n          symbol: item.symbol,\n          fullyDilutedNumber: +item.fully_diluted_valuation,\n          circulatingSupplyNumber: +item.circulating_supply,\n          tvtNumber: +item.total_value_transferred || 0,\n          volumeNumber: +item.volume_24h,\n          priceNumber: +item.price,\n          token: (\n            <div className=\"ntt-page-tokens-list-table-item token\">\n              <img\n                src={item?.image?.small}\n                alt={`${item.symbol} icon`}\n                height=\"24\"\n                width=\"24\"\n                className=\"top-asset-list-row-item-to-icon\"\n                loading=\"lazy\"\n              />\n              {item.symbol}\n            </div>\n          ),\n          fullyDilutedValuation: (\n            <div className=\"ntt-page-tokens-list-table-item\">\n              <h4>FULLY DILUTED VALUATION</h4>${formatNumber(+item.fully_diluted_valuation, 0)}\n            </div>\n          ),\n          circulatingSupply: (\n            <div className=\"ntt-page-tokens-list-table-item\">\n              <h4>CIRCULATING SUPPLY</h4>\n              {formatNumber(+item.circulating_supply, 0)}\n            </div>\n          ),\n          tvt: (\n            <div className=\"ntt-page-tokens-list-table-item\">\n              <h4>TOTAL VALUE TRANSFERRED</h4>$\n              {formatNumber(\n                item?.total_value_transferred ? +item.total_value_transferred : undefined,\n                0,\n              )}\n            </div>\n          ),\n          volume: (\n            <div className=\"ntt-page-tokens-list-table-item volume\">\n              <h4>24H VOLUME</h4>${formatNumber(+item.volume_24h, 0)}\n            </div>\n          ),\n          price: (\n            <div className=\"ntt-page-tokens-list-table-item\">\n              ${formatNumber(+(+item.price).toFixed(4))}\n            </div>\n          ),\n          viewDetails: (\n            <div className=\"ntt-page-tokens-list-table-item view-details\">\n              <NavLink\n                onClick={() => window.scrollTo(0, 0)}\n                to={`/analytics/ntt/${item.coingecko_id}/${item.symbol}`}\n              >\n                View details\n              </NavLink>\n            </div>\n          ),\n        }));\n    },\n    {\n      enabled: isMainnet,\n    },\n  );\n\n  return (\n    <BaseLayout>\n      <div className=\"ntt-page\">\n        <h1 className=\"ntt-page-title\">\n          <ProtocolIcon protocol={NTT_APP_ID} width={24} /> NTT\n        </h1>\n        <p className=\"ntt-page-description\">\n          Native Token Transfers (NTT) is an open framework that enables the seamless creation and\n          transfer of multichain tokens, while maintaining ownership and contract upgradability\n          across blockchains.{\" \"}\n          <a\n            className=\"governor-header-description-link\"\n            href={NTT_URL}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Learn more\n          </a>\n        </p>\n\n        <Stats data={dataStats} isLoading={isLoadingStats} isError={isErrorStats} />\n\n        <TokensTradedList\n          data={tokensList}\n          isLoading={isFetchingTokensList}\n          isError={isErrorTokensList}\n        />\n      </div>\n    </BaseLayout>\n  );\n};\n\nexport default NTT;\n","import { ProtocolsStatsOutput } from \"src/api/guardian-network/types\";\nimport { Loader, Tooltip } from \"src/components/atoms\";\nimport { InfoCircleIcon } from \"src/icons/generic\";\nimport { formatNumber } from \"src/utils/number\";\n\ninterface Props {\n  data: ProtocolsStatsOutput;\n  isLoading: boolean;\n  isError: boolean;\n}\n\nexport const Stats = ({ data, isLoading, isError }: Props) => {\n  const renderValue = (value?: number) => (value ? formatNumber(+value, 0) : \" -\");\n\n  return (\n    <div className=\"ntt-page-stats\">\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <div className=\"ntt-page-stats-item\">\n            <div className=\"ntt-page-stats-item-label\">\n              TOTAL VOLUME\n              <StatsTooltip text=\"Total value in USD transferred through Wormhole NTT.\" />\n            </div>\n            <div className=\"ntt-page-stats-item-value\">\n              ${isError ? \" -\" : renderValue(data?.total_value_transferred)}\n            </div>\n          </div>\n          <div className=\"ntt-page-stats-item\">\n            <div className=\"ntt-page-stats-item-label\">\n              24H VOLUME\n              <StatsTooltip text=\"USD volume transferred via NTT in the last 24 hours.\" />\n            </div>\n            <div className=\"ntt-page-stats-item-value\">\n              ${isError ? \" -\" : renderValue(data?.last_24_hour_volume)}\n            </div>\n          </div>\n          <div className=\"ntt-page-stats-item\">\n            <div className=\"ntt-page-stats-item-label\">\n              TOTAL VALUE SECURED\n              <StatsTooltip text=\"Sum of the fully diluted valuations of all NTT tokens.\" />\n            </div>\n            <div className=\"ntt-page-stats-item-value\">\n              ${isError ? \" -\" : renderValue(data?.total_value_secured)}\n            </div>\n          </div>\n          <div className=\"ntt-page-stats-item\">\n            <div className=\"ntt-page-stats-item-label\">\n              TOTAL TRANSFERS\n              <StatsTooltip text=\"Total number of NTT transfers made over time.\" />\n            </div>\n            <div className=\"ntt-page-stats-item-value\">\n              {isError ? \" -\" : renderValue(data?.total_messages)}\n            </div>\n          </div>\n          <div className=\"ntt-page-stats-item\">\n            <div className=\"ntt-page-stats-item-label\">\n              24H TRANSFERS\n              <StatsTooltip text=\"Number of NTT transactions made in the last 24 hours.\" />\n            </div>\n            <div className=\"ntt-page-stats-item-value\">\n              {isError ? \" -\" : renderValue(data?.last_day_messages)}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst StatsTooltip = ({ text }: { text: string }) => (\n  <Tooltip tooltip={text} type=\"info\">\n    <div className=\"ntt-page-stats-item-label-icon\">\n      <InfoCircleIcon />\n    </div>\n  </Tooltip>\n);\n","import { useMemo } from \"react\";\nimport { Rectangle3DIcon2 } from \"src/icons/generic\";\nimport { BREAKPOINTS } from \"src/consts\";\nimport { Table } from \"src/components/organisms\";\nimport { useNavigateCustom, useWindowSize } from \"src/utils/hooks\";\nimport { COLUMNS_NTT, IRowToken } from \"src/utils/nttUtils\";\n\ninterface Props {\n  data: IRowToken[];\n  isLoading: boolean;\n  isError: boolean;\n}\n\nexport const TokensTradedList = ({ data, isLoading, isError }: Props) => {\n  const { width } = useWindowSize();\n  const isDesktop = width >= BREAKPOINTS.desktop;\n  const navigate = useNavigateCustom();\n\n  const columns = useMemo(() => {\n    return isDesktop\n      ? COLUMNS_NTT\n      : [...COLUMNS_NTT, { Header: \"View Details\", accessor: \"viewDetails\" as keyof IRowToken }];\n  }, [isDesktop]);\n\n  return (\n    <div className=\"ntt-page-tokens-list\">\n      <h3 className=\"ntt-page-tokens-list-title\">\n        <Rectangle3DIcon2 /> Tokens Transferred via NTT\n      </h3>\n\n      {isError ? (\n        <div className=\"ntt-page-tokens-list-error\">Failed to get tokens</div>\n      ) : (\n        <div className=\"ntt-page-tokens-list-table\">\n          <Table\n            columns={columns}\n            data={data?.length > 0 ? data : []}\n            emptyMessage=\"There are no transactions.\"\n            isLoading={isLoading}\n            defaultSortBy={{\n              id: \"fullyDilutedValuation\",\n              desc: true,\n            }}\n            onRowClick={v => {\n              if (isDesktop) {\n                window.scrollTo(0, 0);\n                return navigate(`/analytics/ntt/${v.coingecko_id}/${v.symbol}`);\n              }\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Column, Row } from \"react-table\";\n\nexport interface IRowToken {\n  symbol: string;\n  coingecko_id: string;\n  tvtNumber: number;\n  volumeNumber: number;\n  circulatingSupplyNumber: number;\n  fullyDilutedNumber: number;\n  priceNumber: number;\n  token: React.ReactNode;\n  tvt: React.ReactNode;\n  volume: React.ReactNode;\n  circulatingSupply: React.ReactNode;\n  fullyDilutedValuation: React.ReactNode;\n  price: React.ReactNode;\n  viewDetails: React.ReactNode;\n}\n\nconst sortBySymbol = (rowA: Row<IRowToken>, rowB: Row<IRowToken>) => {\n  const a = rowA.original.symbol.toUpperCase();\n  const b = rowB.original.symbol.toUpperCase();\n  return a.localeCompare(b);\n};\n\nconst sortByNumber = (key: keyof IRowToken) => (rowA: Row<IRowToken>, rowB: Row<IRowToken>) => {\n  return (rowA.original[key] as number) - (rowB.original[key] as number);\n};\n\nexport const COLUMNS_NTT: Column<IRowToken>[] | any = [\n  { Header: \"Token\", accessor: \"token\", sortType: sortBySymbol },\n  {\n    Header: \"Fully Diluted Valuation\",\n    accessor: \"fullyDilutedValuation\",\n    sortType: sortByNumber(\"fullyDilutedNumber\"),\n  },\n  {\n    Header: \"Circulating Supply\",\n    accessor: \"circulatingSupply\",\n    sortType: sortByNumber(\"circulatingSupplyNumber\"),\n  },\n  { Header: \"Total Value Transferred\", accessor: \"tvt\", sortType: sortByNumber(\"tvtNumber\") },\n  // { Header: \"24h Volume\", accessor: \"volume\", sortType: sortByNumber(\"volumeNumber\") },\n  { Header: \"Price\", accessor: \"price\", sortType: sortByNumber(\"priceNumber\") },\n];\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","_jsxRuntime","_react","_reactQuery","_analytics","_analyticsDefault","interopDefault","_client","_baseLayout","_environmentContext","_consts","_atoms","_number","_stats","_tokensTradedList","default","useEffect","page","title","environment","useEnvironment","isMainnet","currentNetwork","network","data","dataStats","isLoading","isLoadingStats","isError","isErrorStats","useQuery","getClient","guardianNetwork","getProtocolsStats","then","stats","statsFiltered","filter","item","protocol","NTT_APP_ID","enabled","tokensList","isFetching","isFetchingTokensList","isErrorTokensList","dataTokensList","nttApi","getNttTokenList","circulating_supply","coingecko_id","map","symbol","fullyDilutedNumber","fully_diluted_valuation","circulatingSupplyNumber","tvtNumber","total_value_transferred","volumeNumber","volume_24h","priceNumber","price","token","jsxs","className","children","jsx","src","image","small","alt","height","width","loading","fullyDilutedValuation","formatNumber","circulatingSupply","tvt","undefined","volume","toFixed","viewDetails","NavLink","onClick","scrollTo","to","BaseLayout","ProtocolIcon","href","NTT_URL","target","rel","Stats","TokensTradedList","export","_generic","renderValue","value","Loader","Fragment","StatsTooltip","text","last_24_hour_volume","total_value_secured","total_messages","last_day_messages","Tooltip","tooltip","type","InfoCircleIcon","_organisms","_hooks","_nttUtils","useWindowSize","isDesktop","BREAKPOINTS","desktop","navigate","useNavigateCustom","columns","useMemo","COLUMNS_NTT","Header","accessor","Rectangle3DIcon2","Table","emptyMessage","defaultSortBy","desc","onRowClick","v","sortByNumber","key","rowA","rowB","original","sortType","a","toUpperCase","b","localeCompare"],"version":3,"file":"NTT.2c3ea2a4.js.map"}