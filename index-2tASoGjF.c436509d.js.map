{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GC2MA,EAAA,MAAA,CAAA,EAAA,mBAAA,IACE,GAzMF,IAAA,EAAA,EAAA,wBACA,EAAA,EAAA,sCACA,EAAA,EAAA,wBALI,EAAI,OAAO,cAAc,CACzB,EAAI,CAAC,EAAG,EAAG,IAAM,KAAK,EAAI,EAAE,EAAG,EAAG,CAAE,WAAY,CAAC,EAAG,aAAc,CAAC,EAAG,SAAU,CAAC,EAAG,MAAO,CAAE,GAAK,CAAC,CAAC,EAAE,CAAG,EACzG,EAAI,CAAC,EAAG,EAAG,IAAM,EAAE,EAAG,AAAY,UAAZ,OAAO,EAAgB,EAAI,GAAK,EAAG,GAI7D,IAAM,EAAI,CACR,CAAE,KAAM,qBAAsB,GAAG,EAAA,EAAA,AAAE,EACnC,CAAE,KAAM,QAAS,GAAG,AAAA,CAAA,EAAA,EAAA,EAAA,AAAA,GAAG,AAAC,EACxB,CACE,KAAM,kBACN,OAAQ,QACR,OAAQ,AAAA,C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","sources":["<anon>","node_modules/@xlabs/wormhole-connect/lib/index-2tASoGjF.mjs","node_modules/@xlabs/wormhole-connect/lib/unsignedTransaction-BDOQhqcZ.mjs"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"fRrki\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"AptosTokenBridge\", ()=>d);\nvar _indexDTF6KsXjMjs = require(\"./index-DTF6KsXj.mjs\");\nvar _unsignedTransactionBDOQhqcZMjs = require(\"./unsignedTransaction-BDOQhqcZ.mjs\");\nvar _aptosBDX0H0BeMjs = require(\"./aptos-BDX0H0Be.mjs\");\nvar S = Object.defineProperty;\nvar b = (a, e, t)=>e in a ? S(a, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : a[e] = t;\nvar i = (a, e, t)=>b(a, typeof e != \"symbol\" ? e + \"\" : e, t);\nconst R = [\n    {\n        name: \"tokenBridgeAddress\",\n        ...(0, _indexDTF6KsXjMjs.ce)\n    },\n    {\n        name: \"chain\",\n        ...(0, _indexDTF6KsXjMjs.cf)()\n    },\n    {\n        name: \"domainSeparator\",\n        binary: \"bytes\",\n        custom: (0, _indexDTF6KsXjMjs.c9).encode((0, _indexDTF6KsXjMjs.cg)),\n        omit: !0\n    },\n    {\n        name: \"tokenId\",\n        ...(0, _indexDTF6KsXjMjs.ce)\n    },\n    // from https://github.com/aptos-labs/aptos-core/blob/25696fd266498d81d346fe86e01c330705a71465/aptos-move/framework/aptos-framework/sources/account.move#L90-L95\n    {\n        name: \"domainSeparator\",\n        binary: \"bytes\",\n        custom: new Uint8Array([\n            255\n        ]),\n        omit: !0\n    }\n], P = (a)=>(0, _indexDTF6KsXjMjs.cd)(R, a);\nclass d {\n    constructor(e, t, s, r){\n        i(this, \"network\");\n        i(this, \"chain\");\n        i(this, \"connection\");\n        i(this, \"contracts\");\n        i(this, \"chainId\");\n        i(this, \"tokenBridgeAddress\");\n        this.network = e, this.chain = t, this.connection = s, this.contracts = r, this.chainId = (0, _indexDTF6KsXjMjs.b6)(t);\n        const n = r.tokenBridge;\n        if (!n) throw new Error(`TokenBridge contract Address for chain ${t} not found`);\n        this.tokenBridgeAddress = n;\n    }\n    static async fromRpc(e, t) {\n        const [s, r] = await (0, _aptosBDX0H0BeMjs.A).chainFromRpc(e), n = t[r];\n        if (n.network !== s) throw new Error(\"Network mismatch \" + n.network + \" !== \" + s);\n        return new d(s, r, e, n.contracts);\n    }\n    async isWrappedAsset(e) {\n        try {\n            return await this.getOriginalAsset(e), !0;\n        } catch  {\n            return !1;\n        }\n    }\n    async getOriginalAsset(e) {\n        const t = e.toString().split((0, _indexDTF6KsXjMjs.cg)), s = await this.connection.getAccountResource({\n            accountAddress: t[0],\n            resourceType: `${this.tokenBridgeAddress}::state::OriginInfo`\n        });\n        if (!s) throw (0, _indexDTF6KsXjMjs.bA)(e.toString());\n        const r = (0, _indexDTF6KsXjMjs.bd)(parseInt(s.token_chain.number)), n = new (0, _indexDTF6KsXjMjs.bB)(s.token_address.external_address);\n        return {\n            chain: r,\n            address: n\n        };\n    }\n    async getTokenUniversalAddress(e) {\n        return new (0, _indexDTF6KsXjMjs.bB)((0, _indexDTF6KsXjMjs.r).encode((0, _indexDTF6KsXjMjs.aC)(e.toString()), !0));\n    }\n    async getTokenNativeAddress(e, t) {\n        const s = e === this.chain ? await this.getTypeFromExternalAddress(t.toString()) : await this.getAssetFullyQualifiedType({\n            chain: e,\n            address: t\n        });\n        if (!s) throw new Error(\"Invalid asset address.\");\n        return new (0, _indexDTF6KsXjMjs.p)(s);\n    }\n    async hasWrappedAsset(e) {\n        try {\n            return await this.getWrappedAsset(e), !0;\n        } catch  {}\n        return !1;\n    }\n    async getWrappedAsset(e) {\n        if ((0, _indexDTF6KsXjMjs.m)(e.address)) throw new Error(\"native asset cannot be a wrapped asset\");\n        const t = await this.getAssetFullyQualifiedType(e);\n        if (!t) throw new Error(\"Invalid asset address.\");\n        return await this.connection.getAccountResource({\n            accountAddress: (0, _indexDTF6KsXjMjs.ch)(t),\n            resourceType: `${this.tokenBridgeAddress}::state::OriginInfo`\n        }), (0, _indexDTF6KsXjMjs.bG)(this.chain, t);\n    }\n    async isTransferCompleted(e) {\n        const s = (await this.connection.getAccountResource({\n            accountAddress: this.tokenBridgeAddress,\n            resourceType: `${this.tokenBridgeAddress}::state::State`\n        })).consumed_vaas.elems.handle;\n        try {\n            return await this.connection.getTableItem({\n                handle: s,\n                data: {\n                    key_type: \"vector<u8>\",\n                    value_type: \"u8\",\n                    key: `0x${(0, _indexDTF6KsXjMjs.V).Buffer.from((0, _indexDTF6KsXjMjs.bD)(e.hash)).toString(\"hex\")}`\n                }\n            }), !0;\n        } catch  {\n            return !1;\n        }\n    }\n    async getWrappedNative() {\n        return (0, _indexDTF6KsXjMjs.bG)(this.chain, (0, _indexDTF6KsXjMjs.k));\n    }\n    async *createAttestation(e, t) {\n        const s = {\n            chain: this.chain,\n            address: new (0, _indexDTF6KsXjMjs.p)(e)\n        }, r = await this.getAssetFullyQualifiedType(s);\n        if (!r) throw new Error(\"Invalid asset address.\");\n        yield this.createUnsignedTx({\n            function: `${this.tokenBridgeAddress}::attest_token::attest_token_entry`,\n            typeArguments: [\n                r\n            ],\n            functionArguments: []\n        }, \"Aptos.AttestToken\");\n    }\n    async *submitAttestation(e, t) {\n        yield this.createUnsignedTx({\n            function: `${this.tokenBridgeAddress}::wrapped::create_wrapped_coin_type`,\n            typeArguments: [],\n            functionArguments: [\n                (0, _indexDTF6KsXjMjs.be)(e)\n            ]\n        }, \"Aptos.CreateWrappedCoinType\");\n        const s = await this.getAssetFullyQualifiedType(e.payload.token);\n        if (!s) throw new Error(\"Invalid asset address.\");\n        yield this.createUnsignedTx({\n            function: `${this.tokenBridgeAddress}::wrapped::create_wrapped_coin`,\n            typeArguments: [\n                s\n            ],\n            functionArguments: [\n                (0, _indexDTF6KsXjMjs.be)(e)\n            ]\n        }, \"Aptos.CreateWrappedCoin\");\n    }\n    async *transfer(e, t, s, r, n) {\n        const B = 0n, p = 0n, y = (0, _indexDTF6KsXjMjs.m)(s) ? (0, _indexDTF6KsXjMjs.k) : s.toString(), g = t.address.toUniversalAddress().toUint8Array(), l = (0, _indexDTF6KsXjMjs.b6)(t.chain);\n        n ? yield this.createUnsignedTx({\n            function: `${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_with_payload_entry`,\n            typeArguments: [\n                y\n            ],\n            functionArguments: [\n                r,\n                l,\n                g,\n                p,\n                n\n            ]\n        }, \"Aptos.TransferTokensWithPayload\") : yield this.createUnsignedTx({\n            function: `${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_entry`,\n            typeArguments: [\n                y\n            ],\n            functionArguments: [\n                r,\n                l,\n                g,\n                B,\n                p\n            ]\n        }, \"Aptos.TransferTokens\");\n    }\n    async *redeem(e, t, s = !0) {\n        const r = t.payload.token.chain === this.chain ? await this.getTypeFromExternalAddress(t.payload.token.address.toString()) : await this.getAssetFullyQualifiedType(t.payload.token);\n        if (!r) throw new Error(\"Invalid asset address.\");\n        yield this.createUnsignedTx({\n            function: `${this.tokenBridgeAddress}::complete_transfer::submit_vaa_and_register_entry`,\n            typeArguments: [\n                r\n            ],\n            functionArguments: [\n                (0, _indexDTF6KsXjMjs.be)(t)\n            ]\n        }, \"Aptos.CompleteTransfer\");\n    }\n    async getAssetFullyQualifiedType(e) {\n        return e.chain === this.chain ? (0, _indexDTF6KsXjMjs.ci)(e.address.toString()) ? e.address.toString() : null : `${d.getForeignAssetAddress(this.chain, this.tokenBridgeAddress, e)}::coin::T`;\n    }\n    /**\n   * Given a hash, returns the fully qualified type by querying the corresponding TypeInfo.\n   * @param address Hash of fully qualified type\n   * @returns The fully qualified type associated with the given hash\n   */ async getTypeFromExternalAddress(e) {\n        try {\n            const t = await this.connection.getAccountResource({\n                accountAddress: this.tokenBridgeAddress,\n                resourceType: `${this.tokenBridgeAddress}::state::State`\n            }), { handle: s } = t.native_infos, r = await this.connection.getTableItem({\n                handle: s,\n                data: {\n                    key_type: `${this.tokenBridgeAddress}::token_hash::TokenHash`,\n                    value_type: \"0x1::type_info::TypeInfo\",\n                    key: {\n                        hash: e\n                    }\n                }\n            });\n            return r ? [\n                r.account_address,\n                String.fromCharCode(...(0, _indexDTF6KsXjMjs.r).decode(r.module_name)),\n                String.fromCharCode(...(0, _indexDTF6KsXjMjs.r).decode(r.struct_name))\n            ].join((0, _indexDTF6KsXjMjs.cg)) : null;\n        } catch  {\n            return null;\n        }\n    }\n    /**\n   * Derive the module address for an asset defined by the given origin chain and address.\n   * @param tokenBridgeAddress Address of token bridge (32 bytes)\n   * @param originChain Chain ID of chain that original asset is from\n   * @param originAddress Native address of asset\n   * @returns The module address for the given asset\n   */ static getForeignAssetAddress(e, t, s) {\n        if ((0, _indexDTF6KsXjMjs.m)(s.address)) throw new Error(\"Invalid token address\");\n        const r = P({\n            chain: s.chain,\n            tokenBridgeAddress: new (0, _indexDTF6KsXjMjs.p)(t).toUniversalAddress(),\n            tokenId: s.address.toUniversalAddress()\n        });\n        return (0, _indexDTF6KsXjMjs.r).encode((0, _indexDTF6KsXjMjs.aC)(r), !0);\n    }\n    createUnsignedTx(e, t, s = !1) {\n        return new (0, _unsignedTransactionBDOQhqcZMjs.A)(e, this.network, this.chain, t, s);\n    }\n}\n(0, _indexDTF6KsXjMjs.bj)(\"Aptos\", \"TokenBridge\", d);\n\n},{\"./index-DTF6KsXj.mjs\":\"ieLDt\",\"./unsignedTransaction-BDOQhqcZ.mjs\":\"jlFJo\",\"./aptos-BDX0H0Be.mjs\":\"d6zRe\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"jlFJo\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"A\", ()=>h);\nvar o = Object.defineProperty;\nvar c = (a, t, i)=>t in a ? o(a, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: i\n    }) : a[t] = i;\nvar s = (a, t, i)=>c(a, typeof t != \"symbol\" ? t + \"\" : t, i);\nclass h {\n    constructor(t, i, n, r, e = !1){\n        s(this, \"transaction\");\n        s(this, \"network\");\n        s(this, \"chain\");\n        s(this, \"description\");\n        s(this, \"parallelizable\");\n        this.transaction = t, this.network = i, this.chain = n, this.description = r, this.parallelizable = e;\n    }\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=index-2tASoGjF.c436509d.js.map\n","var S = Object.defineProperty;\nvar b = (a, e, t) => e in a ? S(a, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : a[e] = t;\nvar i = (a, e, t) => b(a, typeof e != \"symbol\" ? e + \"\" : e, t);\nimport { cd as v, ce as f, cf as I, c9 as x, cg as A, b6 as w, bA as U, bd as $, bB as m, r as o, aC as k, p as c, m as h, ch as C, bG as T, V as E, bD as F, k as _, be as u, ci as W, bj as N } from \"./index-DTF6KsXj.mjs\";\nimport { A as O } from \"./unsignedTransaction-BDOQhqcZ.mjs\";\nimport { A as Q } from \"./aptos-BDX0H0Be.mjs\";\nconst R = [\n  { name: \"tokenBridgeAddress\", ...f },\n  { name: \"chain\", ...I() },\n  {\n    name: \"domainSeparator\",\n    binary: \"bytes\",\n    custom: x.encode(A),\n    omit: !0\n  },\n  { name: \"tokenId\", ...f },\n  // from https://github.com/aptos-labs/aptos-core/blob/25696fd266498d81d346fe86e01c330705a71465/aptos-move/framework/aptos-framework/sources/account.move#L90-L95\n  { name: \"domainSeparator\", binary: \"bytes\", custom: new Uint8Array([255]), omit: !0 }\n], P = (a) => v(R, a);\nclass d {\n  constructor(e, t, s, r) {\n    i(this, \"network\");\n    i(this, \"chain\");\n    i(this, \"connection\");\n    i(this, \"contracts\");\n    i(this, \"chainId\");\n    i(this, \"tokenBridgeAddress\");\n    this.network = e, this.chain = t, this.connection = s, this.contracts = r, this.chainId = w(t);\n    const n = r.tokenBridge;\n    if (!n)\n      throw new Error(`TokenBridge contract Address for chain ${t} not found`);\n    this.tokenBridgeAddress = n;\n  }\n  static async fromRpc(e, t) {\n    const [s, r] = await Q.chainFromRpc(e), n = t[r];\n    if (n.network !== s)\n      throw new Error(\"Network mismatch \" + n.network + \" !== \" + s);\n    return new d(s, r, e, n.contracts);\n  }\n  async isWrappedAsset(e) {\n    try {\n      return await this.getOriginalAsset(e), !0;\n    } catch {\n      return !1;\n    }\n  }\n  async getOriginalAsset(e) {\n    const t = e.toString().split(A), s = await this.connection.getAccountResource({\n      accountAddress: t[0],\n      resourceType: `${this.tokenBridgeAddress}::state::OriginInfo`\n    });\n    if (!s)\n      throw U(e.toString());\n    const r = $(parseInt(s.token_chain.number)), n = new m(s.token_address.external_address);\n    return { chain: r, address: n };\n  }\n  async getTokenUniversalAddress(e) {\n    return new m(o.encode(k(e.toString()), !0));\n  }\n  async getTokenNativeAddress(e, t) {\n    const s = e === this.chain ? await this.getTypeFromExternalAddress(t.toString()) : await this.getAssetFullyQualifiedType({ chain: e, address: t });\n    if (!s)\n      throw new Error(\"Invalid asset address.\");\n    return new c(s);\n  }\n  async hasWrappedAsset(e) {\n    try {\n      return await this.getWrappedAsset(e), !0;\n    } catch {\n    }\n    return !1;\n  }\n  async getWrappedAsset(e) {\n    if (h(e.address))\n      throw new Error(\"native asset cannot be a wrapped asset\");\n    const t = await this.getAssetFullyQualifiedType(e);\n    if (!t)\n      throw new Error(\"Invalid asset address.\");\n    return await this.connection.getAccountResource({\n      accountAddress: C(t),\n      resourceType: `${this.tokenBridgeAddress}::state::OriginInfo`\n    }), T(this.chain, t);\n  }\n  async isTransferCompleted(e) {\n    const s = (await this.connection.getAccountResource({\n      accountAddress: this.tokenBridgeAddress,\n      resourceType: `${this.tokenBridgeAddress}::state::State`\n    })).consumed_vaas.elems.handle;\n    try {\n      return await this.connection.getTableItem({\n        handle: s,\n        data: {\n          key_type: \"vector<u8>\",\n          value_type: \"u8\",\n          key: `0x${E.Buffer.from(F(e.hash)).toString(\"hex\")}`\n        }\n      }), !0;\n    } catch {\n      return !1;\n    }\n  }\n  async getWrappedNative() {\n    return T(this.chain, _);\n  }\n  async *createAttestation(e, t) {\n    const s = { chain: this.chain, address: new c(e) }, r = await this.getAssetFullyQualifiedType(s);\n    if (!r)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::attest_token::attest_token_entry`,\n      typeArguments: [r],\n      functionArguments: []\n    }, \"Aptos.AttestToken\");\n  }\n  async *submitAttestation(e, t) {\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::wrapped::create_wrapped_coin_type`,\n      typeArguments: [],\n      functionArguments: [u(e)]\n    }, \"Aptos.CreateWrappedCoinType\");\n    const s = await this.getAssetFullyQualifiedType(e.payload.token);\n    if (!s)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::wrapped::create_wrapped_coin`,\n      typeArguments: [s],\n      functionArguments: [u(e)]\n    }, \"Aptos.CreateWrappedCoin\");\n  }\n  async *transfer(e, t, s, r, n) {\n    const B = 0n, p = 0n, y = h(s) ? _ : s.toString(), g = t.address.toUniversalAddress().toUint8Array(), l = w(t.chain);\n    n ? yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_with_payload_entry`,\n      typeArguments: [y],\n      functionArguments: [r, l, g, p, n]\n    }, \"Aptos.TransferTokensWithPayload\") : yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::transfer_tokens::transfer_tokens_entry`,\n      typeArguments: [y],\n      functionArguments: [r, l, g, B, p]\n    }, \"Aptos.TransferTokens\");\n  }\n  async *redeem(e, t, s = !0) {\n    const r = t.payload.token.chain === this.chain ? await this.getTypeFromExternalAddress(t.payload.token.address.toString()) : await this.getAssetFullyQualifiedType(t.payload.token);\n    if (!r)\n      throw new Error(\"Invalid asset address.\");\n    yield this.createUnsignedTx({\n      function: `${this.tokenBridgeAddress}::complete_transfer::submit_vaa_and_register_entry`,\n      typeArguments: [r],\n      functionArguments: [u(t)]\n    }, \"Aptos.CompleteTransfer\");\n  }\n  async getAssetFullyQualifiedType(e) {\n    return e.chain === this.chain ? W(e.address.toString()) ? e.address.toString() : null : `${d.getForeignAssetAddress(this.chain, this.tokenBridgeAddress, e)}::coin::T`;\n  }\n  /**\n   * Given a hash, returns the fully qualified type by querying the corresponding TypeInfo.\n   * @param address Hash of fully qualified type\n   * @returns The fully qualified type associated with the given hash\n   */\n  async getTypeFromExternalAddress(e) {\n    try {\n      const t = await this.connection.getAccountResource({\n        accountAddress: this.tokenBridgeAddress,\n        resourceType: `${this.tokenBridgeAddress}::state::State`\n      }), { handle: s } = t.native_infos, r = await this.connection.getTableItem({\n        handle: s,\n        data: {\n          key_type: `${this.tokenBridgeAddress}::token_hash::TokenHash`,\n          value_type: \"0x1::type_info::TypeInfo\",\n          key: { hash: e }\n        }\n      });\n      return r ? [\n        r.account_address,\n        String.fromCharCode(...o.decode(r.module_name)),\n        String.fromCharCode(...o.decode(r.struct_name))\n      ].join(A) : null;\n    } catch {\n      return null;\n    }\n  }\n  /**\n   * Derive the module address for an asset defined by the given origin chain and address.\n   * @param tokenBridgeAddress Address of token bridge (32 bytes)\n   * @param originChain Chain ID of chain that original asset is from\n   * @param originAddress Native address of asset\n   * @returns The module address for the given asset\n   */\n  static getForeignAssetAddress(e, t, s) {\n    if (h(s.address))\n      throw new Error(\"Invalid token address\");\n    const r = P({\n      chain: s.chain,\n      tokenBridgeAddress: new c(t).toUniversalAddress(),\n      tokenId: s.address.toUniversalAddress()\n    });\n    return o.encode(k(r), !0);\n  }\n  createUnsignedTx(e, t, s = !1) {\n    return new O(e, this.network, this.chain, t, s);\n  }\n}\nN(\"Aptos\", \"TokenBridge\", d);\nexport {\n  d as AptosTokenBridge\n};\n","var o = Object.defineProperty;\nvar c = (a, t, i) => t in a ? o(a, t, { enumerable: !0, configurable: !0, writable: !0, value: i }) : a[t] = i;\nvar s = (a, t, i) => c(a, typeof t != \"symbol\" ? t + \"\" : t, i);\nclass h {\n  constructor(t, i, n, r, e = !1) {\n    s(this, \"transaction\");\n    s(this, \"network\");\n    s(this, \"chain\");\n    s(this, \"description\");\n    s(this, \"parallelizable\");\n    this.transaction = t, this.network = i, this.chain = n, this.description = r, this.parallelizable = e;\n  }\n}\nexport {\n  h as A\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","export","d","_indexDTF6KsXjMjs","_unsignedTransactionBDOQhqcZMjs","_aptosBDX0H0BeMjs","S","b","a","e","t","enumerable","configurable","writable","value","R","ce","cf","binary","custom","c9","encode","cg","omit","Uint8Array","P","cd","constructor","s","r","network","chain","connection","contracts","chainId","b6","n","tokenBridge","tokenBridgeAddress","fromRpc","A","chainFromRpc","isWrappedAsset","getOriginalAsset","toString","split","getAccountResource","accountAddress","resourceType","bA","bd","parseInt","token_chain","number","address","bB","token_address","external_address","getTokenUniversalAddress","aC","getTokenNativeAddress","getTypeFromExternalAddress","getAssetFullyQualifiedType","p","hasWrappedAsset","getWrappedAsset","m","ch","bG","isTransferCompleted","consumed_vaas","elems","handle","getTableItem","data","key_type","value_type","key","V","Buffer","from","bD","hash","getWrappedNative","k","createAttestation","createUnsignedTx","function","typeArguments","functionArguments","submitAttestation","be","payload","token","transfer","y","g","toUniversalAddress","toUint8Array","l","redeem","ci","getForeignAssetAddress","native_infos","account_address","String","fromCharCode","decode","module_name","struct_name","join","tokenId","bj","h","o","c","transaction","description","parallelizable"],"version":3,"file":"index-2tASoGjF.c436509d.js.map"}