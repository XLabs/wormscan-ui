{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,G,I,E,E,qBCAA,EAAA,EAAA,SACA,EAAA,EAAA,oBACA,EAAA,EAAA,eACA,EAAA,EAAA,iB,E,E,c,C,GACA,EAAA,EAAA,kCACA,EAAA,EAAA,cACA,EAAA,EAAA,0BACA,EAAA,EAAA,wBAOA,EAAA,EAAA,4BACA,EAAA,EAAA,sBACA,EAAA,EAAA,oBACA,EAAA,EAAA,mBACA,EAAA,EAAA,oBACA,EAAA,EAAA,2BAaA,EAAA,EAAA,kBACA,EAAA,EAAA,qBAQA,EAAA,EAAA,4BACA,EAAA,EAAA,UACA,EAAA,iBAkUe,EAAA,OAAA,CAhUE,KACf,GAAM,CAAC,EAAc,EAAgB,CAAG,AAAA,CAAA,EAAA,EAAA,eAAe,AAAf,IAClC,CAAC,EAAkB,EAAyB,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EACnD,AAA6B,iBAA7B,EAAa,GAAG,CAAC,SAGnB,A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","sources":["<anon>","src/pages/Governor/index.tsx","src/utils/governorUtils.tsx"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"HnJC6\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _reactRouterDom = require(\"react-router-dom\");\nvar _reactQuery = require(\"react-query\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nvar _environmentContext = require(\"src/context/EnvironmentContext\");\nvar _consts = require(\"src/consts\");\nvar _baseLayout = require(\"src/layouts/BaseLayout\");\nvar _atoms = require(\"src/components/atoms\");\nvar _organisms = require(\"src/components/organisms\");\nvar _wormhole = require(\"src/utils/wormhole\");\nvar _number = require(\"src/utils/number\");\nvar _hooks = require(\"src/utils/hooks\");\nvar _crypto = require(\"src/utils/crypto\");\nvar _governorUtils = require(\"src/utils/governorUtils\");\nvar _client = require(\"src/api/Client\");\nvar _generic = require(\"src/icons/generic\");\nvar _molecules = require(\"src/components/molecules\");\nvar _txs = require(\"../Txs\");\nvar _stylesScss = require(\"./styles.scss\");\nconst Governor = ()=>{\n    const [searchParams, setSearchParams] = (0, _reactRouterDom.useSearchParams)();\n    const [showTransactions, setShowTransactionsState] = (0, _react.useState)(searchParams.get(\"view\") === \"transactions\");\n    (0, _react.useEffect)(()=>{\n        (0, _analyticsDefault.default).page({\n            title: `GOVERNOR_${showTransactions ? \"TRANSACTIONS\" : \"DASHBOARD\"}`\n        });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const setShowTransactions = (show)=>{\n        (0, _analyticsDefault.default).page({\n            title: `GOVERNOR_${show ? \"TRANSACTIONS\" : \"DASHBOARD\"}`\n        });\n        setShowTransactionsState(show);\n        setSearchParams((prev)=>{\n            prev.set(\"view\", show ? \"transactions\" : \"dashboard\");\n            return prev;\n        });\n    };\n    const [isLoadingDashboard, setIsLoadingDashboard] = (0, _react.useState)(true);\n    const [isLoadingTransactions, setIsLoadingTransactions] = (0, _react.useState)(true);\n    const [isErrorDashboard, setIsErrorDashboard] = (0, _react.useState)(false);\n    const [isErrorTransactions, setIsErrorTransactions] = (0, _react.useState)(false);\n    const [dataDashboard, setDataDashboard] = (0, _react.useState)([]);\n    const [dataTransactions, setDataTransactions] = (0, _react.useState)([]);\n    const [openSortBy, setOpenSortBy] = (0, _react.useState)(false);\n    const { environment } = (0, _environmentContext.useEnvironment)();\n    const currentNetwork = environment.network;\n    const isMainnet = currentNetwork === \"Mainnet\";\n    const { width } = (0, _hooks.useWindowSize)();\n    const isDesktop = width >= (0, _consts.BREAKPOINTS).desktop;\n    const navigate = (0, _hooks.useNavigateCustom)();\n    (0, _hooks.useLockBodyScroll)({\n        isLocked: !isDesktop && openSortBy\n    });\n    const onRowClick = (row)=>{\n        if (isDesktop) {\n            const { parseTxHash } = row || {};\n            parseTxHash && navigate(`/tx/${parseTxHash}`);\n        }\n    };\n    (0, _reactQuery.useQuery)([\n        \"getLimit\"\n    ], ()=>(0, _client.getClient)().governor.getLimit(), {\n        onError: ()=>{\n            setIsErrorDashboard(true);\n            setIsLoadingDashboard(false);\n        },\n        onSuccess: (data)=>{\n            const tempRows = [];\n            data.filter((item)=>item.notionalLimit > 0 && item.maxTransactionSize > 0).map((item)=>{\n                const { chainId, notionalLimit, maxTransactionSize, availableNotional } = item;\n                const availablePercentage = item.availableNotional / item.notionalLimit * 100;\n                const formattedValue = parseFloat((0, _number.formatNumber)(availablePercentage, 2));\n                const chainName = (0, _wormhole.getChainName)({\n                    chainId: item.chainId,\n                    network: currentNetwork\n                });\n                const row = {\n                    chainId,\n                    chainName,\n                    maxTransactionSize,\n                    notionalLimit,\n                    availableNotional,\n                    chain: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"dashboard chain\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                                background: \"var(--color-black-25)\",\n                                chainId: chainId,\n                                className: \"chain-icon\",\n                                colorless: false,\n                                network: currentNetwork,\n                                size: 24\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"p\", {\n                                children: chainName\n                            })\n                        ]\n                    }),\n                    singleTransactionLimit: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"dashboard big-transaction\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h4\", {\n                                children: [\n                                    \"single tx limit \",\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _governorUtils.SingleTxLimitTooltip), {})\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"p\", {\n                                children: [\n                                    (0, _number.formatNumber)(item.maxTransactionSize, 0),\n                                    \" USD\"\n                                ]\n                            })\n                        ]\n                    }),\n                    dailyLimit: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"dashboard daily-limit\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h4\", {\n                                children: [\n                                    \"daily limit \",\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _governorUtils.DailyLimitTooltip), {})\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"p\", {\n                                children: [\n                                    (0, _number.formatNumber)(item.notionalLimit, 0),\n                                    \" USD\"\n                                ]\n                            })\n                        ]\n                    }),\n                    remainingTransactionLimit: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"dashboard min-remaining\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"min-remaining-container\",\n                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Tooltip), {\n                                    side: \"left\",\n                                    tooltip: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                        children: [\n                                            formattedValue,\n                                            \"%\"\n                                        ]\n                                    }),\n                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _governorUtils.MinRemainingBar), {\n                                            color: 100 - availablePercentage >= 80 ? \"#FF884D\" : \"var(--color-success-100)\",\n                                            percentage: availablePercentage\n                                        })\n                                    })\n                                })\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h4\", {\n                                children: [\n                                    \"remaining tx limit \",\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _governorUtils.RemainingTxLimitTooltip), {})\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"p\", {\n                                children: [\n                                    (0, _number.formatNumber)(item.availableNotional, 0),\n                                    \" USD\"\n                                ]\n                            })\n                        ]\n                    })\n                };\n                tempRows.push(row);\n            });\n            setDataDashboard(tempRows);\n            setIsLoadingDashboard(false);\n        },\n        enabled: isMainnet\n    });\n    (0, _reactQuery.useQuery)([\n        \"getEnqueuedTransactions\"\n    ], ()=>(0, _client.getClient)().governor.getEnqueuedTransactions(), {\n        onError: ()=>{\n            setIsErrorTransactions(true);\n            setIsLoadingTransactions(false);\n        },\n        onSuccess: async (txs)=>{\n            const tempRows = [];\n            await Promise.all(txs.map(async (tx)=>{\n                const { chainId, releaseTime, status, txHash, amount } = tx;\n                if (status === \"issued\") return;\n                const txInfo = await (0, _client.getClient)().guardianNetwork.getOperations({\n                    txHash: tx.txHash\n                });\n                const chainName = (0, _wormhole.getChainName)({\n                    chainId,\n                    network: currentNetwork\n                });\n                const parseTxHash = (0, _crypto.parseTx)({\n                    value: txHash,\n                    chainId: tx.chainId\n                });\n                const usdAmount = txInfo[0]?.data?.usdAmount || `${amount}`;\n                const limitDataForChain = dataDashboard ? dataDashboard.find((d)=>d?.chainId === chainId) : (0, _txs.ETH_LIMIT);\n                const transactionLimit = limitDataForChain?.maxTransactionSize;\n                const isBigTransaction = transactionLimit <= Number(usdAmount);\n                const formatedStatus = isBigTransaction ? \"Big transaction\" : \"Daily limit exceeded\";\n                const releaseDate = new Date(releaseTime);\n                const currentDate = new Date();\n                const diffInMilliseconds = releaseDate.getTime() - currentDate.getTime();\n                const diffInHours = Math.floor(diffInMilliseconds / 3600000);\n                const diffInMinutes = Math.floor(diffInMilliseconds % 3600000 / 60000);\n                const timeLeft = `${diffInHours <= 0 ? \"\" : `${diffInHours}h, `}${diffInMinutes <= 0 ? \"\" : `${diffInMinutes}m`} left`;\n                const row = {\n                    chainName,\n                    parseTxHash,\n                    usdAmount,\n                    formatedStatus,\n                    releaseDate,\n                    chain: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"txs chain\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                                background: \"var(--color-black-25)\",\n                                chainId: chainId,\n                                className: \"chain-icon\",\n                                colorless: false,\n                                network: currentNetwork,\n                                size: 24\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"p\", {\n                                children: chainName\n                            })\n                        ]\n                    }),\n                    txHash: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"txs tx-hash\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                                children: \"TX HASH\"\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.NavLink), {\n                                to: `/tx/${parseTxHash}`,\n                                children: (0, _crypto.shortAddress)(parseTxHash).toUpperCase()\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.CopyToClipboard), {\n                                toCopy: parseTxHash,\n                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.CopyIcon), {\n                                    width: 24\n                                })\n                            })\n                        ]\n                    }),\n                    amount: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"txs amount\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                                children: \"AMOUNT\"\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"p\", {\n                                children: [\n                                    (0, _number.formatNumber)(+usdAmount, 0),\n                                    \" USD\"\n                                ]\n                            })\n                        ]\n                    }),\n                    status: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"txs status\",\n                        children: isBigTransaction ? /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                                    children: \"STATUS\"\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.StaticsIncreaseIcon), {\n                                    style: {\n                                        color: \"var(--color-information-100)\"\n                                    },\n                                    width: 24\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"p\", {\n                                    children: formatedStatus\n                                })\n                            ]\n                        }) : /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                                    children: \"STATUS\"\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.PieChartIcon), {\n                                    style: {\n                                        color: \"var(--color-alert-100)\"\n                                    },\n                                    width: 24\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"p\", {\n                                    children: formatedStatus\n                                })\n                            ]\n                        })\n                    }),\n                    releaseTime: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"txs release-time\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"p\", {\n                                children: timeLeft\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.ClockIcon), {\n                                width: 24\n                            })\n                        ]\n                    }),\n                    viewDetails: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"txs view-details\",\n                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.NavLink), {\n                            to: `/tx/${parseTxHash}`,\n                            children: \"View details\"\n                        })\n                    })\n                };\n                tempRows.push(row);\n            }));\n            setDataTransactions(tempRows);\n            setIsLoadingTransactions(false);\n        },\n        enabled: showTransactions && isLoadingTransactions && dataDashboard?.length > 0\n    });\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _baseLayout.BaseLayout), {\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"section\", {\n            className: \"governor\",\n            children: [\n                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.GovernorHeader), {}),\n                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"governor-container\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                            className: \"governor-container-top\",\n                            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"governor-container-top-btns\",\n                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                    ariaLabel: \"Select type\",\n                                    items: [\n                                        {\n                                            label: \"Dashboard\",\n                                            value: \"dashboard\",\n                                            ariaLabel: \"Dashboard\"\n                                        },\n                                        {\n                                            label: \"Queued Transactions\",\n                                            value: \"txs\",\n                                            ariaLabel: \"Queued Transactions\"\n                                        }\n                                    ],\n                                    onValueChange: (value)=>{\n                                        setShowTransactions(value === \"txs\");\n                                    },\n                                    value: showTransactions ? \"txs\" : \"dashboard\"\n                                })\n                            })\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                            className: \"governor-container-table\",\n                            children: showTransactions ? isErrorDashboard || isErrorTransactions ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.ErrorPlaceholder), {}) : /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _organisms.Table), {\n                                trackTxsSortBy: true,\n                                className: \"governor-container-table-transactions\",\n                                columns: isDesktop ? (0, _governorUtils.columnsTransactions) : [\n                                    ...(0, _governorUtils.columnsTransactions),\n                                    {\n                                        Header: \"View Details\",\n                                        accessor: \"viewDetails\"\n                                    }\n                                ],\n                                data: dataTransactions,\n                                emptyMessage: \"There are no transactions queued in the governors.\",\n                                defaultSortBy: {\n                                    id: \"releaseTime\",\n                                    desc: false\n                                },\n                                isLoading: isLoadingTransactions,\n                                onRowClick: onRowClick\n                            }) : isErrorDashboard ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.ErrorPlaceholder), {}) : /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _organisms.Table), {\n                                className: `governor-container-table-dashboard ${isDesktop ? \"\" : \"table-mobile-dashboard\"}`,\n                                columns: (0, _governorUtils.columnsDashboard),\n                                data: dataDashboard,\n                                emptyMessage: \"There is no data to display.\",\n                                defaultSortBy: {\n                                    id: \"dailyLimit\",\n                                    desc: true\n                                },\n                                isLoading: isLoadingDashboard,\n                                trackTxsSortBy: true\n                            })\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n};\nexports.default = Governor;\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"react-router-dom\":\"cgBkD\",\"react-query\":\"dbjqN\",\"src/analytics\":\"cr0zc\",\"src/context/EnvironmentContext\":\"jjAhi\",\"src/consts\":\"2l9qr\",\"src/layouts/BaseLayout\":\"ibTEQ\",\"src/components/atoms\":\"jMZmV\",\"src/components/organisms\":\"lKAW4\",\"src/utils/wormhole\":\"6bzfn\",\"src/utils/number\":\"c38zr\",\"src/utils/hooks\":\"2VXdL\",\"src/utils/crypto\":\"fjQNR\",\"src/utils/governorUtils\":\"Ynrm7\",\"src/api/Client\":\"bTumr\",\"src/icons/generic\":\"23xak\",\"src/components/molecules\":\"f5gIB\",\"../Txs\":\"fSizI\",\"./styles.scss\":\"i0mS3\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"Ynrm7\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"SingleTxLimitTooltip\", ()=>SingleTxLimitTooltip);\nparcelHelpers.export(exports, \"DailyLimitTooltip\", ()=>DailyLimitTooltip);\nparcelHelpers.export(exports, \"RemainingTxLimitTooltip\", ()=>RemainingTxLimitTooltip);\nparcelHelpers.export(exports, \"MinRemainingBar\", ()=>MinRemainingBar);\nparcelHelpers.export(exports, \"columnsDashboard\", ()=>columnsDashboard);\nparcelHelpers.export(exports, \"columnsTransactions\", ()=>columnsTransactions);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _atoms = require(\"src/components/atoms\");\nvar _generic = require(\"src/icons/generic\");\nconst SingleTxLimitTooltip = ()=>/*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Tooltip), {\n        className: \"governor-container-table-title-tooltip\",\n        maxWidth: false,\n        tooltip: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n            children: \"Transactions exceeding this single-transaction threshold activate a 24-hour finality delay before being signed by Wormhole Guardians. These transactions are not included in the total value counted towards the 24-hour rolling period limit.\"\n        }),\n        type: \"info\",\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.InfoCircleIcon), {})\n        })\n    });\nconst DailyLimitTooltip = ()=>/*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Tooltip), {\n        className: \"governor-container-table-title-tooltip\",\n        maxWidth: false,\n        tooltip: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n            children: \"Maximum total value of transactions that can be signed without delay in any 24-hour rolling period. If this limit is exceeded, additional transactions are delayed until earlier transactions age beyond this 24-hour window, thereby freeing up bandwidth to process the delayed transactions.\"\n        }),\n        type: \"info\",\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.InfoCircleIcon), {})\n        })\n    });\nconst RemainingTxLimitTooltip = ()=>/*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Tooltip), {\n        className: \"governor-container-table-title-tooltip\",\n        maxWidth: false,\n        tooltip: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n            children: \"This shows the remaining value of transaction volume that can be processed without delay today. Once this limit is reached, further transactions will be delayed until sufficient limit is available within the 24-hour rolling window.\"\n        }),\n        type: \"info\",\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.InfoCircleIcon), {})\n        })\n    });\nconst MinRemainingBar = ({ percentage, color })=>{\n    const totalSegments = 13;\n    const activeSegments = Math.round(percentage / 100 * totalSegments);\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n        className: \"min-remaining-container-bar\",\n        children: Array.from({\n            length: totalSegments\n        }, (_, i)=>/*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"min-remaining-container-bar-segment\",\n                style: {\n                    backgroundColor: i < 1 || i < activeSegments ? color : undefined\n                }\n            }, i))\n    });\n};\nconst columnsDashboard = [\n    {\n        Header: \"Chain\",\n        accessor: \"chain\",\n        sortType: (rowA, rowB)=>{\n            const a = rowA.original.chainName.toUpperCase();\n            const b = rowB.original.chainName.toUpperCase();\n            return a.localeCompare(b);\n        }\n    },\n    {\n        Header: \"Single Transaction Limit\",\n        Tooltip: /*#__PURE__*/ (0, _jsxRuntime.jsx)(SingleTxLimitTooltip, {}),\n        accessor: \"singleTransactionLimit\",\n        sortType: (rowA, rowB)=>{\n            return rowA.original.maxTransactionSize - rowB.original.maxTransactionSize;\n        }\n    },\n    {\n        Header: \"Daily Limit\",\n        Tooltip: /*#__PURE__*/ (0, _jsxRuntime.jsx)(DailyLimitTooltip, {}),\n        accessor: \"dailyLimit\",\n        sortType: (rowA, rowB)=>{\n            return rowA.original.notionalLimit - rowB.original.notionalLimit;\n        }\n    },\n    {\n        Header: \"Remaining Transaction Limit\",\n        Tooltip: /*#__PURE__*/ (0, _jsxRuntime.jsx)(RemainingTxLimitTooltip, {}),\n        accessor: \"remainingTransactionLimit\",\n        sortType: (rowA, rowB)=>{\n            return rowA.original.availableNotional - rowB.original.availableNotional;\n        }\n    }\n];\nconst columnsTransactions = [\n    {\n        Header: \"Chain\",\n        accessor: \"chain\",\n        sortType: (rowA, rowB)=>{\n            const a = rowA.original.chainName.toUpperCase();\n            const b = rowB.original.chainName.toUpperCase();\n            return a.localeCompare(b);\n        }\n    },\n    {\n        Header: \"Tx Hash\",\n        accessor: \"txHash\",\n        sortType: (rowA, rowB)=>{\n            const a = rowA.original.parseTxHash.toUpperCase();\n            const b = rowB.original.parseTxHash.toUpperCase();\n            return a.localeCompare(b);\n        }\n    },\n    {\n        Header: \"Amount\",\n        accessor: \"amount\",\n        sortType: (rowA, rowB)=>{\n            return +rowA.original.usdAmount - +rowB.original.usdAmount;\n        }\n    },\n    {\n        Header: \"Status\",\n        accessor: \"status\",\n        sortType: (rowA, rowB)=>{\n            const a = rowA.original.formatedStatus.toUpperCase();\n            const b = rowB.original.formatedStatus.toUpperCase();\n            return a.localeCompare(b);\n        }\n    },\n    {\n        Header: \"Release Time\",\n        accessor: \"releaseTime\",\n        sortType: (rowA, rowB)=>{\n            const a = new Date(rowA.original.releaseDate);\n            const b = new Date(rowB.original.releaseDate);\n            return a.getTime() - b.getTime();\n        }\n    }\n];\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"src/components/atoms\":\"jMZmV\",\"src/icons/generic\":\"23xak\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"i0mS3\":[function() {},{}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=Governor.86c14ce9.js.map\n","import { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useQuery } from \"react-query\";\nimport analytics from \"src/analytics\";\nimport { useEnvironment } from \"src/context/EnvironmentContext\";\nimport { BREAKPOINTS } from \"src/consts\";\nimport { BaseLayout } from \"src/layouts/BaseLayout\";\nimport {\n  BlockchainIcon,\n  GovernorHeader,\n  NavLink,\n  ToggleGroup,\n  Tooltip,\n} from \"src/components/atoms\";\nimport { Table } from \"src/components/organisms\";\nimport { getChainName } from \"src/utils/wormhole\";\nimport { formatNumber } from \"src/utils/number\";\nimport { useNavigateCustom, useWindowSize, useLockBodyScroll } from \"src/utils/hooks\";\nimport { parseTx, shortAddress } from \"src/utils/crypto\";\nimport {\n  columnsDashboard,\n  columnsTransactions,\n  DailyLimitTooltip,\n  IDataDashboard,\n  IDataTransaction,\n  IRowDashboard,\n  IRowTransaction,\n  MinRemainingBar,\n  RemainingTxLimitTooltip,\n  SingleTxLimitTooltip,\n} from \"src/utils/governorUtils\";\nimport { ChainId } from \"@wormhole-foundation/sdk\";\nimport { getClient } from \"src/api/Client\";\nimport {\n  ClockIcon,\n  CopyIcon,\n  CrossIcon,\n  FilterListIcon,\n  PieChartIcon,\n  StaticsIncreaseIcon,\n} from \"src/icons/generic\";\nimport { CopyToClipboard, ErrorPlaceholder } from \"src/components/molecules\";\nimport { ETH_LIMIT } from \"../Txs\";\nimport \"./styles.scss\";\n\nconst Governor = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [showTransactions, setShowTransactionsState] = useState(\n    searchParams.get(\"view\") === \"transactions\",\n  );\n\n  useEffect(() => {\n    analytics.page({ title: `GOVERNOR_${showTransactions ? \"TRANSACTIONS\" : \"DASHBOARD\"}` });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const setShowTransactions = (show: boolean) => {\n    analytics.page({ title: `GOVERNOR_${show ? \"TRANSACTIONS\" : \"DASHBOARD\"}` });\n    setShowTransactionsState(show);\n    setSearchParams(prev => {\n      prev.set(\"view\", show ? \"transactions\" : \"dashboard\");\n      return prev;\n    });\n  };\n\n  const [isLoadingDashboard, setIsLoadingDashboard] = useState(true);\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(true);\n  const [isErrorDashboard, setIsErrorDashboard] = useState(false);\n  const [isErrorTransactions, setIsErrorTransactions] = useState(false);\n  const [dataDashboard, setDataDashboard] = useState([]);\n  const [dataTransactions, setDataTransactions] = useState([]);\n  const [openSortBy, setOpenSortBy] = useState(false);\n  const { environment } = useEnvironment();\n  const currentNetwork = environment.network;\n  const isMainnet = currentNetwork === \"Mainnet\";\n  const { width } = useWindowSize();\n  const isDesktop = width >= BREAKPOINTS.desktop;\n  const navigate = useNavigateCustom();\n  useLockBodyScroll({ isLocked: !isDesktop && openSortBy });\n\n  const onRowClick = (row: IRowTransaction) => {\n    if (isDesktop) {\n      const { parseTxHash } = row || {};\n      parseTxHash && navigate(`/tx/${parseTxHash}`);\n    }\n  };\n\n  useQuery([\"getLimit\"], () => getClient().governor.getLimit(), {\n    onError: () => {\n      setIsErrorDashboard(true);\n      setIsLoadingDashboard(false);\n    },\n    onSuccess: (data: IDataDashboard[]) => {\n      const tempRows: IRowDashboard[] = [];\n\n      data\n        .filter((item: IDataDashboard) => item.notionalLimit > 0 && item.maxTransactionSize > 0)\n        .map((item: IDataDashboard) => {\n          const { chainId, notionalLimit, maxTransactionSize, availableNotional } = item;\n          const availablePercentage = (item.availableNotional / item.notionalLimit) * 100;\n          const formattedValue = parseFloat(formatNumber(availablePercentage, 2));\n          const chainName = getChainName({ chainId: item.chainId, network: currentNetwork });\n\n          const row = {\n            chainId,\n            chainName,\n            maxTransactionSize,\n            notionalLimit,\n            availableNotional,\n            chain: (\n              <div className=\"dashboard chain\">\n                <BlockchainIcon\n                  background=\"var(--color-black-25)\"\n                  chainId={chainId}\n                  className=\"chain-icon\"\n                  colorless={false}\n                  network={currentNetwork}\n                  size={24}\n                />\n                <p>{chainName}</p>\n              </div>\n            ),\n            singleTransactionLimit: (\n              <div className=\"dashboard big-transaction\">\n                <h4>\n                  single tx limit <SingleTxLimitTooltip />\n                </h4>\n                <p>{formatNumber(item.maxTransactionSize, 0)} USD</p>\n              </div>\n            ),\n            dailyLimit: (\n              <div className=\"dashboard daily-limit\">\n                <h4>\n                  daily limit <DailyLimitTooltip />\n                </h4>\n                <p>{formatNumber(item.notionalLimit, 0)} USD</p>\n              </div>\n            ),\n            remainingTransactionLimit: (\n              <div className=\"dashboard min-remaining\">\n                <div className=\"min-remaining-container\">\n                  <Tooltip side=\"left\" tooltip={<div>{formattedValue}%</div>}>\n                    <div>\n                      <MinRemainingBar\n                        color={\n                          100 - availablePercentage >= 80 ? \"#FF884D\" : \"var(--color-success-100)\"\n                        }\n                        percentage={availablePercentage}\n                      />\n                    </div>\n                  </Tooltip>\n                </div>\n\n                <h4>\n                  remaining tx limit <RemainingTxLimitTooltip />\n                </h4>\n                <p>{formatNumber(item.availableNotional, 0)} USD</p>\n              </div>\n            ),\n          };\n\n          tempRows.push(row);\n        });\n\n      setDataDashboard(tempRows);\n      setIsLoadingDashboard(false);\n    },\n    enabled: isMainnet,\n  });\n\n  useQuery([\"getEnqueuedTransactions\"], () => getClient().governor.getEnqueuedTransactions(), {\n    onError: () => {\n      setIsErrorTransactions(true);\n      setIsLoadingTransactions(false);\n    },\n    onSuccess: async (txs: IDataTransaction[]) => {\n      const tempRows: IRowTransaction[] = [];\n\n      await Promise.all(\n        txs.map(async tx => {\n          const { chainId, releaseTime, status, txHash, amount } = tx;\n          if (status === \"issued\") return;\n\n          const txInfo = await getClient().guardianNetwork.getOperations({\n            txHash: tx.txHash,\n          });\n\n          const chainName = getChainName({ chainId, network: currentNetwork });\n\n          const parseTxHash = parseTx({\n            value: txHash,\n            chainId: tx.chainId as ChainId,\n          });\n\n          const usdAmount = txInfo[0]?.data?.usdAmount || `${amount}`;\n\n          const limitDataForChain = dataDashboard\n            ? dataDashboard.find((d: IRowDashboard) => d?.chainId === chainId)\n            : ETH_LIMIT;\n          const transactionLimit = limitDataForChain?.maxTransactionSize;\n          const isBigTransaction = transactionLimit <= Number(usdAmount);\n          const formatedStatus = isBigTransaction ? \"Big transaction\" : \"Daily limit exceeded\";\n\n          const releaseDate = new Date(releaseTime);\n          const currentDate = new Date();\n          const diffInMilliseconds = releaseDate.getTime() - currentDate.getTime();\n          const diffInHours = Math.floor(diffInMilliseconds / (1000 * 60 * 60));\n          const diffInMinutes = Math.floor((diffInMilliseconds % (1000 * 60 * 60)) / (1000 * 60));\n          const timeLeft = `${diffInHours <= 0 ? \"\" : `${diffInHours}h, `}${\n            diffInMinutes <= 0 ? \"\" : `${diffInMinutes}m`\n          } left`;\n\n          const row = {\n            chainName,\n            parseTxHash,\n            usdAmount,\n            formatedStatus,\n            releaseDate,\n            chain: (\n              <div className=\"txs chain\">\n                <BlockchainIcon\n                  background=\"var(--color-black-25)\"\n                  chainId={chainId}\n                  className=\"chain-icon\"\n                  colorless={false}\n                  network={currentNetwork}\n                  size={24}\n                />\n                <p>{chainName}</p>\n              </div>\n            ),\n            txHash: (\n              <div className=\"txs tx-hash\">\n                <h4>TX HASH</h4>\n                <NavLink to={`/tx/${parseTxHash}`}>\n                  {shortAddress(parseTxHash).toUpperCase()}\n                </NavLink>\n                <CopyToClipboard toCopy={parseTxHash}>\n                  <CopyIcon width={24} />\n                </CopyToClipboard>\n              </div>\n            ),\n            amount: (\n              <div className=\"txs amount\">\n                <h4>AMOUNT</h4>\n                <p>{formatNumber(+usdAmount, 0)} USD</p>\n              </div>\n            ),\n            status: (\n              <div className=\"txs status\">\n                {isBigTransaction ? (\n                  <>\n                    <h4>STATUS</h4>\n                    <StaticsIncreaseIcon\n                      style={{ color: \"var(--color-information-100)\" }}\n                      width={24}\n                    />\n                    <p>{formatedStatus}</p>\n                  </>\n                ) : (\n                  <>\n                    <h4>STATUS</h4>\n                    <PieChartIcon style={{ color: \"var(--color-alert-100)\" }} width={24} />\n                    <p>{formatedStatus}</p>\n                  </>\n                )}\n              </div>\n            ),\n            releaseTime: (\n              <div className=\"txs release-time\">\n                <p>{timeLeft}</p>\n                <ClockIcon width={24} />\n              </div>\n            ),\n            viewDetails: (\n              <div className=\"txs view-details\">\n                <NavLink to={`/tx/${parseTxHash}`}>View details</NavLink>\n              </div>\n            ),\n          };\n\n          tempRows.push(row);\n        }),\n      );\n\n      setDataTransactions(tempRows);\n      setIsLoadingTransactions(false);\n    },\n    enabled: showTransactions && isLoadingTransactions && dataDashboard?.length > 0,\n  });\n\n  return (\n    <BaseLayout>\n      <section className=\"governor\">\n        <GovernorHeader />\n\n        <div className=\"governor-container\">\n          <div className=\"governor-container-top\">\n            <div className=\"governor-container-top-btns\">\n              <ToggleGroup\n                ariaLabel=\"Select type\"\n                items={[\n                  { label: \"Dashboard\", value: \"dashboard\", ariaLabel: \"Dashboard\" },\n                  {\n                    label: \"Queued Transactions\",\n                    value: \"txs\",\n                    ariaLabel: \"Queued Transactions\",\n                  },\n                ]}\n                onValueChange={value => {\n                  setShowTransactions(value === \"txs\");\n                }}\n                value={showTransactions ? \"txs\" : \"dashboard\"}\n              />\n            </div>\n          </div>\n\n          <div className=\"governor-container-table\">\n            {showTransactions ? (\n              isErrorDashboard || isErrorTransactions ? (\n                <ErrorPlaceholder />\n              ) : (\n                <Table\n                  trackTxsSortBy\n                  className=\"governor-container-table-transactions\"\n                  columns={\n                    isDesktop\n                      ? columnsTransactions\n                      : [\n                          ...columnsTransactions,\n                          {\n                            Header: \"View Details\",\n                            accessor: \"viewDetails\",\n                          },\n                        ]\n                  }\n                  data={dataTransactions}\n                  emptyMessage=\"There are no transactions queued in the governors.\"\n                  defaultSortBy={{ id: \"releaseTime\", desc: false }}\n                  isLoading={isLoadingTransactions}\n                  onRowClick={onRowClick}\n                />\n              )\n            ) : isErrorDashboard ? (\n              <ErrorPlaceholder />\n            ) : (\n              <Table\n                className={`governor-container-table-dashboard ${\n                  isDesktop ? \"\" : \"table-mobile-dashboard\"\n                }`}\n                columns={columnsDashboard}\n                data={dataDashboard}\n                emptyMessage=\"There is no data to display.\"\n                defaultSortBy={{ id: \"dailyLimit\", desc: true }}\n                isLoading={isLoadingDashboard}\n                trackTxsSortBy={true}\n              />\n            )}\n          </div>\n        </div>\n      </section>\n    </BaseLayout>\n  );\n};\n\nexport default Governor;\n","import { ChainId } from \"@wormhole-foundation/sdk\";\nimport { Column, Row } from \"react-table\";\nimport { Tooltip } from \"src/components/atoms\";\nimport { InfoCircleIcon } from \"src/icons/generic\";\n\nexport interface IDataDashboard {\n  availableNotional: number;\n  chainId: ChainId;\n  maxTransactionSize: number;\n  notionalLimit: number;\n}\n\nexport interface IRowDashboard {\n  availableNotional: number;\n  chain: React.ReactNode;\n  chainId: ChainId;\n  chainName: string;\n  dailyLimit: React.ReactNode;\n  maxTransactionSize: number;\n  notionalLimit: number;\n  remainingTransactionLimit: React.ReactNode;\n  singleTransactionLimit: React.ReactNode;\n}\n\nexport interface IDataTransaction {\n  amount: number;\n  chainId: ChainId;\n  emmiterAddress: string;\n  releaseTime: string;\n  sequence: string;\n  status: string;\n  txHash: string;\n  vaaId: string;\n}\n\nexport interface IRowTransaction {\n  amount: React.ReactNode;\n  chain: React.ReactNode;\n  chainName: string;\n  formatedStatus: string;\n  parseTxHash: string;\n  releaseDate: Date;\n  releaseTime: React.ReactNode;\n  status: React.ReactNode;\n  txHash: React.ReactNode;\n  usdAmount: string;\n}\n\nexport interface ISelectSortBy {\n  label: string;\n  value: string;\n}\n\nexport interface ISelectSortLowHigh {\n  label: string;\n  value: boolean;\n}\n\nexport const SingleTxLimitTooltip = () => (\n  <Tooltip\n    className=\"governor-container-table-title-tooltip\"\n    maxWidth={false}\n    tooltip={\n      <div>\n        Transactions exceeding this single-transaction threshold activate a 24-hour finality delay\n        before being signed by Wormhole Guardians. These transactions are not included in the total\n        value counted towards the 24-hour rolling period limit.\n      </div>\n    }\n    type=\"info\"\n  >\n    <div>\n      <InfoCircleIcon />\n    </div>\n  </Tooltip>\n);\n\nexport const DailyLimitTooltip = () => (\n  <Tooltip\n    className=\"governor-container-table-title-tooltip\"\n    maxWidth={false}\n    tooltip={\n      <div>\n        Maximum total value of transactions that can be signed without delay in any 24-hour rolling\n        period. If this limit is exceeded, additional transactions are delayed until earlier\n        transactions age beyond this 24-hour window, thereby freeing up bandwidth to process the\n        delayed transactions.\n      </div>\n    }\n    type=\"info\"\n  >\n    <div>\n      <InfoCircleIcon />\n    </div>\n  </Tooltip>\n);\n\nexport const RemainingTxLimitTooltip = () => (\n  <Tooltip\n    className=\"governor-container-table-title-tooltip\"\n    maxWidth={false}\n    tooltip={\n      <div>\n        This shows the remaining value of transaction volume that can be processed without delay\n        today. Once this limit is reached, further transactions will be delayed until sufficient\n        limit is available within the 24-hour rolling window.\n      </div>\n    }\n    type=\"info\"\n  >\n    <div>\n      <InfoCircleIcon />\n    </div>\n  </Tooltip>\n);\n\nexport const MinRemainingBar = ({ percentage, color }: { percentage: number; color: string }) => {\n  const totalSegments = 13;\n  const activeSegments = Math.round((percentage / 100) * totalSegments);\n\n  return (\n    <div className=\"min-remaining-container-bar\">\n      {Array.from({ length: totalSegments }, (_, i) => (\n        <div\n          key={i}\n          className=\"min-remaining-container-bar-segment\"\n          style={{ backgroundColor: i < 1 || i < activeSegments ? color : undefined }}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport const columnsDashboard: Column[] | any = [\n  {\n    Header: \"Chain\",\n    accessor: \"chain\",\n    sortType: (rowA: Row<IRowDashboard>, rowB: Row<IRowDashboard>) => {\n      const a = rowA.original.chainName.toUpperCase();\n      const b = rowB.original.chainName.toUpperCase();\n      return a.localeCompare(b);\n    },\n  },\n  {\n    Header: \"Single Transaction Limit\",\n    Tooltip: <SingleTxLimitTooltip />,\n    accessor: \"singleTransactionLimit\",\n    sortType: (rowA: Row<IRowDashboard>, rowB: Row<IRowDashboard>) => {\n      return rowA.original.maxTransactionSize - rowB.original.maxTransactionSize;\n    },\n  },\n  {\n    Header: \"Daily Limit\",\n    Tooltip: <DailyLimitTooltip />,\n    accessor: \"dailyLimit\",\n    sortType: (rowA: Row<IRowDashboard>, rowB: Row<IRowDashboard>) => {\n      return rowA.original.notionalLimit - rowB.original.notionalLimit;\n    },\n  },\n  {\n    Header: \"Remaining Transaction Limit\",\n    Tooltip: <RemainingTxLimitTooltip />,\n    accessor: \"remainingTransactionLimit\",\n    sortType: (rowA: Row<IRowDashboard>, rowB: Row<IRowDashboard>) => {\n      return rowA.original.availableNotional - rowB.original.availableNotional;\n    },\n  },\n];\n\nexport const columnsTransactions: Column[] | any = [\n  {\n    Header: \"Chain\",\n    accessor: \"chain\",\n    sortType: (rowA: Row<IRowTransaction>, rowB: Row<IRowTransaction>) => {\n      const a = rowA.original.chainName.toUpperCase();\n      const b = rowB.original.chainName.toUpperCase();\n\n      return a.localeCompare(b);\n    },\n  },\n  {\n    Header: \"Tx Hash\",\n    accessor: \"txHash\",\n    sortType: (rowA: Row<IRowTransaction>, rowB: Row<IRowTransaction>) => {\n      const a = rowA.original.parseTxHash.toUpperCase();\n      const b = rowB.original.parseTxHash.toUpperCase();\n\n      return a.localeCompare(b);\n    },\n  },\n  {\n    Header: \"Amount\",\n    accessor: \"amount\",\n    sortType: (rowA: Row<IRowTransaction>, rowB: Row<IRowTransaction>) => {\n      return +rowA.original.usdAmount - +rowB.original.usdAmount;\n    },\n  },\n  {\n    Header: \"Status\",\n    accessor: \"status\",\n    sortType: (rowA: Row<IRowTransaction>, rowB: Row<IRowTransaction>) => {\n      const a = rowA.original.formatedStatus.toUpperCase();\n      const b = rowB.original.formatedStatus.toUpperCase();\n\n      return a.localeCompare(b);\n    },\n  },\n  {\n    Header: \"Release Time\",\n    accessor: \"releaseTime\",\n    sortType: (rowA: Row<IRowTransaction>, rowB: Row<IRowTransaction>) => {\n      const a = new Date(rowA.original.releaseDate);\n      const b = new Date(rowB.original.releaseDate);\n\n      return a.getTime() - b.getTime();\n    },\n  },\n];\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","_jsxRuntime","_react","_reactRouterDom","_reactQuery","_analytics","_analyticsDefault","interopDefault","_environmentContext","_consts","_baseLayout","_atoms","_organisms","_wormhole","_number","_hooks","_crypto","_governorUtils","_client","_generic","_molecules","_txs","default","searchParams","setSearchParams","useSearchParams","showTransactions","setShowTransactionsState","useState","useEffect","page","title","setShowTransactions","show","prev","set","isLoadingDashboard","setIsLoadingDashboard","isLoadingTransactions","setIsLoadingTransactions","isErrorDashboard","setIsErrorDashboard","isErrorTransactions","setIsErrorTransactions","dataDashboard","setDataDashboard","dataTransactions","setDataTransactions","openSortBy","setOpenSortBy","environment","useEnvironment","currentNetwork","network","isMainnet","width","useWindowSize","isDesktop","BREAKPOINTS","desktop","navigate","useNavigateCustom","useLockBodyScroll","isLocked","useQuery","getClient","governor","getLimit","onError","onSuccess","data","tempRows","filter","item","notionalLimit","maxTransactionSize","map","chainId","availableNotional","availablePercentage","formattedValue","parseFloat","formatNumber","chainName","getChainName","row","chain","jsxs","className","children","jsx","BlockchainIcon","background","colorless","size","singleTransactionLimit","SingleTxLimitTooltip","dailyLimit","DailyLimitTooltip","remainingTransactionLimit","Tooltip","side","tooltip","MinRemainingBar","color","percentage","RemainingTxLimitTooltip","push","enabled","getEnqueuedTransactions","txs","Promise","all","tx","releaseTime","status","txHash","amount","txInfo","guardianNetwork","getOperations","parseTxHash","parseTx","value","usdAmount","limitDataForChain","find","d","ETH_LIMIT","isBigTransaction","transactionLimit","Number","formatedStatus","releaseDate","Date","currentDate","diffInMilliseconds","getTime","diffInHours","Math","floor","diffInMinutes","timeLeft","NavLink","to","shortAddress","toUpperCase","CopyToClipboard","toCopy","CopyIcon","Fragment","StaticsIncreaseIcon","style","PieChartIcon","ClockIcon","viewDetails","BaseLayout","GovernorHeader","ToggleGroup","ariaLabel","items","label","onValueChange","ErrorPlaceholder","Table","trackTxsSortBy","columns","columnsTransactions","Header","accessor","emptyMessage","defaultSortBy","desc","isLoading","onRowClick","columnsDashboard","export","maxWidth","type","InfoCircleIcon","activeSegments","round","Array","from","_","backgroundColor","undefined","sortType","rowA","rowB","a","original","b","localeCompare"],"version":3,"file":"Governor.86c14ce9.js.map"}