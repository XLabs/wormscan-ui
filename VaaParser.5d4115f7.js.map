{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,G,I,E,E,qBCAA,EAAA,EAAA,SACA,EAAA,EAAA,oBACA,EAAA,EAAA,4BACA,EAAA,EAAA,0BACA,EAAA,EAAA,mBACA,EAAA,EAAA,iB,E,E,c,C,GACA,EAAA,EAAA,eACA,EAAA,EAAA,kBAEA,EAAA,EAAA,wBACA,EAAA,EAAA,qBAQA,EAAA,EAAA,4BACA,EAAA,EAAA,sBACA,EAAA,EAAA,cACA,EAAA,EAAA,kBACA,EAAA,EAAA,oBACA,EAAA,EAAA,kCAEA,EAAA,EAAA,oBACA,EAAA,EAAA,oBACA,EAAA,iB,I,E,E,mB,M,AAmkBe,CAAA,EAAA,OAAA,CAjkBG,KAChB,AAAA,CAAA,EAAA,EAAA,SAAS,AAAT,EAAU,KACR,AAAA,CAAA,EAAA,EAAA,OAAQ,AAAR,EAAU,IAAI,CAAC,CAAE,MAAO,YAAa,EACvC,EAAG,EAAE,EAEL,GAAM,CAAE,YA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","sources":["<anon>","src/pages/VaaParser/index.tsx","src/utils/object.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"dT6wg\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _client = require(\"react-dom/client\");\nvar _sdk = require(\"@wormhole-foundation/sdk\");\nvar _baseLayout = require(\"src/layouts/BaseLayout\");\nvar _hooks = require(\"src/utils/hooks\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nvar _reactQuery = require(\"react-query\");\nvar _client1 = require(\"src/api/Client\");\nvar _atoms = require(\"src/components/atoms\");\nvar _generic = require(\"src/icons/generic\");\nvar _molecules = require(\"src/components/molecules\");\nvar _wormhole = require(\"src/utils/wormhole\");\nvar _consts = require(\"src/consts\");\nvar _date = require(\"src/utils/date\");\nvar _reactRouterDom = require(\"react-router-dom\");\nvar _environmentContext = require(\"src/context/EnvironmentContext\");\nvar _object = require(\"src/utils/object\");\nvar _parser = require(\"src/utils/parser\");\nvar _stylesScss = require(\"./styles.scss\");\nvar Buffer = require(\"aa1e68d3f3848aa\").Buffer;\nconst VaaParser = ()=>{\n    (0, _react.useEffect)(()=>{\n        (0, _analyticsDefault.default).page({\n            title: \"VAA_PARSER\"\n        });\n    }, []);\n    const { environment } = (0, _environmentContext.useEnvironment)();\n    const params = (0, _reactRouterDom.useParams)();\n    const vaaParam = params?.[\"*\"];\n    const navigate = (0, _hooks.useNavigateCustom)();\n    const inputTxRef = (0, _react.useRef)(null);\n    const [inputs, setInputs] = (0, _react.useState)(null);\n    const [inputsIndex, setInputsIndex] = (0, _react.useState)(0);\n    const paramTx = vaaParam?.includes(\"operation/\");\n    const [input, setInput] = (0, _react.useState)(paramTx ? \"\" : (0, _parser.processInputValue)(vaaParam));\n    const [inputType, setInputType] = (0, _react.useState)(paramTx ? \"base64\" : (0, _parser.processInputType)(vaaParam));\n    const [txSearch, setTxSearch] = (0, _react.useState)(paramTx ? vaaParam.replace(\"operation/\", \"\") : \"\");\n    const [parsedRaw, setParsedRaw] = (0, _react.useState)(false);\n    const [result, setResult] = (0, _react.useState)(null);\n    const [resultRaw, setResultRaw] = (0, _react.useState)(null);\n    const [hideJson, setHideJson] = (0, _react.useState)(false);\n    const resetResult = ()=>{\n        setInputs(null);\n        setInputsIndex(0);\n        setInput(\"\");\n        setTxSearch(\"\");\n        setResult(null);\n        setResultRaw(null);\n        navigate(`/developers/vaa-parser?network=${environment.network}`);\n    };\n    const collapseGuardianSignatures = ()=>{\n        setTimeout(()=>{\n            document.querySelectorAll(\".json-view-key\").forEach((a)=>{\n                if (a.innerHTML?.includes(\"guardianSignatures\")) {\n                    const parentElement = a.parentElement;\n                    const collapse = parentElement.children?.[0];\n                    if (collapse) collapse.click();\n                }\n            });\n        }, 50);\n    };\n    const renderExtras = (0, _react.useCallback)(()=>{\n        (0, _parser.waitForElement)(\".json-view-key\").then(()=>{\n            document.querySelectorAll(\".added-stuff\").forEach((a)=>a.remove());\n            // Add collapse/expand behaviour\n            document.querySelectorAll(\".json-view-collapseIcon\").forEach((a)=>{\n                const renderAtCollapse = (ev)=>{\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                    if (a.getAttribute(\"isCollapsed\") !== \"true\") {\n                        a.setAttribute(\"isCollapsed\", \"true\");\n                        a.parentElement.childNodes.forEach((block)=>{\n                            if (block.tagName === \"DIV\") {\n                                block.style.display = \"none\";\n                                a.style.transform = \"rotate(-90deg)\";\n                            }\n                        });\n                    } else {\n                        a.setAttribute(\"isCollapsed\", \"false\");\n                        a.parentElement.childNodes.forEach((block)=>{\n                            if (block.tagName === \"DIV\") {\n                                block.style.display = \"block\";\n                                a.style.transform = \"rotate(0deg)\";\n                            }\n                        });\n                    }\n                };\n                a.removeEventListener(\"click\", renderAtCollapse);\n                a.addEventListener(\"click\", renderAtCollapse);\n            });\n            // Add texts to enhace information\n            document.querySelectorAll(\".json-view-key\").forEach((a)=>{\n                // Add chain names and icon to decoded VAA\n                if (a.innerHTML?.includes(\"chain\") || a.innerHTML?.includes(\"emitterChain\") || a.innerHTML?.includes(\"fromChain\") || a.innerHTML?.includes(\"recipientChain\") || a.innerHTML?.includes(\"refundChainId\") || a.innerHTML?.includes(\"targetChainId\") || a.innerHTML?.includes(\"destinationChain\") || a.innerHTML?.includes(\"sourceChainId\") || a.innerHTML?.includes(\"destChainId\") || a.innerHTML?.includes(\"toChain\") || a.innerHTML?.includes(\"tokenChain\") || a.innerHTML?.includes(\"feeChain\")) {\n                    const parentElement = a.parentElement;\n                    const chainId = +parentElement.children?.[1]?.innerHTML;\n                    const chain = (0, _wormhole.getChainName)({\n                        chainId: chainId,\n                        network: environment.network\n                    });\n                    if (chain) {\n                        const reactContainer = document.createElement(\"span\");\n                        reactContainer.classList.add(\"added-stuff\");\n                        const root = (0, _client.createRoot)(reactContainer);\n                        parentElement?.appendChild(reactContainer);\n                        const chainIcon = (0, _wormhole.getChainIcon)({\n                            chainId\n                        });\n                        root.render(/*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"chain-icon\",\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"img\", {\n                                    src: chainIcon,\n                                    alt: `${chain} icon`,\n                                    loading: \"lazy\",\n                                    width: 16,\n                                    height: 16\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                    children: ` (${chain})`\n                                })\n                            ]\n                        }));\n                    }\n                }\n                // Add payload types to decoded VAA\n                if (a.innerHTML?.includes(\"payloadType\")) {\n                    const parentElement = a.parentElement;\n                    const type = (0, _consts.txType)[+parentElement.children?.[1]?.innerHTML] ?? false;\n                    if (type) {\n                        const reactContainer = document.createElement(\"span\");\n                        reactContainer.classList.add(\"added-stuff\");\n                        const root = (0, _client.createRoot)(reactContainer);\n                        parentElement?.appendChild(reactContainer);\n                        root.render(/*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                            style: {\n                                marginLeft: 4\n                            },\n                            children: ` (${type})`\n                        }));\n                    }\n                }\n                // Add timestamps as texts in decoded VAA\n                if (a.innerHTML?.includes(\"timestamp\")) {\n                    const parentElement = a.parentElement;\n                    const timestamp = parentElement.children?.[1]?.innerHTML?.replaceAll('\"', \"\");\n                    const time = new Date(isNaN(+timestamp) ? timestamp : +timestamp * 1000);\n                    const formatted = (0, _date.formatDate)(time);\n                    if (formatted) {\n                        const TimestampTooltip = ()=>/*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Tooltip), {\n                                tooltip: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                    children: \"This is the timestamp of the block on the blockchain which emitted this VAA, not the time the VAA was signed by the guardians.\"\n                                }),\n                                type: \"info\",\n                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                    className: \"copy-item\",\n                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.InfoCircleIcon), {})\n                                })\n                            });\n                        const reactContainer = document.createElement(\"span\");\n                        reactContainer.classList.add(\"copy-item\");\n                        reactContainer.classList.add(\"added-stuff\");\n                        const root = (0, _client.createRoot)(reactContainer);\n                        a.parentElement?.appendChild(reactContainer);\n                        root.render(/*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                    children: ` // ${formatted}`\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(TimestampTooltip, {})\n                            ]\n                        }));\n                    }\n                }\n            });\n            // Add a copy to clipboard to strings and numbers (single values)\n            document.querySelectorAll(\".json-view-string, .json-view-number\").forEach((text)=>{\n                if (text.innerHTML?.length > 15) {\n                    const reactContainer = document.createElement(\"span\");\n                    reactContainer.classList.add(\"copy-item\");\n                    reactContainer.classList.add(\"added-stuff\");\n                    const parentElement = text.parentElement;\n                    parentElement.appendChild(reactContainer);\n                    const root = (0, _client.createRoot)(reactContainer);\n                    const toCopy = text.innerHTML.startsWith('\"') && text.innerHTML.endsWith('\"') ? text.innerHTML.slice(1, -1) : text.innerHTML;\n                    root.render(/*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.CopyContent), {\n                        text: toCopy\n                    }));\n                }\n            });\n            // Add a copy to clipboard to objects and arrays (multiple value``s)\n            document.querySelectorAll(\".json-view-collapseIcon\").forEach((item)=>{\n                const parentElement = item.parentElement;\n                if (parentElement?.parentElement?.parentElement?.className === \"json-view\") return;\n                const reactContainer = document.createElement(\"span\");\n                reactContainer.classList.add(\"copy-item\");\n                reactContainer.classList.add(\"added-stuff\");\n                const whichChild = parentElement.children[1].className === \"json-view-key\" ? 3 : 2;\n                const childElement = parentElement.children[whichChild];\n                parentElement.insertBefore(reactContainer, childElement);\n                const root = (0, _client.createRoot)(reactContainer);\n                let textToCopy = parentElement.innerText.replace(/\"[^\"]*\":/, \"\");\n                if (textToCopy.endsWith(\",\")) textToCopy = textToCopy.slice(0, -1);\n                root.render(/*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.CopyContent), {\n                    text: textToCopy\n                }));\n            });\n        }).catch((_err)=>{});\n    }, [\n        environment.network\n    ]);\n    const getGuardianName = (guardianSet, index)=>{\n        const guardianSetList = (0, _consts.getGuardianSet)(guardianSet);\n        return guardianSetList?.[index]?.name;\n    };\n    const { isError, isLoading: isLoadingParse, isFetching: isFetchingParse } = (0, _reactQuery.useQuery)([\n        \"getParsedVaa\",\n        input\n    ], ()=>(0, _client1.getClient)().guardianNetwork.getParsedVaa(input), {\n        enabled: !!input,\n        retry: 0,\n        onSettled: async (_data)=>{\n            // success or fail, process RAW vaa (no API) and set it\n            try {\n                const vaaBuffer = Buffer.from(input, \"base64\");\n                const parsedVaa = (0, _sdk.deserialize)(\"Uint8Array\", vaaBuffer);\n                const guardianSignatures = parsedVaa.signatures.map((sig)=>({\n                        index: sig.guardianIndex,\n                        signature: (0, _sdk.encoding).b64.encode(sig.signature.encode())\n                    }));\n                const { emitterAddress, hash, sequence, guardianSet, emitterChain } = parsedVaa || {};\n                const parsedEmitterAddress = emitterAddress.toNative(emitterChain).toString();\n                const parsedHash = Buffer.from(hash).toString(\"hex\");\n                const parsedSequence = Number(sequence);\n                const parsedGuardianSignatures = guardianSignatures?.map(({ index, signature })=>({\n                        index,\n                        signature: \"0x\" + Buffer.from((0, _sdk.encoding).b64.decode(signature)).toString(\"hex\"),\n                        name: getGuardianName(guardianSet, index)\n                    }));\n                const parsedVaaAny = parsedVaa;\n                delete parsedVaaAny.signatures;\n                setResultRaw({\n                    ...parsedVaaAny,\n                    payload: parsedVaa.payload ? Buffer.from(parsedVaa.payload).toString(\"hex\") : null,\n                    emitterAddress: parsedEmitterAddress,\n                    emitterChain: (0, _sdk.chainToChainId)(parsedVaa.emitterChain),\n                    guardianSignatures: parsedGuardianSignatures,\n                    hash: parsedHash,\n                    sequence: parsedSequence\n                });\n            } catch (e) {\n                setResultRaw(null);\n            }\n        },\n        onError: (_err)=>{\n            setResult(null);\n        },\n        onSuccess: (data)=>{\n            // add guardian names to guardianSignatures\n            if (data?.vaa?.guardianSetIndex && data?.vaa?.guardianSignatures) data = {\n                ...data,\n                vaa: {\n                    ...data.vaa,\n                    guardianSignatures: data.vaa.guardianSignatures.map(({ index, signature })=>({\n                            index,\n                            signature,\n                            name: getGuardianName(data?.vaa?.guardianSetIndex, index)\n                        }))\n                }\n            };\n            setResult(data);\n            const vaaID = `${data?.vaa?.emitterChain}/${data?.vaa?.emitterAddress}/${data?.vaa?.sequence}`;\n            if (!txSearch) setTxSearch(vaaID);\n            renderExtras();\n            collapseGuardianSignatures();\n        }\n    });\n    const { isLoading: isLoadingTx, isFetching: isFetchingTx } = (0, _reactQuery.useQuery)([\n        \"getOperations\",\n        txSearch\n    ], async ()=>{\n        const isVaaID = txSearch.split(\"/\")?.length === 3;\n        const send = isVaaID ? {\n            vaaID: txSearch\n        } : {\n            txHash: txSearch\n        };\n        // check current network and return if it is\n        let currentNetworkResponse;\n        try {\n            currentNetworkResponse = await (0, _client1.getClient)().guardianNetwork.getOperations(send);\n        } catch  {\n        //\n        }\n        if (!!currentNetworkResponse?.length) return currentNetworkResponse;\n        // if no result, check other network and make the switch\n        const otherNetwork = environment.network === \"Mainnet\" ? \"Testnet\" : \"Mainnet\";\n        const otherNetworkResponse = await (0, _client1.getClient)(otherNetwork).guardianNetwork.getOperations(send);\n        if (!!otherNetworkResponse?.length) navigate(`/developers/vaa-parser/operation/${txSearch}?network=${otherNetwork}`);\n        return [];\n    }, {\n        retry: 0,\n        enabled: !!txSearch && !input,\n        onSuccess: (data)=>{\n            if (data.length && data[0].vaa?.raw) {\n                const rawVAA = data[0].vaa?.raw;\n                setInput(rawVAA);\n                const multiple = data.map((a)=>a.vaa?.raw).filter((a)=>!!a);\n                if (multiple.length > 1) {\n                    setInputs(multiple);\n                    setInputsIndex(0);\n                }\n                inputTxRef.current?.blur();\n                navigate(`/developers/vaa-parser/operation/${txSearch}?network=${environment.network}`, {\n                    replace: true\n                });\n            }\n        }\n    });\n    const VAA_ID = result?.vaa?.sequence && result?.vaa?.emitterChain && result?.vaa?.emitterAddress ? `${result?.vaa?.emitterChain}/${result?.vaa?.emitterAddress}/${result?.vaa?.sequence}` : resultRaw?.sequence && resultRaw?.emitterChain && resultRaw?.emitterAddress ? `${resultRaw?.emitterChain}/${resultRaw?.emitterAddress}/${resultRaw?.sequence}` : \"\";\n    const isLoading = isLoadingParse || isFetchingParse || isLoadingTx || isFetchingTx;\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _baseLayout.BaseLayout), {\n        secondaryHeader: true,\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n            className: \"devtools-page\",\n            children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"devtools-page-container\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h1\", {\n                        className: \"devtools-page-title\",\n                        children: \"VAA Parser\"\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h2\", {\n                        className: \"devtools-page-description\",\n                        children: \"The VAA Parser tool allows decoding a VAA using input methods such as txHash, VAA ID (wormholeChainID, EmitterAddress, Sequence), a VAA in hexadecimal format, or base64 format\"\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"devtools-page-body\",\n                        children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"parse\",\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"parse-txType\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.SearchIcon), {\n                                            width: 24\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"input\", {\n                                            type: \"text\",\n                                            className: `parse-txType-input ${txSearch && !input && !isLoading ? \"error\" : \"\"}`,\n                                            id: \"parse-txType-input\",\n                                            placeholder: \"Insert a TxHash or VAA ID\",\n                                            ref: inputTxRef,\n                                            value: txSearch,\n                                            onChange: (e)=>{\n                                                setInput(\"\");\n                                                setInputs(null);\n                                                setInputsIndex(0);\n                                                setTxSearch(e.target.value);\n                                                inputTxRef?.current?.blur();\n                                                navigate(`/developers/vaa-parser/operation/${e.target.value}?network=${environment.network}`, {\n                                                    replace: true\n                                                });\n                                            },\n                                            name: \"txType-input\",\n                                            \"aria-label\": \"Transaction hash or VAA ID input\",\n                                            spellCheck: false\n                                        })\n                                    ]\n                                }),\n                                txSearch && !input && !isLoading && /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"parse-txType-error\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.AlertTriangle), {\n                                            width: 24\n                                        }),\n                                        \"VAA cannot be found. Please try again or search something different.\"\n                                    ]\n                                }),\n                                txSearch && /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"parse-links\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                                            className: \"parse-links-reset\",\n                                            onClick: resetResult,\n                                            children: \"Reset search result\"\n                                        }),\n                                        (!!result || !!resultRaw) && input && VAA_ID && /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _atoms.NavLink), {\n                                            className: \"parse-links-navlink\",\n                                            target: \"_blank\",\n                                            to: `/tx/${txSearch ? txSearch : VAA_ID}`,\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                                    children: \"View transaction details\"\n                                                }),\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.LinkIcon), {\n                                                    width: 24\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                }),\n                                !!inputs?.length && /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"parse-multiple\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"span\", {\n                                            className: \"parse-multiple-left\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.InfoCircleIcon), {}),\n                                                \"This txHash has multiple VAAs.\"\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"parse-multiple-right\",\n                                            onClick: ()=>{\n                                                if (inputs[inputsIndex + 1]) {\n                                                    setInput(inputs[inputsIndex + 1]);\n                                                    setInputsIndex(inputsIndex + 1);\n                                                } else {\n                                                    setInput(inputs[0]);\n                                                    setInputsIndex(0);\n                                                }\n                                            },\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"span\", {\n                                                    className: \"vaa-pages\",\n                                                    children: [\n                                                        inputsIndex + 1,\n                                                        \"/\",\n                                                        inputs.length\n                                                    ]\n                                                }),\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.TriangleDownIcon), {\n                                                    className: \"triangle-icon\",\n                                                    width: 18\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.InputEncodedVaa), {\n                                    input: input,\n                                    inputType: inputType,\n                                    setInput: setInput,\n                                    setInputType: setInputType,\n                                    setTxSearch: setTxSearch,\n                                    setInputs: setInputs,\n                                    setInputsIndex: setInputsIndex,\n                                    page: \"vaa-parser\",\n                                    network: environment.network\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"parse-content\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"span\", {\n                                            className: `parse-content-title ${hideJson ? \"\" : \"rotate\"}`,\n                                            onClick: ()=>setHideJson(!hideJson),\n                                            children: [\n                                                \"Decoded VAA \",\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.TriangleDownIcon), {})\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: `parse-result ${input ? \"with-data\" : \"\"} ${hideJson ? \"hide\" : \"\"}`,\n                                            id: \"parse-result\",\n                                            \"aria-label\": \"Parsed result\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                                    className: \"parse-result-top\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                                            className: \"parse-result-top-btns\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                                                                    className: `parse-result-top-btn ${parsedRaw ? \"\" : \"active\"}`,\n                                                                    onClick: ()=>{\n                                                                        renderExtras();\n                                                                        collapseGuardianSignatures();\n                                                                        setParsedRaw(false);\n                                                                    },\n                                                                    children: \"Parsed\"\n                                                                }),\n                                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"button\", {\n                                                                    className: `parse-result-top-btn ${parsedRaw ? \"active\" : \"\"}`,\n                                                                    onClick: ()=>{\n                                                                        renderExtras();\n                                                                        collapseGuardianSignatures();\n                                                                        setParsedRaw(true);\n                                                                    },\n                                                                    children: \"Raw\"\n                                                                })\n                                                            ]\n                                                        }),\n                                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                            className: \"parse-result-top-copy\",\n                                                            children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _molecules.CopyToClipboard), {\n                                                                toCopy: result && !parsedRaw ? (0, _object.stringifyWithBigInt)(result, 4) : resultRaw && parsedRaw ? (0, _object.stringifyWithBigInt)(resultRaw, 4) : \"{}\",\n                                                                children: [\n                                                                    \"Copy all\",\n                                                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.CopyIcon), {\n                                                                        width: 24\n                                                                    })\n                                                                ]\n                                                            })\n                                                        })\n                                                    ]\n                                                }),\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                    className: \"parse-result-json\",\n                                                    children: isError && !resultRaw ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                                        className: \"parse-result-not-found\",\n                                                        children: \"Parsing failed\"\n                                                    }) : isLoading ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Loader), {}) : /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                                                        children: [\n                                                            !resultRaw && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                                className: \"devtools-page-alert\",\n                                                                children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                                                    className: \"devtools-page-alert-info\",\n                                                                    children: [\n                                                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.InfoCircleIcon), {}),\n                                                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"p\", {\n                                                                            children: \"Decoded VAA data will be displayed here\"\n                                                                        })\n                                                                    ]\n                                                                })\n                                                            }),\n                                                            (!!result || !!resultRaw) && input && VAA_ID && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                                className: \"parse-result-json-text\",\n                                                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.JsonText), {\n                                                                    data: result && !parsedRaw ? result : resultRaw && parsedRaw ? resultRaw : {}\n                                                                })\n                                                            })\n                                                        ]\n                                                    })\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                })\n                            ]\n                        })\n                    })\n                ]\n            })\n        })\n    });\n};\nexports.default = VaaParser;\n\n},{\"aa1e68d3f3848aa\":\"dB11O\",\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"react-dom/client\":\"hx7eL\",\"@wormhole-foundation/sdk\":\"cHYNT\",\"src/layouts/BaseLayout\":\"ibTEQ\",\"src/utils/hooks\":\"2VXdL\",\"src/analytics\":\"cr0zc\",\"react-query\":\"dbjqN\",\"src/api/Client\":\"bTumr\",\"src/components/atoms\":\"jMZmV\",\"src/icons/generic\":\"23xak\",\"src/components/molecules\":\"f5gIB\",\"src/utils/wormhole\":\"6bzfn\",\"src/consts\":\"2l9qr\",\"src/utils/date\":\"9wAFB\",\"react-router-dom\":\"cgBkD\",\"src/context/EnvironmentContext\":\"jjAhi\",\"src/utils/object\":\"fTwhz\",\"src/utils/parser\":\"dfcuZ\",\"./styles.scss\":\"93elv\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"fTwhz\":[function(require,module,exports,__globalThis) {\n// Replacer function to convert BigInt to string with 'n' appended\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"deepCloneWithBigInt\", ()=>deepCloneWithBigInt);\nparcelHelpers.export(exports, \"stringifyWithBigInt\", ()=>stringifyWithBigInt);\nparcelHelpers.export(exports, \"parseWithBigInt\", ()=>parseWithBigInt);\nparcelHelpers.export(exports, \"getNestedProperty\", ()=>getNestedProperty);\nparcelHelpers.export(exports, \"stringifyWithStringBigInt\", ()=>stringifyWithStringBigInt);\nparcelHelpers.export(exports, \"allKeys\", ()=>allKeys);\nconst bigintReplacer = (key, value)=>{\n    if (typeof value === \"bigint\") return value.toString() + \"n\";\n    return value;\n};\n// Reviver function to convert strings with 'n' back to BigInt\nconst bigintReviver = (key, value)=>{\n    if (typeof value === \"string\" && /^[0-9]+n$/.test(value)) return BigInt(value.slice(0, -1));\n    return value;\n};\nconst deepCloneWithBigInt = (obj)=>{\n    return JSON.parse(JSON.stringify(obj, bigintReplacer), bigintReviver);\n};\nconst stringifyWithBigInt = (obj, space)=>{\n    return JSON.stringify(obj, bigintReplacer, space);\n};\nconst parseWithBigInt = (str)=>{\n    return JSON.parse(str, bigintReviver);\n};\nconst getNestedProperty = (obj, key)=>{\n    if (!key) return;\n    return key.split(\".\").reduce((o, x)=>o == null ? o : o[x], obj);\n};\n// Replacer function to convert BigInt to strings\nconst bigintStringReplacer = (key, value)=>{\n    if (typeof value === \"bigint\") return value.toString();\n    return value;\n};\nconst stringifyWithStringBigInt = (obj, space)=>{\n    return JSON.stringify(obj, bigintStringReplacer, space);\n};\nconst allKeys = (obj)=>{\n    const keys = [];\n    Object.entries(obj).forEach(([key, value])=>{\n        if (typeof value === \"object\") keys.push(allKeys(value).map((a)=>`${key}.${a}`));\n        else keys.push(key);\n    });\n    return keys.flat();\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"93elv\":[function() {},{}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=VaaParser.5d4115f7.js.map\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { ChainId, chainToChainId, deserialize, encoding, network } from \"@wormhole-foundation/sdk\";\nimport { BaseLayout } from \"src/layouts/BaseLayout\";\nimport { useNavigateCustom } from \"src/utils/hooks\";\nimport analytics from \"src/analytics\";\nimport { useQuery } from \"react-query\";\nimport { getClient } from \"src/api/Client\";\nimport { GetParsedVaaOutput } from \"src/api/guardian-network/types\";\nimport { JsonText, Loader, NavLink, Tooltip, CopyContent } from \"src/components/atoms\";\nimport {\n  AlertTriangle,\n  CopyIcon,\n  InfoCircleIcon,\n  LinkIcon,\n  SearchIcon,\n  TriangleDownIcon,\n} from \"src/icons/generic\";\nimport { InputEncodedVaa, CopyToClipboard } from \"src/components/molecules\";\nimport { getChainIcon, getChainName } from \"src/utils/wormhole\";\nimport { getGuardianSet, txType } from \"src/consts\";\nimport { formatDate } from \"src/utils/date\";\nimport { useParams } from \"react-router-dom\";\nimport { useEnvironment } from \"src/context/EnvironmentContext\";\n\nimport { stringifyWithBigInt } from \"src/utils/object\";\nimport { processInputValue, processInputType, waitForElement } from \"src/utils/parser\";\nimport \"./styles.scss\";\n\nconst VaaParser = () => {\n  useEffect(() => {\n    analytics.page({ title: \"VAA_PARSER\" });\n  }, []);\n\n  const { environment } = useEnvironment();\n\n  const params = useParams();\n  const vaaParam = params?.[\"*\"];\n  const navigate = useNavigateCustom();\n\n  const inputTxRef = useRef(null);\n\n  const [inputs, setInputs] = useState<Array<string>>(null);\n  const [inputsIndex, setInputsIndex] = useState(0);\n\n  const paramTx = vaaParam?.includes(\"operation/\");\n\n  const [input, setInput] = useState(paramTx ? \"\" : processInputValue(vaaParam));\n  const [inputType, setInputType] = useState(paramTx ? \"base64\" : processInputType(vaaParam));\n  const [txSearch, setTxSearch] = useState(paramTx ? vaaParam.replace(\"operation/\", \"\") : \"\");\n\n  const [parsedRaw, setParsedRaw] = useState(false);\n  const [result, setResult] = useState<GetParsedVaaOutput>(null);\n  const [resultRaw, setResultRaw] = useState<any>(null);\n  const [hideJson, setHideJson] = useState(false);\n\n  const resetResult = () => {\n    setInputs(null);\n    setInputsIndex(0);\n    setInput(\"\");\n    setTxSearch(\"\");\n    setResult(null);\n    setResultRaw(null);\n    navigate(`/developers/vaa-parser?network=${environment.network}`);\n  };\n\n  const collapseGuardianSignatures = () => {\n    setTimeout(() => {\n      document.querySelectorAll(\".json-view-key\").forEach(a => {\n        if (a.innerHTML?.includes(\"guardianSignatures\")) {\n          const parentElement = a.parentElement;\n          const collapse = parentElement.children?.[0] as HTMLElement;\n\n          if (collapse) collapse.click();\n        }\n      });\n    }, 50);\n  };\n\n  const renderExtras = useCallback(() => {\n    waitForElement(\".json-view-key\")\n      .then(() => {\n        document.querySelectorAll(\".added-stuff\").forEach(a => a.remove());\n\n        // Add collapse/expand behaviour\n        document.querySelectorAll(\".json-view-collapseIcon\").forEach(a => {\n          const renderAtCollapse = (ev: MouseEvent) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            if (a.getAttribute(\"isCollapsed\") !== \"true\") {\n              a.setAttribute(\"isCollapsed\", \"true\");\n\n              a.parentElement.childNodes.forEach(block => {\n                if ((block as HTMLElement).tagName === \"DIV\") {\n                  (block as HTMLElement).style.display = \"none\";\n                  (a as HTMLElement).style.transform = \"rotate(-90deg)\";\n                }\n              });\n            } else {\n              a.setAttribute(\"isCollapsed\", \"false\");\n\n              a.parentElement.childNodes.forEach(block => {\n                if ((block as HTMLElement).tagName === \"DIV\") {\n                  (block as HTMLElement).style.display = \"block\";\n                  (a as HTMLElement).style.transform = \"rotate(0deg)\";\n                }\n              });\n            }\n          };\n\n          (a as HTMLElement).removeEventListener(\"click\", renderAtCollapse);\n          (a as HTMLElement).addEventListener(\"click\", renderAtCollapse);\n        });\n\n        // Add texts to enhace information\n        document.querySelectorAll(\".json-view-key\").forEach(a => {\n          // Add chain names and icon to decoded VAA\n          if (\n            a.innerHTML?.includes(\"chain\") ||\n            a.innerHTML?.includes(\"emitterChain\") ||\n            a.innerHTML?.includes(\"fromChain\") ||\n            a.innerHTML?.includes(\"recipientChain\") ||\n            a.innerHTML?.includes(\"refundChainId\") ||\n            a.innerHTML?.includes(\"targetChainId\") ||\n            a.innerHTML?.includes(\"destinationChain\") ||\n            a.innerHTML?.includes(\"sourceChainId\") ||\n            a.innerHTML?.includes(\"destChainId\") ||\n            a.innerHTML?.includes(\"toChain\") ||\n            a.innerHTML?.includes(\"tokenChain\") ||\n            a.innerHTML?.includes(\"feeChain\")\n          ) {\n            const parentElement = a.parentElement;\n            const chainId = +parentElement.children?.[1]?.innerHTML as ChainId;\n\n            const chain = getChainName({\n              chainId: chainId,\n              network: environment.network,\n            });\n\n            if (chain) {\n              const reactContainer = document.createElement(\"span\");\n              reactContainer.classList.add(\"added-stuff\");\n              const root = createRoot(reactContainer);\n\n              parentElement?.appendChild(reactContainer);\n\n              const chainIcon = getChainIcon({ chainId });\n              root.render(\n                <div className=\"chain-icon\">\n                  <img\n                    src={chainIcon}\n                    alt={`${chain} icon`}\n                    loading=\"lazy\"\n                    width={16}\n                    height={16}\n                  />\n                  <span>{` (${chain})`}</span>\n                </div>,\n              );\n            }\n          }\n\n          // Add payload types to decoded VAA\n          if (a.innerHTML?.includes(\"payloadType\")) {\n            const parentElement = a.parentElement;\n\n            const type = txType[+parentElement.children?.[1]?.innerHTML] ?? false;\n\n            if (type) {\n              const reactContainer = document.createElement(\"span\");\n              reactContainer.classList.add(\"added-stuff\");\n              const root = createRoot(reactContainer);\n\n              parentElement?.appendChild(reactContainer);\n              root.render(<span style={{ marginLeft: 4 }}>{` (${type})`}</span>);\n            }\n          }\n\n          // Add timestamps as texts in decoded VAA\n          if (a.innerHTML?.includes(\"timestamp\")) {\n            const parentElement = a.parentElement;\n\n            const timestamp = parentElement.children?.[1]?.innerHTML?.replaceAll('\"', \"\");\n\n            const time = new Date(isNaN(+timestamp) ? timestamp : +timestamp * 1000);\n            const formatted = formatDate(time);\n\n            if (formatted) {\n              const TimestampTooltip = () => (\n                <Tooltip\n                  tooltip={\n                    <div>\n                      This is the timestamp of the block on the blockchain which emitted this VAA,\n                      not the time the VAA was signed by the guardians.\n                    </div>\n                  }\n                  type=\"info\"\n                >\n                  <div className=\"copy-item\">\n                    <InfoCircleIcon />\n                  </div>\n                </Tooltip>\n              );\n\n              const reactContainer = document.createElement(\"span\");\n              reactContainer.classList.add(\"copy-item\");\n              reactContainer.classList.add(\"added-stuff\");\n              const root = createRoot(reactContainer);\n\n              a.parentElement?.appendChild(reactContainer);\n              root.render(\n                <>\n                  <span>{` // ${formatted}`}</span>\n                  <TimestampTooltip />\n                </>,\n              );\n            }\n          }\n        });\n\n        // Add a copy to clipboard to strings and numbers (single values)\n        document.querySelectorAll(\".json-view-string, .json-view-number\").forEach(text => {\n          if (text.innerHTML?.length > 15) {\n            const reactContainer = document.createElement(\"span\");\n            reactContainer.classList.add(\"copy-item\");\n            reactContainer.classList.add(\"added-stuff\");\n\n            const parentElement = text.parentElement;\n            parentElement.appendChild(reactContainer);\n\n            const root = createRoot(reactContainer);\n            const toCopy =\n              text.innerHTML.startsWith('\"') && text.innerHTML.endsWith('\"')\n                ? text.innerHTML.slice(1, -1)\n                : text.innerHTML;\n            root.render(<CopyContent text={toCopy} />);\n          }\n        });\n\n        // Add a copy to clipboard to objects and arrays (multiple value``s)\n        document.querySelectorAll(\".json-view-collapseIcon\").forEach(item => {\n          const parentElement = item.parentElement;\n\n          if (parentElement?.parentElement?.parentElement?.className === \"json-view\") return;\n\n          const reactContainer = document.createElement(\"span\");\n          reactContainer.classList.add(\"copy-item\");\n          reactContainer.classList.add(\"added-stuff\");\n\n          const whichChild = parentElement.children[1].className === \"json-view-key\" ? 3 : 2;\n          const childElement = parentElement.children[whichChild];\n\n          parentElement.insertBefore(reactContainer, childElement);\n\n          const root = createRoot(reactContainer);\n\n          let textToCopy = parentElement.innerText.replace(/\"[^\"]*\":/, \"\");\n          if (textToCopy.endsWith(\",\")) textToCopy = textToCopy.slice(0, -1);\n\n          root.render(<CopyContent text={textToCopy} />);\n        });\n      })\n      .catch(_err => {});\n  }, [environment.network]);\n\n  const getGuardianName = (guardianSet: number, index: number) => {\n    const guardianSetList = getGuardianSet(guardianSet);\n    return guardianSetList?.[index]?.name;\n  };\n\n  const {\n    isError,\n    isLoading: isLoadingParse,\n    isFetching: isFetchingParse,\n  } = useQuery([\"getParsedVaa\", input], () => getClient().guardianNetwork.getParsedVaa(input), {\n    enabled: !!input,\n    retry: 0,\n    onSettled: async _data => {\n      // success or fail, process RAW vaa (no API) and set it\n      try {\n        const vaaBuffer = Buffer.from(input, \"base64\");\n        const parsedVaa = deserialize(\"Uint8Array\", vaaBuffer);\n\n        const guardianSignatures = parsedVaa.signatures.map(sig => ({\n          index: sig.guardianIndex,\n          signature: encoding.b64.encode(sig.signature.encode()),\n        }));\n\n        const { emitterAddress, hash, sequence, guardianSet, emitterChain } = parsedVaa || {};\n\n        const parsedEmitterAddress = emitterAddress.toNative(emitterChain).toString();\n        const parsedHash = Buffer.from(hash).toString(\"hex\");\n        const parsedSequence = Number(sequence);\n        const parsedGuardianSignatures = guardianSignatures?.map(({ index, signature }) => ({\n          index,\n          signature: \"0x\" + Buffer.from(encoding.b64.decode(signature)).toString(\"hex\"),\n          name: getGuardianName(guardianSet, index),\n        }));\n\n        const parsedVaaAny = parsedVaa as any;\n        delete parsedVaaAny.signatures;\n\n        setResultRaw({\n          ...parsedVaaAny,\n          payload: parsedVaa.payload ? Buffer.from(parsedVaa.payload).toString(\"hex\") : null,\n          emitterAddress: parsedEmitterAddress,\n          emitterChain: chainToChainId(parsedVaa.emitterChain),\n          guardianSignatures: parsedGuardianSignatures,\n          hash: parsedHash,\n          sequence: parsedSequence,\n        });\n      } catch (e) {\n        setResultRaw(null);\n      }\n    },\n    onError: _err => {\n      setResult(null);\n    },\n    onSuccess: data => {\n      // add guardian names to guardianSignatures\n      if (data?.vaa?.guardianSetIndex && data?.vaa?.guardianSignatures) {\n        data = {\n          ...data,\n          vaa: {\n            ...data.vaa,\n            guardianSignatures: data.vaa.guardianSignatures.map(({ index, signature }: any) => ({\n              index,\n              signature,\n              name: getGuardianName(data?.vaa?.guardianSetIndex, index),\n            })),\n          },\n        };\n      }\n\n      setResult(data);\n\n      const vaaID = `${data?.vaa?.emitterChain}/${data?.vaa?.emitterAddress}/${data?.vaa?.sequence}`;\n      if (!txSearch) {\n        setTxSearch(vaaID);\n      }\n      renderExtras();\n      collapseGuardianSignatures();\n    },\n  });\n\n  const { isLoading: isLoadingTx, isFetching: isFetchingTx } = useQuery(\n    [\"getOperations\", txSearch],\n    async () => {\n      const isVaaID = txSearch.split(\"/\")?.length === 3;\n      const send = isVaaID ? { vaaID: txSearch } : { txHash: txSearch };\n\n      // check current network and return if it is\n      let currentNetworkResponse;\n      try {\n        currentNetworkResponse = await getClient().guardianNetwork.getOperations(send);\n      } catch {\n        //\n      }\n      if (!!currentNetworkResponse?.length) return currentNetworkResponse;\n\n      // if no result, check other network and make the switch\n      const otherNetwork = environment.network === \"Mainnet\" ? \"Testnet\" : \"Mainnet\";\n      const otherNetworkResponse = await getClient(otherNetwork).guardianNetwork.getOperations(\n        send,\n      );\n\n      if (!!otherNetworkResponse?.length) {\n        navigate(`/developers/vaa-parser/operation/${txSearch}?network=${otherNetwork}`);\n      }\n\n      return [];\n    },\n    {\n      retry: 0,\n      enabled: !!txSearch && !input,\n      onSuccess: data => {\n        if (data.length && data[0].vaa?.raw) {\n          const rawVAA = data[0].vaa?.raw;\n\n          setInput(rawVAA);\n\n          const multiple = data.map(a => a.vaa?.raw).filter(a => !!a);\n\n          if (multiple.length > 1) {\n            setInputs(multiple);\n            setInputsIndex(0);\n          }\n\n          inputTxRef.current?.blur();\n          navigate(`/developers/vaa-parser/operation/${txSearch}?network=${environment.network}`, {\n            replace: true,\n          });\n        }\n      },\n    },\n  );\n\n  const VAA_ID =\n    result?.vaa?.sequence && result?.vaa?.emitterChain && result?.vaa?.emitterAddress\n      ? `${result?.vaa?.emitterChain}/${result?.vaa?.emitterAddress}/${result?.vaa?.sequence}`\n      : resultRaw?.sequence && resultRaw?.emitterChain && resultRaw?.emitterAddress\n      ? `${resultRaw?.emitterChain}/${resultRaw?.emitterAddress}/${resultRaw?.sequence}`\n      : \"\";\n\n  const isLoading = isLoadingParse || isFetchingParse || isLoadingTx || isFetchingTx;\n\n  return (\n    <BaseLayout secondaryHeader>\n      <div className=\"devtools-page\">\n        <div className=\"devtools-page-container\">\n          <h1 className=\"devtools-page-title\">VAA Parser</h1>\n          <h2 className=\"devtools-page-description\">\n            The VAA Parser tool allows decoding a VAA using input methods such as txHash, VAA ID\n            (wormholeChainID, EmitterAddress, Sequence), a VAA in hexadecimal format, or base64\n            format\n          </h2>\n          <div className=\"devtools-page-body\">\n            <div className=\"parse\">\n              <div className=\"parse-txType\">\n                <SearchIcon width={24} />\n                <input\n                  type=\"text\"\n                  className={`parse-txType-input ${\n                    txSearch && !input && !isLoading ? \"error\" : \"\"\n                  }`}\n                  id=\"parse-txType-input\"\n                  placeholder=\"Insert a TxHash or VAA ID\"\n                  ref={inputTxRef}\n                  value={txSearch}\n                  onChange={e => {\n                    setInput(\"\");\n                    setInputs(null);\n                    setInputsIndex(0);\n\n                    setTxSearch(e.target.value);\n                    inputTxRef?.current?.blur();\n                    navigate(\n                      `/developers/vaa-parser/operation/${e.target.value}?network=${environment.network}`,\n                      { replace: true },\n                    );\n                  }}\n                  name=\"txType-input\"\n                  aria-label=\"Transaction hash or VAA ID input\"\n                  spellCheck={false}\n                />\n              </div>\n              {txSearch && !input && !isLoading && (\n                <div className=\"parse-txType-error\">\n                  <AlertTriangle width={24} />\n                  VAA cannot be found. Please try again or search something different.\n                </div>\n              )}\n\n              {txSearch && (\n                <div className=\"parse-links\">\n                  <button className=\"parse-links-reset\" onClick={resetResult}>\n                    Reset search result\n                  </button>\n\n                  {(!!result || !!resultRaw) && input && VAA_ID && (\n                    <NavLink\n                      className=\"parse-links-navlink\"\n                      target=\"_blank\"\n                      to={`/tx/${txSearch ? txSearch : VAA_ID}`}\n                    >\n                      <span>View transaction details</span>\n                      <LinkIcon width={24} />\n                    </NavLink>\n                  )}\n                </div>\n              )}\n\n              {!!inputs?.length && (\n                <div className=\"parse-multiple\">\n                  <span className=\"parse-multiple-left\">\n                    <InfoCircleIcon />\n                    This txHash has multiple VAAs.\n                  </span>\n\n                  <div\n                    className=\"parse-multiple-right\"\n                    onClick={() => {\n                      if (inputs[inputsIndex + 1]) {\n                        setInput(inputs[inputsIndex + 1]);\n                        setInputsIndex(inputsIndex + 1);\n                      } else {\n                        setInput(inputs[0]);\n                        setInputsIndex(0);\n                      }\n                    }}\n                  >\n                    <span className=\"vaa-pages\">\n                      {inputsIndex + 1}/{inputs.length}\n                    </span>\n                    <TriangleDownIcon className=\"triangle-icon\" width={18} />\n                  </div>\n                </div>\n              )}\n              <InputEncodedVaa\n                input={input}\n                inputType={inputType}\n                setInput={setInput}\n                setInputType={setInputType}\n                setTxSearch={setTxSearch}\n                setInputs={setInputs}\n                setInputsIndex={setInputsIndex}\n                page=\"vaa-parser\"\n                network={environment.network}\n              />\n\n              <div className=\"parse-content\">\n                <span\n                  className={`parse-content-title ${hideJson ? \"\" : \"rotate\"}`}\n                  onClick={() => setHideJson(!hideJson)}\n                >\n                  Decoded VAA <TriangleDownIcon />\n                </span>\n\n                <div\n                  className={`parse-result ${input ? \"with-data\" : \"\"} ${hideJson ? \"hide\" : \"\"}`}\n                  id=\"parse-result\"\n                  aria-label=\"Parsed result\"\n                >\n                  <div className=\"parse-result-top\">\n                    <div className=\"parse-result-top-btns\">\n                      <button\n                        className={`parse-result-top-btn ${parsedRaw ? \"\" : \"active\"}`}\n                        onClick={() => {\n                          renderExtras();\n                          collapseGuardianSignatures();\n                          setParsedRaw(false);\n                        }}\n                      >\n                        Parsed\n                      </button>\n                      <button\n                        className={`parse-result-top-btn ${parsedRaw ? \"active\" : \"\"}`}\n                        onClick={() => {\n                          renderExtras();\n                          collapseGuardianSignatures();\n                          setParsedRaw(true);\n                        }}\n                      >\n                        Raw\n                      </button>\n                    </div>\n\n                    <div className=\"parse-result-top-copy\">\n                      <CopyToClipboard\n                        toCopy={\n                          result && !parsedRaw\n                            ? stringifyWithBigInt(result, 4)\n                            : resultRaw && parsedRaw\n                            ? stringifyWithBigInt(resultRaw, 4)\n                            : \"{}\"\n                        }\n                      >\n                        Copy all\n                        <CopyIcon width={24} />\n                      </CopyToClipboard>\n                    </div>\n                  </div>\n\n                  <div className=\"parse-result-json\">\n                    {isError && !resultRaw ? (\n                      <span className=\"parse-result-not-found\">Parsing failed</span>\n                    ) : isLoading ? (\n                      <Loader />\n                    ) : (\n                      <>\n                        {!resultRaw && (\n                          <div className=\"devtools-page-alert\">\n                            <div className=\"devtools-page-alert-info\">\n                              <InfoCircleIcon />\n                              <p>Decoded VAA data will be displayed here</p>\n                            </div>\n                          </div>\n                        )}\n\n                        {(!!result || !!resultRaw) && input && VAA_ID && (\n                          <div className=\"parse-result-json-text\">\n                            <JsonText\n                              data={\n                                result && !parsedRaw\n                                  ? result\n                                  : resultRaw && parsedRaw\n                                  ? resultRaw\n                                  : {}\n                              }\n                            />\n                          </div>\n                        )}\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </BaseLayout>\n  );\n};\n\nexport default VaaParser;\n","// Replacer function to convert BigInt to string with 'n' appended\nconst bigintReplacer = (key: string, value: any): any => {\n  if (typeof value === \"bigint\") {\n    return value.toString() + \"n\";\n  }\n  return value;\n};\n\n// Reviver function to convert strings with 'n' back to BigInt\nconst bigintReviver = (key: string, value: any): any => {\n  if (typeof value === \"string\" && /^[0-9]+n$/.test(value)) {\n    return BigInt(value.slice(0, -1));\n  }\n  return value;\n};\n\n// Function to deep clone an object with BigInt support\nexport const deepCloneWithBigInt = <T>(obj: T): T => {\n  return JSON.parse(JSON.stringify(obj, bigintReplacer), bigintReviver);\n};\n\nexport const stringifyWithBigInt = (obj: object, space?: number): string => {\n  return JSON.stringify(obj, bigintReplacer, space);\n};\n\nexport const parseWithBigInt = (str: string) => {\n  return JSON.parse(str, bigintReviver);\n};\n\nexport const getNestedProperty = (obj: any, key: string) => {\n  if (!key) return;\n  return key.split(\".\").reduce((o, x) => (o == null ? o : o[x]), obj);\n};\n\n// Replacer function to convert BigInt to strings\nconst bigintStringReplacer = (key: string, value: any): any => {\n  if (typeof value === \"bigint\") {\n    return value.toString();\n  }\n  return value;\n};\n\nexport const stringifyWithStringBigInt = (obj: object, space?: number): string => {\n  return JSON.stringify(obj, bigintStringReplacer, space);\n};\n\n// return all the keys of an object (deep)\nexport const allKeys = (obj: any): Array<any> => {\n  const keys: any[] = [];\n\n  Object.entries(obj).forEach(([key, value]) => {\n    if (typeof value === \"object\") {\n      keys.push(allKeys(value).map(a => `${key}.${a}`));\n    } else {\n      keys.push(key);\n    }\n  });\n\n  return keys.flat();\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","_jsxRuntime","_react","_client","_sdk","_baseLayout","_hooks","_analytics","_analyticsDefault","interopDefault","_reactQuery","_client1","_atoms","_generic","_molecules","_wormhole","_consts","_date","_reactRouterDom","_environmentContext","_object","_parser","Buffer","default","useEffect","page","title","environment","useEnvironment","params","useParams","vaaParam","navigate","useNavigateCustom","inputTxRef","useRef","inputs","setInputs","useState","inputsIndex","setInputsIndex","paramTx","includes","input","setInput","processInputValue","inputType","setInputType","processInputType","txSearch","setTxSearch","replace","parsedRaw","setParsedRaw","result","setResult","resultRaw","setResultRaw","hideJson","setHideJson","collapseGuardianSignatures","setTimeout","document","querySelectorAll","forEach","a","innerHTML","parentElement","collapse","children","click","renderExtras","useCallback","waitForElement","then","remove","renderAtCollapse","ev","preventDefault","stopPropagation","getAttribute","setAttribute","childNodes","block","tagName","style","display","transform","removeEventListener","addEventListener","chainId","chain","getChainName","network","reactContainer","createElement","classList","add","root","createRoot","appendChild","chainIcon","getChainIcon","render","jsxs","className","jsx","src","alt","loading","width","height","type","txType","marginLeft","timestamp","replaceAll","time","Date","isNaN","formatted","formatDate","Fragment","Tooltip","tooltip","InfoCircleIcon","text","toCopy","startsWith","endsWith","slice","CopyContent","item","whichChild","childElement","insertBefore","textToCopy","innerText","catch","_err","getGuardianName","guardianSet","index","guardianSetList","getGuardianSet","isError","isLoading","isLoadingParse","isFetching","isFetchingParse","useQuery","getClient","guardianNetwork","getParsedVaa","enabled","retry","onSettled","_data","vaaBuffer","from","parsedVaa","deserialize","guardianSignatures","signatures","map","sig","guardianIndex","signature","encoding","b64","encode","emitterAddress","hash","sequence","emitterChain","parsedEmitterAddress","toNative","toString","parsedHash","parsedSequence","Number","parsedGuardianSignatures","decode","parsedVaaAny","payload","chainToChainId","e","onError","onSuccess","data","vaa","guardianSetIndex","vaaID","isLoadingTx","isFetchingTx","currentNetworkResponse","send","isVaaID","split","txHash","getOperations","otherNetwork","otherNetworkResponse","raw","multiple","filter","current","blur","VAA_ID","BaseLayout","secondaryHeader","SearchIcon","placeholder","ref","value","onChange","target","spellCheck","AlertTriangle","onClick","NavLink","to","LinkIcon","TriangleDownIcon","InputEncodedVaa","CopyToClipboard","stringifyWithBigInt","CopyIcon","Loader","JsonText","export","deepCloneWithBigInt","parseWithBigInt","getNestedProperty","stringifyWithStringBigInt","allKeys","bigintReplacer","key","bigintReviver","test","BigInt","obj","JSON","parse","stringify","space","str","reduce","o","bigintStringReplacer","keys","entries","push","flat"],"version":3,"file":"VaaParser.5d4115f7.js.map"}