{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,G,I,E,E,qBCAA,EAAA,EAAA,SACA,EAAA,EAAA,oBACA,EAAA,EAAA,eACA,EAAA,EAAA,4BACA,EAAA,EAAA,kBACA,EAAA,EAAA,kCACA,EAAA,EAAA,0BACA,EAAA,EAAA,wBAEA,EAAA,EAAA,cAOA,EAAA,EAAA,WACA,EAAA,EAAA,iBACA,EAAA,EAAA,iB,E,E,c,C,GACA,EAAA,EAAA,aACA,EAAA,EAAA,aACA,EAAA,EAAA,gBACA,EAAA,EAAA,kBACA,EAAA,EAAA,aACA,EAAA,EAAA,uBACA,EAAA,EAAA,wBAEA,EAAA,iBA+Ye,EAAA,OAAA,CAvYE,KACf,GAAM,CAAE,YAAA,CAAW,CAAE,CAAG,AAAA,CAAA,EAAA,EAAA,cAAc,AAAd,IAClB,EAAiB,EAAY,OAAO,CACpC,EAAY,AAAmB,YAAnB,EAEZ,CAAE,OAAA,CAAM,CAAE,aAAA,CAAY,CA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","sources":["<anon>","src/pages/Analytics/NTT/NTTToken/index.tsx","src/pages/Analytics/NTT/NTTToken/Summary.tsx","src/pages/Analytics/NTT/NTTToken/ByChain.tsx","src/pages/Analytics/NTT/NTTToken/TopHolders.tsx","src/pages/Analytics/NTT/NTTToken/TopAddresses.tsx","src/pages/Analytics/NTT/NTTToken/Metrics.tsx","src/pages/Analytics/NTT/NTTToken/TransfersOverTime.tsx","src/pages/Analytics/NTT/NTTToken/RecentTransactions.tsx"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"OD8RO\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _react = require(\"react\");\nvar _reactRouterDom = require(\"react-router-dom\");\nvar _reactQuery = require(\"react-query\");\nvar _sdk = require(\"@wormhole-foundation/sdk\");\nvar _client = require(\"src/api/Client\");\nvar _environmentContext = require(\"src/context/EnvironmentContext\");\nvar _baseLayout = require(\"src/layouts/BaseLayout\");\nvar _atoms = require(\"src/components/atoms\");\nvar _consts = require(\"src/consts\");\nvar _api = require(\"src/api\");\nvar _txs = require(\"src/pages/Txs\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nvar _summary = require(\"./Summary\");\nvar _byChain = require(\"./ByChain\");\nvar _topHolders = require(\"./TopHolders\");\nvar _topAddresses = require(\"./TopAddresses\");\nvar _metrics = require(\"./Metrics\");\nvar _transfersOverTime = require(\"./TransfersOverTime\");\nvar _recentTransactions = require(\"./RecentTransactions\");\n// import { CommunityBanner } from \"./CommunityBanner\";\nvar _stylesScss = require(\"./styles.scss\");\nconst NTTToken = ()=>{\n    const { environment } = (0, _environmentContext.useEnvironment)();\n    const currentNetwork = environment.network;\n    const isMainnet = currentNetwork === \"Mainnet\";\n    const { symbol, coingecko_id } = (0, _reactRouterDom.useParams)();\n    const [searchParams, setSearchParams] = (0, _reactRouterDom.useSearchParams)();\n    const [activeView, setActiveView] = (0, _react.useState)(searchParams.get(\"view\") || \"general-info\");\n    const [timeRange, setTimeRange] = (0, _react.useState)({\n        label: \"Last week\",\n        value: \"1w\"\n    });\n    const [by, setBy] = (0, _react.useState)(\"notional\");\n    const isUSDCe = coingecko_id === \"wormhole-bridged-usdc-fantom\";\n    const { startDate, endDate } = (0, _react.useMemo)(()=>{\n        const end = new Date();\n        const start = new Date(end);\n        switch(timeRange.value){\n            case \"1d\":\n                start.setDate(end.getDate() - 1);\n                break;\n            case \"1w\":\n                start.setDate(end.getDate() - 7);\n                break;\n            case \"1m\":\n                start.setMonth(end.getMonth() - 1);\n                break;\n            case \"1y\":\n                start.setFullYear(end.getFullYear() - 1);\n                break;\n        }\n        return {\n            startDate: start,\n            endDate: end\n        };\n    }, [\n        timeRange\n    ]);\n    const { data: chainLimitsData, isLoading: isLoadingLimits } = (0, _reactQuery.useQuery)([\n        \"getLimit\"\n    ], async ()=>{\n        try {\n            return await (0, _client.getClient)().governor.getLimit();\n        } catch  {\n            return null;\n        }\n    }, {\n        enabled: isMainnet\n    });\n    const { data: recentTransactions, isError: isErrorRecentTransactions, isFetching: isFetchingRecentTransactions } = (0, _reactQuery.useQuery)([\n        \"getRecentTransactions\",\n        symbol\n    ], async ()=>{\n        let page = 0;\n        let transactions = [];\n        while(transactions.length < 7){\n            const data = await (0, _client.getClient)().guardianNetwork.getOperations({\n                appId: (0, _consts.NTT_APP_ID),\n                pagination: {\n                    pageSize: 50,\n                    sortOrder: (0, _api.Order).DESC,\n                    page\n                }\n            });\n            const filteredTransactions = data.filter((tx)=>tx.data?.symbol.toUpperCase() === symbol.toUpperCase() || isUSDCe && tx.content?.standarizedProperties?.fromChain === (0, _sdk.chainToChainId)(\"Ethereum\") && tx.content?.standarizedProperties?.toChain === (0, _sdk.chainToChainId)(\"Fantom\") && tx.data?.symbol.toUpperCase() === \"USDC\");\n            const transactionsWithStatus = filteredTransactions.map((tx)=>{\n                const { emitterChain } = tx;\n                const payload = tx?.content?.payload;\n                const standarizedProperties = tx?.content?.standarizedProperties;\n                const { appIds, fromChain: stdFromChain, toChain: stdToChain } = standarizedProperties || {};\n                const globalToChainId = tx.targetChain?.chainId;\n                const parsedPayload = payload?.parsedPayload;\n                const fromChainOrig = emitterChain || stdFromChain;\n                const attributeType = tx.sourceChain?.attribute?.type;\n                const attributeValue = tx.sourceChain?.attribute?.value;\n                // --- Gateway Transfers\n                const fromChain = attributeType === \"wormchain-gateway\" ? attributeValue?.originChainId : fromChainOrig;\n                const toChain = parsedPayload?.[\"gateway_transfer\"]?.chain ? parsedPayload?.[\"gateway_transfer\"].chain : stdToChain || globalToChainId;\n                // -----\n                // --- Status Logic\n                const limitDataForChain = chainLimitsData ? chainLimitsData.find((data)=>data.chainId === fromChain) : (0, _txs.ETH_LIMIT);\n                const transactionLimit = limitDataForChain?.maxTransactionSize;\n                const isBigTransaction = transactionLimit <= Number(tx?.data?.usdAmount);\n                const isDailyLimitExceeded = limitDataForChain?.availableNotional < Number(tx?.data?.usdAmount);\n                const status = tx?.targetChain?.transaction?.txHash ? \"completed\" : appIds && (appIds.includes((0, _consts.CCTP_MANUAL_APP_ID)) || appIds.includes((0, _consts.CCTP_XR_APP_ID))) ? \"external_tx\" : tx.vaa?.raw ? (0, _consts.canWeGetDestinationTx)({\n                    appIds,\n                    network: currentNetwork,\n                    targetChain: toChain\n                }) ? \"pending_redeem\" : \"completed\" : isBigTransaction || isDailyLimitExceeded ? \"in_governors\" : \"in_progress\";\n                return {\n                    ...tx,\n                    status\n                };\n            });\n            transactions = [\n                ...transactions,\n                ...transactionsWithStatus\n            ];\n            if (page > 10) break;\n            page++;\n        }\n        return transactions.slice(0, 7);\n    }, {\n        enabled: !isLoadingLimits && isMainnet\n    });\n    const { data: transfersByTime, isError: isErrorTransfersByTime, isFetching: isFetchingTransfersByTime } = (0, _reactQuery.useQuery)([\n        \"getTransferByTimeTx\",\n        startDate,\n        endDate,\n        by\n    ], async ()=>{\n        const timeSpan = timeRange.value === \"1d\" ? \"1h\" : timeRange.value === \"1y\" ? \"1mo\" : \"1d\";\n        return {\n            data: await (0, _client.getClient)().nttApi.getNttTransferByTime({\n                by,\n                symbol,\n                from: startDate.toISOString(),\n                timeSpan,\n                to: endDate.toISOString()\n            }),\n            timeSpan\n        };\n    }, {\n        enabled: isMainnet,\n        refetchOnWindowFocus: false\n    });\n    const { data: summary, isError: isErrorSummary, isFetching: isFetchingSummary } = (0, _reactQuery.useQuery)([\n        \"getSummary\"\n    ], async ()=>{\n        const data = await (0, _client.getClient)().nttApi.getNttSummary({\n            coingecko_id\n        });\n        // TODO: when coingecko returns optimism, remove this\n        if (data.symbol === \"W\") {\n            if (!data.platforms[\"optimistic-ethereum\"]) data.platforms[\"optimistic-ethereum\"] = \"0xb0ffa8000886e57f86dd5264b9582b2ad87b2b91\";\n        }\n        return data;\n    }, {\n        enabled: isMainnet\n    });\n    const { data: activityTx, isError: isErrorActivityTx, isFetching: isFetchingActivityTx } = (0, _reactQuery.useQuery)(\"getActivityTx\", async ()=>{\n        const activity = await (0, _client.getClient)().nttApi.getNttActivity({\n            by: \"tx\",\n            symbol\n        });\n        activity?.sort((a, b)=>+a.value < +b.value ? 1 : -1);\n        return activity;\n    }, {\n        enabled: isMainnet\n    });\n    const { data: activityNotional, isError: isErrorActivityNotional, isFetching: isFetchingActivityNotional } = (0, _reactQuery.useQuery)(\"getActivityNotional\", async ()=>{\n        const activity = await (0, _client.getClient)().nttApi.getNttActivity({\n            by: \"notional\",\n            symbol\n        });\n        activity?.sort((a, b)=>+a.value < +b.value ? 1 : -1);\n        return activity;\n    }, {\n        enabled: isMainnet\n    });\n    const { data: topHolders, isError: isErrorTopHolders, isFetching: isFetchingTopHolders } = (0, _reactQuery.useQuery)(\"getTopHolders\", async ()=>{\n        const data = await (0, _client.getClient)().nttApi.getNttTopHolder({\n            coingecko_id\n        });\n        return data;\n    }, {\n        enabled: isMainnet\n    });\n    const { data: topAddressesNotional, isError: isErrorTopAddressesNotional, isFetching: isFetchingTopAddressesNotional } = (0, _reactQuery.useQuery)([\n        \"getNttTopAddressNotional\"\n    ], async ()=>{\n        const data = await (0, _client.getClient)().nttApi.getNttTopAddress({\n            by: \"notional\",\n            symbol\n        });\n        data?.sort((a, b)=>+a.value < +b.value ? 1 : -1);\n        return data;\n    }, {\n        enabled: isMainnet\n    });\n    const { data: topAddressesTx, isError: isErrorTopAddressesTx, isFetching: isFetchingTopAddressesTx } = (0, _reactQuery.useQuery)([\n        \"getNttTopAddressTx\"\n    ], async ()=>{\n        const data = await (0, _client.getClient)().nttApi.getNttTopAddress({\n            by: \"tx\",\n            symbol\n        });\n        data?.sort((a, b)=>+a.value < +b.value ? 1 : -1);\n        return data;\n    }, {\n        enabled: isMainnet\n    });\n    (0, _react.useEffect)(()=>{\n        (0, _analyticsDefault.default).page({\n            title: `ANALYTICS-${symbol.toUpperCase()}-TOKEN-${activeView}`\n        });\n    }, [\n        activeView,\n        symbol\n    ]);\n    (0, _react.useEffect)(()=>{\n        setActiveView(searchParams.get(\"view\") || \"general-info\");\n    }, [\n        searchParams\n    ]);\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _baseLayout.BaseLayout), {\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n            className: \"ntt-token-page\",\n            children: [\n                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _summary.Summary), {\n                    summary: summary,\n                    isLoading: isFetchingSummary,\n                    isError: isErrorSummary,\n                    coingecko_id: coingecko_id\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                    className: \"tabs\",\n                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                        ariaLabel: \"Select Token data view\",\n                        className: \"tabs-toggle-group\",\n                        items: [\n                            {\n                                label: \"General Information\",\n                                value: \"general-info\"\n                            },\n                            {\n                                label: \"Transfers Over Time\",\n                                value: \"transfers-over-time\"\n                            },\n                            {\n                                label: \"Top Transfers\",\n                                value: \"top-transfers\"\n                            },\n                            ...!isUSDCe ? [\n                                {\n                                    label: \"Top Holders\",\n                                    value: \"top-holders\"\n                                }\n                            ] : [],\n                            {\n                                label: \"Top Addresses\",\n                                value: \"top-addresses\"\n                            }\n                        ],\n                        onValueChange: (value)=>{\n                            setActiveView(value);\n                            setSearchParams((prev)=>{\n                                prev.set(\"view\", value);\n                                return prev;\n                            });\n                        },\n                        value: activeView\n                    })\n                }),\n                activeView === \"general-info\" && /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _metrics.Metrics), {\n                            summary: summary,\n                            isLoading: isFetchingSummary,\n                            isError: isErrorSummary\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _recentTransactions.RecentTransactions), {\n                            isError: isErrorRecentTransactions,\n                            isLoading: isLoadingLimits || isFetchingRecentTransactions,\n                            recentTransactions: recentTransactions,\n                            tokenIcon: summary?.image?.small\n                        })\n                    ]\n                }),\n                activeView === \"transfers-over-time\" && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _transfersOverTime.TransfersOverTime), {\n                    by: by,\n                    isError: isErrorTransfersByTime,\n                    isLoading: isFetchingTransfersByTime,\n                    setBy: setBy,\n                    setTimeRange: (value)=>setTimeRange(value),\n                    timeRange: timeRange,\n                    timeSpan: transfersByTime?.timeSpan || \"1d\",\n                    transfers: transfersByTime?.data,\n                    currentNetwork: currentNetwork\n                }),\n                activeView === \"top-transfers\" && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _byChain.ByChain), {\n                    activityNotional: activityNotional,\n                    activityTx: activityTx,\n                    isErrorActivityNotional: isErrorActivityNotional,\n                    isErrorActivityTx: isErrorActivityTx,\n                    isLoadingActivityNotional: isFetchingActivityNotional,\n                    isLoadingActivityTx: isFetchingActivityTx\n                }),\n                activeView === \"top-holders\" && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _topHolders.TopHolders), {\n                    isError: isErrorTopHolders,\n                    isLoading: isFetchingTopHolders,\n                    topHolders: topHolders\n                }),\n                activeView === \"top-addresses\" && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _topAddresses.TopAddresses), {\n                    isErrorTopAddressesNotional: isErrorTopAddressesNotional,\n                    isErrorTopAddressesTx: isErrorTopAddressesTx,\n                    isLoadingTopAddressesNotional: isFetchingTopAddressesNotional,\n                    isLoadingTopAddressesTx: isFetchingTopAddressesTx,\n                    topAddressesNotional: topAddressesNotional,\n                    topAddressesTx: topAddressesTx\n                })\n            ]\n        })\n    });\n};\nexports.default = NTTToken;\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react\":\"9njXz\",\"react-router-dom\":\"cgBkD\",\"react-query\":\"dbjqN\",\"@wormhole-foundation/sdk\":\"cHYNT\",\"src/api/Client\":\"bTumr\",\"src/context/EnvironmentContext\":\"jjAhi\",\"src/layouts/BaseLayout\":\"ibTEQ\",\"src/components/atoms\":\"jMZmV\",\"src/consts\":\"2l9qr\",\"src/api\":\"7Wp5O\",\"src/pages/Txs\":\"fSizI\",\"src/analytics\":\"cr0zc\",\"./Summary\":\"jiaZU\",\"./ByChain\":\"j44MD\",\"./TopHolders\":\"lz4HK\",\"./TopAddresses\":\"lQblX\",\"./Metrics\":\"91C84\",\"./TransfersOverTime\":\"9HjKO\",\"./RecentTransactions\":\"bdoHe\",\"./styles.scss\":\"kX07k\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"jiaZU\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"Summary\", ()=>Summary);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _reactQuery = require(\"react-query\");\nvar _reactFlipNumbers = require(\"react-flip-numbers\");\nvar _reactFlipNumbersDefault = parcelHelpers.interopDefault(_reactFlipNumbers);\nvar _sdk = require(\"@wormhole-foundation/sdk\");\nvar _environmentContext = require(\"src/context/EnvironmentContext\");\nvar _generic = require(\"src/icons/generic\");\nvar _atoms = require(\"src/components/atoms\");\nvar _number = require(\"src/utils/number\");\nvar _wormhole = require(\"src/utils/wormhole\");\nvar _client = require(\"src/api/Client\");\n// change the name that coingecko brings us to the one we use\nconst chainNameMap = {\n    \"arbitrum-one\": \"Arbitrum\",\n    \"near-protocol\": \"Near\",\n    \"optimistic-ethereum\": \"Optimism\",\n    \"polygon-pos\": \"Polygon\",\n    \"binance-smart-chain\": \"Bsc\",\n    \"neon-evm\": \"Neon\"\n};\nconst chainNameMapUnsupported = {\n    energi: 99949991,\n    \"hedera-hashgraph\": 99949992,\n    polkadot: 99949993,\n    stellar: 99949994,\n    tron: 99949995,\n    zksync: 99949996\n};\nconst MAX_CONTRACTS = 3;\nconst Summary = ({ isError, isLoading, summary, coingecko_id })=>{\n    const { environment } = (0, _environmentContext.useEnvironment)();\n    const currentNetwork = environment.network;\n    const isMainnet = currentNetwork === \"Mainnet\";\n    const tokenIcon = summary?.image?.large;\n    const { links } = summary || {};\n    const websiteLink = links?.homepage?.[0];\n    const twitterLink = links?.twitter_screen_name ? `https://x.com/${links?.twitter_screen_name}` : \"\";\n    const telegramLink = links?.telegram_channel_identifier ? `https://t.me/${links?.telegram_channel_identifier}` : \"\";\n    const discordLink = links?.chat_url?.[0];\n    const githubLink = links?.repos_url?.github?.[0];\n    const { data: dataTokenSummary, isFetching: isFetchingTokenPrice, isError: isErrorTokenSummary } = (0, _reactQuery.useQuery)([\n        \"nttTokenSummary\"\n    ], ()=>(0, _client.getClient)().nttApi.getNttSummary({\n            coingecko_id\n        }), {\n        enabled: isMainnet,\n        refetchInterval: 40000\n    });\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n        className: \"summary\",\n        children: [\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _atoms.NavLink), {\n                to: \"/analytics/ntt\",\n                className: \"summary-back\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.ArrowRightIcon), {}),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                        children: \"Back to tokens list\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"summary-top\",\n                children: isLoading ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Loader), {}) : /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                            className: \"summary-top-img\",\n                            children: tokenIcon && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"img\", {\n                                alt: `${summary?.symbol} Token Icon`,\n                                height: \"60\",\n                                loading: \"lazy\",\n                                src: tokenIcon,\n                                width: \"60\"\n                            })\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"summary-top-content\",\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h1\", {\n                                    className: \"summary-top-content-title\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                            className: \"summary-top-content-title-mobileImg\",\n                                            children: tokenIcon && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"img\", {\n                                                alt: `${summary?.symbol} Token Icon`,\n                                                height: \"30\",\n                                                loading: \"lazy\",\n                                                src: tokenIcon,\n                                                width: \"30\"\n                                            })\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            children: [\n                                                summary?.symbol,\n                                                \" Token\"\n                                            ]\n                                        })\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"summary-top-content-container\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"summary-top-content-container-item\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                    className: \"summary-top-content-container-item-up\",\n                                                    children: \"Contracts\"\n                                                }),\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(ContractsList, {\n                                                    summary: summary,\n                                                    environment: environment\n                                                })\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"summary-top-content-container-item\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                    className: \"summary-top-content-container-item-up\",\n                                                    children: \"Price\"\n                                                }),\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                    className: \"summary-top-content-container-item-down price\",\n                                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                        className: \"price-value\",\n                                                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(TokenPrice, {\n                                                            dataTokenSummary: dataTokenSummary,\n                                                            isErrorTokenSummary: isErrorTokenSummary,\n                                                            isFetchingTokenPrice: isFetchingTokenPrice\n                                                        })\n                                                    })\n                                                })\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"summary-top-content-container-item\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                    className: \"summary-top-content-container-item-up\",\n                                                    children: \"Website\"\n                                                }),\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                    className: \"summary-top-content-container-item-down\",\n                                                    children: isError ? \"N/A\" : /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"a\", {\n                                                        className: \"link\",\n                                                        href: websiteLink,\n                                                        rel: \"noreferrer\",\n                                                        target: \"_blank\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                                                children: websiteLink\n                                                            }),\n                                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.LinkIcon), {})\n                                                        ]\n                                                    })\n                                                })\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"summary-top-content-container-item\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                    className: \"summary-top-content-container-item-up\",\n                                                    children: \"Community\"\n                                                }),\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                    className: \"summary-top-content-container-item-down community\",\n                                                    children: isError ? \"N/A\" : /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                                                        children: [\n                                                            twitterLink && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"a\", {\n                                                                href: twitterLink,\n                                                                rel: \"noreferrer\",\n                                                                target: \"_blank\",\n                                                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.TwitterIcon), {})\n                                                            }),\n                                                            telegramLink && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"a\", {\n                                                                href: telegramLink,\n                                                                rel: \"noreferrer\",\n                                                                target: \"_blank\",\n                                                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.TelegramIcon), {})\n                                                            }),\n                                                            discordLink && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"a\", {\n                                                                href: discordLink,\n                                                                rel: \"noreferrer\",\n                                                                target: \"_blank\",\n                                                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.DiscordIcon), {})\n                                                            }),\n                                                            githubLink && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"a\", {\n                                                                href: githubLink,\n                                                                rel: \"noreferrer\",\n                                                                target: \"_blank\",\n                                                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.GithubIcon), {})\n                                                            })\n                                                        ]\n                                                    })\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                })\n                            ]\n                        })\n                    ]\n                })\n            })\n        ]\n    });\n};\nconst ContractsList = ({ summary, environment })=>{\n    const platforms = Object.entries(summary?.platforms || {}).filter(([chain])=>[\n            \"solana\",\n            \"ethereum\",\n            \"optimism\",\n            \"optimistic-ethereum\",\n            \"base\",\n            \"arbitrum-one\",\n            \"arbitrum\",\n            \"polygon-pos\",\n            \"binance-smart-chain\"\n        ].includes(chain));\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n        className: \"summary-top-content-container-item-chain\",\n        children: summary?.platforms ? /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n            className: \"summary-top-content-container-item-chain\",\n            children: [\n                platforms.map(([chain, contract], index)=>{\n                    // show MAX_CONTRACTS contracts\n                    if (index < MAX_CONTRACTS) {\n                        const chainCapitalized = chain.charAt(0).toUpperCase() + chain.slice(1);\n                        const chainId = (0, _sdk.chainToChainId)(chainNameMap[chain] || chainCapitalized);\n                        const chainIdUnsupported = chainNameMapUnsupported[chain];\n                        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(ChainItem, {\n                            chainId: chainIdUnsupported || chainId,\n                            network: environment.network,\n                            value: contract\n                        }, index);\n                    }\n                    // show the fourth contract directly if there are only 4 contracts in total without a tooltip\n                    if (index === MAX_CONTRACTS && platforms.length === MAX_CONTRACTS + 1) {\n                        const chainCapitalized = chain.charAt(0).toUpperCase() + chain.slice(1);\n                        const chainId = (0, _sdk.chainToChainId)(chainNameMap[chain] || chainCapitalized);\n                        const chainIdUnsupported = chainNameMapUnsupported[chain];\n                        return /*#__PURE__*/ (0, _jsxRuntime.jsx)(ChainItem, {\n                            chainId: chainIdUnsupported || chainId,\n                            network: environment.network,\n                            value: contract\n                        }, index);\n                    }\n                    return null;\n                }),\n                platforms.length > MAX_CONTRACTS + 1 && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Tooltip), {\n                    type: \"info\",\n                    className: \"summary-top-content-container-item-chain-tooltip\",\n                    side: \"bottom\",\n                    tooltip: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"summary-top-content-container-item-chain-tooltip-container\",\n                        children: platforms.slice(MAX_CONTRACTS).map(([chain, contract], i)=>{\n                            const chainCapitalized = chain.charAt(0).toUpperCase() + chain.slice(1);\n                            const chainId = (0, _sdk.chainToChainId)(chainNameMap[chain] || chainCapitalized);\n                            const chainIdUnsupported = chainNameMapUnsupported[chain];\n                            return /*#__PURE__*/ (0, _jsxRuntime.jsx)(ChainItem, {\n                                chainId: chainIdUnsupported || chainId,\n                                network: environment.network,\n                                value: contract\n                            }, i);\n                        })\n                    }),\n                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"summary-top-content-container-item-chain-contract\",\n                        children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"summary-top-content-container-item-chain-contract-more\",\n                            children: [\n                                \"+\",\n                                platforms.length - MAX_CONTRACTS,\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.InfoCircleIcon), {})\n                            ]\n                        })\n                    })\n                })\n            ]\n        }) : \"N/A\"\n    });\n};\nconst ChainItem = ({ chainId, network, value })=>{\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"a\", {\n        href: (0, _wormhole.getExplorerLink)({\n            chainId,\n            network,\n            value,\n            base: \"token\"\n        }),\n        className: \"summary-top-content-container-item-chain-contract\",\n        rel: \"noreferrer\",\n        target: \"_blank\",\n        children: [\n            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                chainId: chainId,\n                network: network\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.LinkIcon), {})\n        ]\n    });\n};\nconst TokenPrice = ({ dataTokenSummary, isErrorTokenSummary, isFetchingTokenPrice })=>{\n    if (isFetchingTokenPrice && !isErrorTokenSummary && !dataTokenSummary?.price) return \"...\";\n    if (isErrorTokenSummary) return \"N/A\";\n    return dataTokenSummary?.price ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _reactFlipNumbersDefault.default), {\n        height: 15,\n        width: 11,\n        color: \"white\",\n        background: \"var(--color-gray-900)\",\n        play: true,\n        perspective: 100,\n        numbers: `$${(0, _number.formatNumber)(+Number(dataTokenSummary?.price).toFixed(4))}`,\n        numberStyle: {\n            fontFamily: \"Roboto\",\n            fontSize: \"14px\",\n            fontWeight: 400,\n            letterSpacing: \"0.02em\",\n            lineHeight: \"20px\"\n        },\n        nonNumberStyle: {\n            fontFamily: \"Roboto\",\n            fontSize: \"14px\",\n            fontWeight: 400,\n            letterSpacing: \"0.02em\",\n            lineHeight: \"20px\"\n        }\n    }) : \"N/A\";\n};\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react-query\":\"dbjqN\",\"react-flip-numbers\":\"in6Td\",\"@wormhole-foundation/sdk\":\"cHYNT\",\"src/context/EnvironmentContext\":\"jjAhi\",\"src/icons/generic\":\"23xak\",\"src/components/atoms\":\"jMZmV\",\"src/utils/number\":\"c38zr\",\"src/utils/wormhole\":\"6bzfn\",\"src/api/Client\":\"bTumr\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"j44MD\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"ByChain\", ()=>ByChain);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _generic = require(\"src/icons/generic\");\nvar _sdk = require(\"@wormhole-foundation/sdk\");\nvar _atoms = require(\"src/components/atoms\");\nvar _environmentContext = require(\"src/context/EnvironmentContext\");\nvar _number = require(\"src/utils/number\");\nconst LOADING_ARRAY = Array(10).fill(1);\nconst ByChain = ({ activityNotional, activityTx, isErrorActivityNotional, isErrorActivityTx, isLoadingActivityNotional, isLoadingActivityTx })=>{\n    const { environment } = (0, _environmentContext.useEnvironment)();\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n        className: \"bychain\",\n        children: [\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"bychain-half\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"bychain-half-title\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.GlobeIcon), {}),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                children: [\n                                    \"Transfers by Chain \",\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                        children: \"(All Time)\"\n                                    })\n                                ]\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"bychain-half-table\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"bychain-half-table-head\",\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"bychain-half-table-head-row\",\n                                        children: \"SOURCE CHAIN\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"bychain-half-table-head-row\",\n                                        children: \"TARGET CHAIN\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                        className: \"bychain-half-table-head-row\",\n                                        children: [\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                                className: \"mobile\",\n                                                children: \"TXN COUNT\"\n                                            }),\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                                className: \"desktop\",\n                                                children: \"TRANSFER COUNT\"\n                                            })\n                                        ]\n                                    })\n                                ]\n                            }),\n                            isErrorActivityTx ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"bychain-half-table-error\",\n                                children: \"Failed to get top transfers\"\n                            }) : isLoadingActivityTx ? LOADING_ARRAY.map((item, idx)=>/*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                    className: \"bychain-half-table-item\",\n                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"loading\"\n                                    })\n                                }, `itemTx-${idx}`)) : activityTx?.length > 0 ? activityTx?.map((item, idx)=>idx < 10 ? /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"bychain-half-table-item\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"bychain-half-table-item-row\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                                                    network: environment.network,\n                                                    chainId: item.emitterChain\n                                                }),\n                                                (0, _sdk.chainIdToChain)(item.emitterChain),\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                    className: \"arrow\",\n                                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.ArrowRightIcon), {})\n                                                })\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"bychain-half-table-item-row\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                                                    network: environment.network,\n                                                    chainId: item.destinationChain\n                                                }),\n                                                (0, _sdk.chainIdToChain)(item.destinationChain)\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                            className: \"bychain-half-table-item-row\",\n                                            children: (0, _number.formatNumber)(+item.value, 0)\n                                        })\n                                    ]\n                                }, `itemTx-${idx}`) : null) : /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"top-addresses-half-table-error\",\n                                children: \"Transfers not found\"\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"bychain-half\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"bychain-half-title\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.GlobeIcon), {}),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                children: [\n                                    \"Volume by Chain \",\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                        children: \"(All Time)\"\n                                    })\n                                ]\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"bychain-half-table\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"bychain-half-table-head\",\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"bychain-half-table-head-row\",\n                                        children: \"SOURCE CHAIN\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"bychain-half-table-head-row\",\n                                        children: \"TARGET CHAIN\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"bychain-half-table-head-row\",\n                                        children: \"TOTAL VOLUME\"\n                                    })\n                                ]\n                            }),\n                            isErrorActivityNotional ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"bychain-half-table-error\",\n                                children: \"Failed to get top transfers\"\n                            }) : isLoadingActivityNotional ? LOADING_ARRAY.map((item, idx)=>/*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                    className: \"bychain-half-table-item\",\n                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"loading\"\n                                    })\n                                }, `itemNot-${idx}`)) : activityNotional?.length > 0 ? activityNotional?.map((item, idx)=>idx < 10 ? /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"bychain-half-table-item\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"bychain-half-table-item-row\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                                                    network: environment.network,\n                                                    chainId: item.emitterChain\n                                                }),\n                                                (0, _sdk.chainIdToChain)(item.emitterChain),\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                    className: \"arrow\",\n                                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.ArrowRightIcon), {})\n                                                })\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"bychain-half-table-item-row\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                                                    network: environment.network,\n                                                    chainId: item.destinationChain\n                                                }),\n                                                (0, _sdk.chainIdToChain)(item.destinationChain)\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"bychain-half-table-item-row\",\n                                            children: [\n                                                \"$\",\n                                                (0, _number.formatNumber)(+item.value)\n                                            ]\n                                        })\n                                    ]\n                                }, `itemNot-${idx}`) : null) : /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"top-addresses-half-table-error\",\n                                children: \"Transfers not found\"\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n};\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"src/icons/generic\":\"23xak\",\"@wormhole-foundation/sdk\":\"cHYNT\",\"src/components/atoms\":\"jMZmV\",\"src/context/EnvironmentContext\":\"jjAhi\",\"src/utils/number\":\"c38zr\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"lz4HK\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"TopHolders\", ()=>TopHolders);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _generic = require(\"src/icons/generic\");\nvar _number = require(\"src/utils/number\");\nvar _string = require(\"src/utils/string\");\nvar _molecules = require(\"src/components/molecules\");\nvar _atoms = require(\"src/components/atoms\");\nvar _environmentContext = require(\"src/context/EnvironmentContext\");\nvar _sdk = require(\"@wormhole-foundation/sdk\");\nvar _wormhole = require(\"src/utils/wormhole\");\nvar _hooks = require(\"src/utils/hooks\");\nconst LOADING_ARRAY = Array(10).fill(1);\nconst TopHolders = ({ isError, isLoading, topHolders })=>{\n    const { environment } = (0, _environmentContext.useEnvironment)();\n    const { width } = (0, _hooks.useWindowSize)();\n    const isDesktopDesign = width >= 1280;\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n        className: \"top-holders\",\n        children: [\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"top-holders-title\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.UserIcon), {}),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        children: [\n                            \"Top Holders by Volume \",\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                children: \"(All Time)\"\n                            })\n                        ]\n                    })\n                ]\n            }),\n            isDesktopDesign && /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"top-holders-table\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"top-holders-table-head\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"top-holders-table-head-row\",\n                                children: \"RANK\"\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"top-holders-table-head-row\",\n                                children: \"USER\"\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"top-holders-table-head-row\",\n                                children: \"CHAIN\"\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"top-holders-table-head-row\",\n                                children: \"AMOUNT\"\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"top-holders-table-head-row\"\n                            })\n                        ]\n                    }),\n                    isError ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"top-holders-table-error\",\n                        children: \"Failed to get top holders\"\n                    }) : isLoading ? LOADING_ARRAY.map((_, idx)=>/*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                            className: \"top-holders-table-item\",\n                            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"loading\"\n                            })\n                        }, `loading-${idx}`)) : topHolders?.length > 0 ? topHolders.map((item, idx)=>/*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"top-holders-table-item\",\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                    className: \"top-holders-table-item-row\",\n                                    children: idx + 1\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"top-holders-table-item-row\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _string.TruncateText), {\n                                            containerWidth: 150,\n                                            text: item.address.toUpperCase()\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.CopyToClipboard), {\n                                            toCopy: item.address,\n                                            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.CopyIcon), {\n                                                style: {\n                                                    color: \"grey\"\n                                                }\n                                            })\n                                        })\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"top-holders-table-item-row\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                                            chainId: item.chain,\n                                            network: environment.network\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                            children: (0, _sdk.chainIdToChain)(item.chain)\n                                        })\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"top-holders-table-item-row\",\n                                    children: [\n                                        \"$\",\n                                        (0, _number.formatNumber)(+item.volume, 0)\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"a\", {\n                                    className: \"top-holders-table-item-row\",\n                                    href: (0, _wormhole.getExplorerLink)({\n                                        network: environment.network,\n                                        chainId: item.chain,\n                                        value: item.address,\n                                        base: \"address\",\n                                        isNativeAddress: true\n                                    }),\n                                    target: \"_blank\",\n                                    rel: \"noopener noreferrer\",\n                                    children: [\n                                        \"View on Explorer \",\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.LinkIcon), {})\n                                    ]\n                                })\n                            ]\n                        }, `item-${idx}`)) : /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"top-addresses-half-table-error\",\n                        children: \"Holders not found\"\n                    })\n                ]\n            }),\n            !isDesktopDesign && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"top-holders-mobile\",\n                children: isError ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                    className: \"top-holders-table-error\",\n                    children: \"Failed to get top holders\"\n                }) : isLoading ? LOADING_ARRAY.map((_, idx)=>/*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"top-holders-table-item\",\n                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                            className: \"loading\"\n                        })\n                    }, `loading-${idx}`)) : topHolders?.length > 0 ? topHolders.map((item, idx)=>/*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"top-holders-mobile-container\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"top-holders-mobile-container-item\",\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"title\",\n                                        children: \"USER\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                        className: \"content user\",\n                                        children: [\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _string.TruncateText), {\n                                                containerWidth: 150,\n                                                text: item.address.toUpperCase()\n                                            }),\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.CopyToClipboard), {\n                                                toCopy: item.address,\n                                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.CopyIcon), {\n                                                    style: {\n                                                        color: \"grey\"\n                                                    }\n                                                })\n                                            })\n                                        ]\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"top-holders-mobile-container-item\",\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"title\",\n                                        children: \"AMOUNT\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                        className: \"content number\",\n                                        children: [\n                                            \"$\",\n                                            (0, _number.formatNumber)(+item.volume, 0)\n                                        ]\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"top-holders-mobile-container-item\",\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"title\",\n                                        children: \"CHAIN\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                        className: \"content chain\",\n                                        children: [\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                                                chainId: item.chain,\n                                                network: environment.network\n                                            }),\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                                children: (0, _sdk.chainIdToChain)(item.chain)\n                                            })\n                                        ]\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"top-holders-mobile-container-item\",\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"title\",\n                                        children: \"HYPERLINK\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"a\", {\n                                        className: \"content url\",\n                                        href: (0, _wormhole.getExplorerLink)({\n                                            network: environment.network,\n                                            chainId: item.chain,\n                                            value: item.address,\n                                            base: \"address\",\n                                            isNativeAddress: true\n                                        }),\n                                        target: \"_blank\",\n                                        rel: \"noopener noreferrer\",\n                                        children: [\n                                            \"View on Explorer \",\n                                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.LinkIcon), {})\n                                        ]\n                                    })\n                                ]\n                            })\n                        ]\n                    }, `item-${idx}`)) : /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                    className: \"top-addresses-half-table-error\",\n                    children: \"Holders not found\"\n                })\n            })\n        ]\n    });\n};\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"src/icons/generic\":\"23xak\",\"src/utils/number\":\"c38zr\",\"src/utils/string\":\"Fh8D2\",\"src/components/molecules\":\"f5gIB\",\"src/components/atoms\":\"jMZmV\",\"src/context/EnvironmentContext\":\"jjAhi\",\"@wormhole-foundation/sdk\":\"cHYNT\",\"src/utils/wormhole\":\"6bzfn\",\"src/utils/hooks\":\"2VXdL\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"lQblX\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"TopAddresses\", ()=>TopAddresses);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _generic = require(\"src/icons/generic\");\nvar _number = require(\"src/utils/number\");\nvar _string = require(\"src/utils/string\");\nvar _molecules = require(\"src/components/molecules\");\nconst LOADING_ARRAY = Array(10).fill(1);\nconst TopAddresses = ({ isErrorTopAddressesNotional, isErrorTopAddressesTx, isLoadingTopAddressesNotional, isLoadingTopAddressesTx, topAddressesNotional, topAddressesTx })=>{\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n        className: \"top-addresses\",\n        children: [\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"top-addresses-half\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"top-addresses-half-title\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.UserIcon), {}),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                children: [\n                                    \"Top Addresses by Transactions \",\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                        children: \"(All Time)\"\n                                    })\n                                ]\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"top-addresses-half-table\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"top-addresses-half-table-head\",\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"top-addresses-half-table-head-row\",\n                                        children: \"RANK\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"top-addresses-half-table-head-row\",\n                                        children: \"USER\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"top-addresses-half-table-head-row\",\n                                        children: \"TRANSFERS\"\n                                    })\n                                ]\n                            }),\n                            isErrorTopAddressesTx ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"top-addresses-half-table-error\",\n                                children: \"Failed to get top addresses\"\n                            }) : isLoadingTopAddressesTx ? LOADING_ARRAY.map((item, idx)=>/*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                    className: \"top-addresses-half-table-item\",\n                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"loading\"\n                                    })\n                                }, `itemTx-${idx}`)) : topAddressesTx?.length > 0 ? topAddressesTx?.map((item, idx)=>idx < 10 ? /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"top-addresses-half-table-item\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                            className: \"top-addresses-half-table-item-row\",\n                                            children: idx + 1\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"top-addresses-half-table-item-row\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _string.TruncateText), {\n                                                    containerWidth: 250,\n                                                    text: item.fromAddress.toUpperCase()\n                                                }),\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.CopyToClipboard), {\n                                                    toCopy: item.fromAddress,\n                                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.CopyIcon), {\n                                                        style: {\n                                                            color: \"grey\"\n                                                        }\n                                                    })\n                                                })\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                            className: \"top-addresses-half-table-item-row\",\n                                            children: (0, _number.formatNumber)(+item.value, 0)\n                                        })\n                                    ]\n                                }, `itemTx-${idx}`) : null) : /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"top-addresses-half-table-error\",\n                                children: \"Addresses not found\"\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"top-addresses-half\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"top-addresses-half-title\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.UserIcon), {}),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                children: [\n                                    \"Top Addresses by Volume \",\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                        children: \"(All Time)\"\n                                    })\n                                ]\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"top-addresses-half-table\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                className: \"top-addresses-half-table-head\",\n                                children: [\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"top-addresses-half-table-head-row\",\n                                        children: \"RANK\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"top-addresses-half-table-head-row\",\n                                        children: \"USER\"\n                                    }),\n                                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"top-addresses-half-table-head-row\",\n                                        children: \"VOLUME\"\n                                    })\n                                ]\n                            }),\n                            isErrorTopAddressesNotional ? /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"top-addresses-half-table-error\",\n                                children: \"Failed to get top addresses\"\n                            }) : isLoadingTopAddressesNotional ? LOADING_ARRAY.map((item, idx)=>/*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                    className: \"top-addresses-half-table-item\",\n                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                        className: \"loading\"\n                                    })\n                                }, `itemNot-${idx}`)) : topAddressesNotional?.length > 0 ? topAddressesNotional?.map((item, idx)=>idx < 10 ? /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"top-addresses-half-table-item\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                            className: \"top-addresses-half-table-item-row\",\n                                            children: idx + 1\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"top-addresses-half-table-item-row\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _string.TruncateText), {\n                                                    containerWidth: 250,\n                                                    text: item.fromAddress.toUpperCase()\n                                                }),\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.CopyToClipboard), {\n                                                    toCopy: item.fromAddress,\n                                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.CopyIcon), {\n                                                        style: {\n                                                            color: \"grey\"\n                                                        }\n                                                    })\n                                                })\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"top-addresses-half-table-item-row\",\n                                            children: [\n                                                \"$\",\n                                                (0, _number.formatNumber)(+item.value, 0)\n                                            ]\n                                        })\n                                    ]\n                                }, `itemNot-${idx}`) : null) : /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                className: \"top-addresses-half-table-error\",\n                                children: \"Addresses not found\"\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n};\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"src/icons/generic\":\"23xak\",\"src/utils/number\":\"c38zr\",\"src/utils/string\":\"Fh8D2\",\"src/components/molecules\":\"f5gIB\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"91C84\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"Metrics\", ()=>Metrics);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _atoms = require(\"src/components/atoms\");\nvar _generic = require(\"src/icons/generic\");\nvar _number = require(\"src/utils/number\");\nconst Metrics = ({ isError, isLoading, summary })=>{\n    const renderValue = (value)=>value ? (0, _number.formatNumber)(+value) : \" -\";\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n        className: \"summary-metrics\",\n        children: [\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"summary-metrics-title\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.AnalyticsIcon), {}),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h2\", {\n                        className: \"summary-metrics-title-text\",\n                        children: \"Summary Metrics\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"summary-metrics-container\",\n                children: isLoading ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Loader), {}) : /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"summary-metrics-container-item\",\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"summary-metrics-container-item-label\",\n                                    children: [\n                                        \"Total value transferred\",\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(MetricsTooltip, {\n                                            text: \"Total USD value of all transfers made using this token.\"\n                                        })\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h3\", {\n                                    className: \"summary-metrics-container-item-value\",\n                                    children: [\n                                        \"$\",\n                                        isError ? \" -\" : renderValue(summary?.totalValueTokenTransferred)\n                                    ]\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"summary-metrics-container-item\",\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"summary-metrics-container-item-label\",\n                                    children: [\n                                        \"Fully diluted valuation\",\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(MetricsTooltip, {\n                                            text: \"Current price x Total Supply. Theoretical market value if the entire supply was circulating.\"\n                                        })\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h3\", {\n                                    className: \"summary-metrics-container-item-value\",\n                                    children: isError ? \" -\" : renderValue(summary?.fullyDilutedValuation)\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"summary-metrics-container-item\",\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"summary-metrics-container-item-label\",\n                                    children: [\n                                        \"Market Cap\",\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(MetricsTooltip, {\n                                            text: \"Current price x Circulating Supply. The current value of circulating tokens in USD.\"\n                                        })\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h3\", {\n                                    className: \"summary-metrics-container-item-value\",\n                                    children: [\n                                        \"$\",\n                                        isError ? \" -\" : renderValue(summary?.marketCap)\n                                    ]\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"summary-metrics-container-item\",\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"summary-metrics-container-item-label\",\n                                    children: [\n                                        \"Circulating Supply\",\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(MetricsTooltip, {\n                                            text: \"The number of tokens currently circulating in the market and available to the public.\"\n                                        })\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h3\", {\n                                    className: \"summary-metrics-container-item-value\",\n                                    children: isError ? \" -\" : renderValue(summary?.circulatingSupply)\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"summary-metrics-container-item\",\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"summary-metrics-container-item-label\",\n                                    children: [\n                                        \"Total token transfers\",\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(MetricsTooltip, {\n                                            text: \"Total number of transactions involving this token.\"\n                                        })\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h3\", {\n                                    className: \"summary-metrics-container-item-value\",\n                                    children: isError ? \" -\" : renderValue(summary?.totalTokenTransferred)\n                                })\n                            ]\n                        })\n                    ]\n                })\n            })\n        ]\n    });\n};\nconst MetricsTooltip = ({ text })=>/*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Tooltip), {\n        tooltip: text,\n        type: \"info\",\n        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n            className: \"summary-metrics-container-item-label-icon\",\n            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.InfoCircleIcon), {})\n        })\n    });\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"src/components/atoms\":\"jMZmV\",\"src/icons/generic\":\"23xak\",\"src/utils/number\":\"c38zr\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"9HjKO\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"TransfersOverTime\", ()=>TransfersOverTime);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _reactApexcharts = require(\"react-apexcharts\");\nvar _reactApexchartsDefault = parcelHelpers.interopDefault(_reactApexcharts);\nvar _react = require(\"react\");\nvar _atoms = require(\"src/components/atoms\");\nvar _molecules = require(\"src/components/molecules\");\nvar _consts = require(\"src/consts\");\nvar _generic = require(\"src/icons/generic\");\nvar _hooks = require(\"src/utils/hooks\");\nvar _number = require(\"src/utils/number\");\nvar _date = require(\"src/utils/date\");\nvar _apexChartUtils = require(\"src/utils/apexChartUtils\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nvar _reactRouterDom = require(\"react-router-dom\");\nconst TYPE_CHART_LIST = [\n    {\n        label: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.ActivityIcon), {\n            width: 24\n        }),\n        value: \"area\",\n        ariaLabel: \"Area\"\n    },\n    {\n        label: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.AnalyticsIcon), {\n            width: 24\n        }),\n        value: \"bar\",\n        ariaLabel: \"Bar\"\n    }\n];\nconst SCALE_CHART_LIST = [\n    {\n        label: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.LogarithmicIcon), {\n            width: 22\n        }),\n        value: \"logarithmic\",\n        ariaLabel: \"Logarithmic\"\n    },\n    {\n        label: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.LinearIcon), {\n            width: 22\n        }),\n        value: \"linear\",\n        ariaLabel: \"Linear\"\n    }\n];\nconst RANGE_LIST = [\n    {\n        label: \"Last 24 hours\",\n        value: \"1d\"\n    },\n    {\n        label: \"Last week\",\n        value: \"1w\"\n    },\n    {\n        label: \"Last month\",\n        value: \"1m\"\n    },\n    {\n        label: \"Last year\",\n        value: \"1y\"\n    }\n];\nconst BY_TYPE_LIST = [\n    {\n        label: \"Transfers\",\n        value: \"tx\"\n    },\n    {\n        label: \"Volume\",\n        value: \"notional\"\n    }\n];\nconst TransfersOverTime = ({ transfers, isLoading, isError, setTimeRange, timeRange, timeSpan, by, setBy, currentNetwork })=>{\n    const { width } = (0, _hooks.useWindowSize)();\n    const isTablet = width >= (0, _consts.BREAKPOINTS).tablet;\n    const isDesktop = width >= (0, _consts.BREAKPOINTS).desktop;\n    const { symbol } = (0, _reactRouterDom.useParams)();\n    const [scaleSelected, setScaleSelectedState] = (0, _react.useState)(\"linear\");\n    const setScaleSelected = (value, track)=>{\n        setScaleSelectedState(value);\n        if (track) (0, _analyticsDefault.default).track(\"scaleSelected\", {\n            selected: value,\n            selectedType: \"transfersOverTime\"\n        });\n    };\n    const [chartSelected, setChartSelected] = (0, _react.useState)(\"bar\");\n    const chartRef = (0, _react.useRef)(null);\n    (0, _react.useEffect)(()=>{\n        if (by === \"tx\") setScaleSelected(\"linear\", false);\n    }, [\n        by\n    ]);\n    const series = (0, _react.useMemo)(()=>{\n        if (!transfers || transfers.length === 0) return [];\n        return [\n            {\n                name: `${symbol} Token Transfers`,\n                color: \"var(--color-lime)\",\n                totalValue: transfers.reduce((acc, item)=>acc + +item.value, 0),\n                data: transfers.map((item)=>({\n                        x: item.time,\n                        to: (0, _date.getNextDate)(item.time, timeSpan),\n                        y: +item.value\n                    }))\n            }\n        ];\n    }, [\n        symbol,\n        timeSpan,\n        transfers\n    ]);\n    const formatDate = (date)=>{\n        if (timeSpan === \"1h\") return date.toLocaleString(\"en-GB\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\"\n        });\n        if (timeSpan === \"1d\") return date.toLocaleString(\"en-GB\", {\n            day: \"2-digit\",\n            month: \"short\"\n        }).toUpperCase();\n        if (timeSpan === \"1mo\") return date.toLocaleString(\"en-GB\", {\n            month: \"short\",\n            year: \"2-digit\"\n        }).toUpperCase();\n        // Default format for other cases\n        return date.toLocaleString(\"en-GB\", {\n            day: \"2-digit\",\n            month: \"short\",\n            year: \"2-digit\"\n        });\n    };\n    const fullscreenBtnRef = (0, _react.useRef)(null);\n    const timeRangeData = series?.[0]?.data || [];\n    const fromDateFormatted = (0, _date.toLocaleDate)(timeRangeData[0]?.x);\n    const toDateFormatted = (0, _date.toLocaleDate)(timeRangeData[timeRangeData.length - 1]?.to);\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _atoms.Fullscreenable), {\n        className: \"transfers-over-time\",\n        buttonRef: fullscreenBtnRef,\n        itemName: \"transfersOverTime\",\n        children: [\n            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"transfers-over-time-header\",\n                children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"h3\", {\n                    className: \"transfers-over-time-title\",\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.ActivityIcon), {}),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"span\", {\n                            children: [\n                                \"Cross-Chain \",\n                                symbol,\n                                \" Token Transfers Over Time\"\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                            className: \"transfers-over-time-title-fullscreen\",\n                            ref: fullscreenBtnRef,\n                            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.FullscreenIcon), {\n                                width: 20\n                            })\n                        })\n                    ]\n                })\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"transfers-over-time-container\",\n                children: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                    className: \"transfers-over-time-container-chart\",\n                    ref: chartRef,\n                    children: [\n                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                            className: \"transfers-over-time-filters\",\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                    className: \"transfers-over-time-select-range\",\n                                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Select), {\n                                        name: \"timeRange\",\n                                        value: timeRange,\n                                        onValueChange: (value)=>{\n                                            setTimeRange(value);\n                                            (0, _analyticsDefault.default).track(\"transfersOverTimeTimeRange\", {\n                                                network: currentNetwork,\n                                                selected: value.label\n                                            });\n                                        },\n                                        items: RANGE_LIST,\n                                        ariaLabel: \"Select Time Range\"\n                                    })\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                    ariaLabel: \"Select data type\",\n                                    items: BY_TYPE_LIST,\n                                    onValueChange: (value)=>{\n                                        setBy(value);\n                                        (0, _analyticsDefault.default).track(\"metricSelected\", {\n                                            network: currentNetwork,\n                                            selected: value,\n                                            selectedType: \"transfersOverTime\"\n                                        });\n                                    },\n                                    value: by\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"transfers-over-time-toggles\",\n                                    children: [\n                                        chartSelected === \"area\" && by === \"notional\" && /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                            ariaLabel: \"Select scale\",\n                                            items: SCALE_CHART_LIST,\n                                            onValueChange: (value)=>setScaleSelected(value, true),\n                                            type: \"secondary\",\n                                            value: scaleSelected\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.ToggleGroup), {\n                                            ariaLabel: \"Select chart type\",\n                                            items: TYPE_CHART_LIST,\n                                            onValueChange: (value)=>{\n                                                setChartSelected(value);\n                                                (0, _analyticsDefault.default).track(\"transfersOverTimeChartType\", {\n                                                    network: currentNetwork,\n                                                    selected: value\n                                                });\n                                            },\n                                            type: \"secondary\",\n                                            value: chartSelected\n                                        })\n                                    ]\n                                })\n                            ]\n                        }),\n                        isError ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.ErrorPlaceholder), {}) : isLoading ? /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Loader), {}) : /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                            children: [\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.WormholeScanBrand), {}),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                    className: \"transfers-over-time-filters-legends\",\n                                    children: [\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                                            className: \"transfers-over-time-filters-legends-total\",\n                                            children: [\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"span\", {\n                                                    children: [\n                                                        timeRange.value === \"1d\" ? \"Daily\" : timeRange.value === \"1w\" ? \"Weekly\" : timeRange.value === \"1m\" ? \"Monthly\" : timeRange.value === \"1y\" ? \"Yearly\" : timeRange.value === \"custom\" ? \"\" : \"All Time\",\n                                                        \" \",\n                                                        \"Total \",\n                                                        by === \"tx\" ? \"Transfers\" : \"Volume\",\n                                                        \":\"\n                                                    ]\n                                                }),\n                                                /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"p\", {\n                                                    children: [\n                                                        by === \"tx\" ? \"\" : \"$\",\n                                                        series?.[0]?.totalValue ? (0, _number.formatNumber)(series[0].totalValue, 0) : 0\n                                                    ]\n                                                })\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                                            className: \"transfers-over-time-filters-legends-total\",\n                                            children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                                children: fromDateFormatted && toDateFormatted && /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                                                    children: [\n                                                        fromDateFormatted,\n                                                        /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.ArrowRightIcon), {}),\n                                                        toDateFormatted\n                                                    ]\n                                                })\n                                            })\n                                        })\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _reactApexchartsDefault.default), {\n                                    series: series,\n                                    type: chartSelected,\n                                    height: isDesktop ? 360 : 300,\n                                    options: {\n                                        chart: {\n                                            animations: {\n                                                enabled: true\n                                            },\n                                            events: chartSelected === \"bar\" ? {\n                                                mouseLeave: ()=>{\n                                                    (0, _apexChartUtils.changePathOpacity)({\n                                                        ref: chartRef,\n                                                        opacity: 1\n                                                    });\n                                                },\n                                                mouseMove (e, chart, options) {\n                                                    if (options.dataPointIndex < 0) (0, _apexChartUtils.changePathOpacity)({\n                                                        ref: chartRef,\n                                                        opacity: 1\n                                                    });\n                                                }\n                                            } : {},\n                                            toolbar: {\n                                                show: false\n                                            },\n                                            zoom: {\n                                                enabled: false\n                                            },\n                                            stacked: chartSelected === \"bar\"\n                                        },\n                                        dataLabels: {\n                                            enabled: false\n                                        },\n                                        grid: {\n                                            borderColor: \"var(--color-gray-900)\",\n                                            strokeDashArray: 6,\n                                            xaxis: {\n                                                lines: {\n                                                    show: false\n                                                }\n                                            },\n                                            yaxis: {\n                                                lines: {\n                                                    show: true\n                                                }\n                                            },\n                                            padding: {\n                                                top: isDesktop ? 16 : 0\n                                            }\n                                        },\n                                        states: {\n                                            hover: {\n                                                filter: {\n                                                    type: \"none\"\n                                                }\n                                            },\n                                            active: {\n                                                filter: {\n                                                    type: \"none\"\n                                                }\n                                            }\n                                        },\n                                        stroke: {\n                                            curve: \"smooth\",\n                                            width: chartSelected === \"area\" ? 2 : 0,\n                                            dashArray: 0\n                                        },\n                                        fill: {\n                                            type: chartSelected === \"area\" ? \"gradient\" : \"solid\",\n                                            gradient: {\n                                                type: \"vertical\",\n                                                shadeIntensity: 0,\n                                                opacityFrom: 0.4,\n                                                opacityTo: 0,\n                                                stops: [\n                                                    0,\n                                                    100\n                                                ]\n                                            }\n                                        },\n                                        xaxis: {\n                                            axisBorder: {\n                                                show: true,\n                                                strokeWidth: 4,\n                                                color: \"var(--color-gray-10)\"\n                                            },\n                                            axisTicks: {\n                                                show: false\n                                            },\n                                            crosshairs: {\n                                                position: \"front\"\n                                            },\n                                            tickAmount: isDesktop ? 6 : isTablet ? 4 : 3,\n                                            labels: {\n                                                rotate: 0,\n                                                formatter: (value)=>{\n                                                    const date = new Date(value);\n                                                    return formatDate(date);\n                                                },\n                                                hideOverlappingLabels: true,\n                                                style: {\n                                                    colors: \"var(--color-gray-400)\",\n                                                    fontFamily: \"Roboto Mono, Roboto, sans-serif\",\n                                                    fontSize: \"12px\",\n                                                    fontWeight: 400\n                                                }\n                                            },\n                                            tooltip: {\n                                                enabled: false\n                                            },\n                                            offsetX: 0\n                                        },\n                                        yaxis: {\n                                            labels: {\n                                                offsetX: -8,\n                                                formatter: (0, _apexChartUtils.formatterYAxis),\n                                                style: {\n                                                    colors: \"var(--color-gray-400)\",\n                                                    fontFamily: \"Roboto Mono, Roboto, sans-serif\",\n                                                    fontSize: \"12px\",\n                                                    fontWeight: 400\n                                                }\n                                            },\n                                            opposite: true,\n                                            logarithmic: scaleSelected === \"logarithmic\" && chartSelected === \"area\",\n                                            forceNiceScale: scaleSelected === \"logarithmic\" && chartSelected === \"area\"\n                                        },\n                                        tooltip: {\n                                            custom: ({ seriesIndex, dataPointIndex, w })=>{\n                                                const data = w.config.series[seriesIndex].data[dataPointIndex];\n                                                if (chartSelected === \"bar\") (0, _apexChartUtils.updatePathStyles)({\n                                                    chartRef,\n                                                    dataPointIndex\n                                                });\n                                                return `\n                        <div class=\"transfers-over-time-container-chart-tooltip\">\n                          <div class=\"transfers-over-time-container-chart-tooltip-date\">\n                            <p>\n                              From:\n                              ${new Date(data.x).toLocaleString(\"en-GB\", {\n                                                    hour: \"2-digit\",\n                                                    minute: \"2-digit\"\n                                                })},\n                              ${new Date(data.x).toLocaleString(\"en-GB\", {\n                                                    day: \"2-digit\",\n                                                    month: \"long\",\n                                                    year: \"numeric\"\n                                                })}\n                            </p>\n                            <p>\n                              To:\n                              ${new Date(data.to).toLocaleString(\"en-GB\", {\n                                                    hour: \"2-digit\",\n                                                    minute: \"2-digit\"\n                                                })},\n                              ${new Date(data.to).toLocaleString(\"en-GB\", {\n                                                    day: \"2-digit\",\n                                                    month: \"long\",\n                                                    year: \"numeric\"\n                                                })}\n                            </p>\n                          </div>\n                          <div class=\"transfers-over-time-container-chart-tooltip-amount\">\n                            ${by === \"notional\" ? `Volume: <span>$${(0, _number.formatNumber)(data.y, data.y > 10000 ? 0 : 2)}</span>` : `Transfers: <span>${(0, _number.formatNumber)(data.y)}</span>`}\n                          </div>\n                        </div>\n                      `;\n                                            },\n                                            intersect: false,\n                                            shared: true\n                                        }\n                                    }\n                                }, chartSelected)\n                            ]\n                        })\n                    ]\n                })\n            })\n        ]\n    });\n};\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"react-apexcharts\":\"lEV8Y\",\"react\":\"9njXz\",\"src/components/atoms\":\"jMZmV\",\"src/components/molecules\":\"f5gIB\",\"src/consts\":\"2l9qr\",\"src/icons/generic\":\"23xak\",\"src/utils/hooks\":\"2VXdL\",\"src/utils/number\":\"c38zr\",\"src/utils/date\":\"9wAFB\",\"src/utils/apexChartUtils\":\"dX5fx\",\"src/analytics\":\"cr0zc\",\"react-router-dom\":\"cgBkD\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"bdoHe\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"RecentTransactions\", ()=>RecentTransactions);\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _sdk = require(\"@wormhole-foundation/sdk\");\nvar _generic = require(\"src/icons/generic\");\nvar _environmentContext = require(\"src/context/EnvironmentContext\");\nvar _hooks = require(\"src/utils/hooks\");\nvar _atoms = require(\"src/components/atoms\");\nvar _molecules = require(\"src/components/molecules\");\nvar _organisms = require(\"src/components/organisms\");\nvar _date = require(\"src/utils/date\");\nvar _number = require(\"src/utils/number\");\nvar _wormhole = require(\"src/utils/wormhole\");\nvar _crypto = require(\"src/utils/crypto\");\nvar _consts = require(\"src/consts\");\nvar _analytics = require(\"src/analytics\");\nvar _analyticsDefault = parcelHelpers.interopDefault(_analytics);\nconst columnsRecentTransactions = [\n    {\n        Header: \"STATUS\",\n        accessor: \"status\"\n    },\n    {\n        Header: \"TX HASH\",\n        accessor: \"txHash\"\n    },\n    {\n        Header: \"FROM\",\n        accessor: \"from\"\n    },\n    {\n        Header: \"TO\",\n        accessor: \"to\"\n    },\n    {\n        Header: \"AMOUNT\",\n        accessor: \"amount\"\n    },\n    {\n        Header: \"TIME\",\n        accessor: \"time\"\n    }\n];\nconst RecentTransactions = ({ isError, isLoading, recentTransactions, tokenIcon })=>{\n    const navigate = (0, _hooks.useNavigateCustom)();\n    const { environment } = (0, _environmentContext.useEnvironment)();\n    const { width } = (0, _hooks.useWindowSize)();\n    const isDesktop = width >= (0, _consts.BREAKPOINTS).desktop;\n    const stopPropagation = (e)=>{\n        e.stopPropagation();\n    };\n    const renderAddress = (data, isFrom)=>{\n        const chainId = isFrom ? data.sourceChain?.chainId : data.content?.standarizedProperties?.toChain;\n        const address = isFrom ? data.sourceChain?.from : data.content?.standarizedProperties?.toAddress;\n        if (!chainId || !address) return null;\n        return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n            className: \"recent-transactions-table-item-container\",\n            children: [\n                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.Tooltip), {\n                    tooltip: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        children: (0, _sdk.chainIdToChain)(chainId)\n                    }),\n                    maxWidth: false,\n                    type: \"info\",\n                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.BlockchainIcon), {\n                            chainId: chainId,\n                            network: environment.network\n                        })\n                    })\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"a\", {\n                    href: (0, _wormhole.getExplorerLink)({\n                        network: environment.network,\n                        chainId,\n                        value: address,\n                        base: \"address\",\n                        isNativeAddress: true\n                    }),\n                    target: \"_blank\",\n                    rel: \"noopener noreferrer\",\n                    onClick: stopPropagation,\n                    children: (0, _crypto.shortAddress)(address).toUpperCase()\n                }),\n                /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.CopyToClipboard), {\n                    toCopy: address,\n                    children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.CopyIcon), {})\n                })\n            ]\n        });\n    };\n    const parsedRecentTxsData = recentTransactions?.map((data)=>({\n            txHashString: data.sourceChain.transaction.txHash,\n            status: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"recent-transactions-table-item\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                        children: \"STATUS\"\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"recent-transactions-table-item-container\",\n                        children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.StatusBadge), {\n                            size: \"responsive\",\n                            status: data.status\n                        })\n                    })\n                ]\n            }),\n            txHash: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"recent-transactions-table-item\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                        children: \"TX HASH\"\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"recent-transactions-table-item-container\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.NavLink), {\n                                to: `/tx/${(0, _crypto.parseTx)({\n                                    value: data.sourceChain.transaction.txHash,\n                                    chainId: data.sourceChain?.chainId\n                                })}`,\n                                onClick: stopPropagation,\n                                children: (0, _crypto.shortAddress)(data.sourceChain.transaction.txHash).toUpperCase()\n                            }),\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _molecules.CopyToClipboard), {\n                                toCopy: data.sourceChain.transaction.txHash,\n                                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.CopyIcon), {})\n                            })\n                        ]\n                    })\n                ]\n            }),\n            from: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"recent-transactions-table-item\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                        children: \"FROM\"\n                    }),\n                    renderAddress(data, true)\n                ]\n            }),\n            to: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"recent-transactions-table-item\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                        children: \"TO\"\n                    }),\n                    renderAddress(data, false)\n                ]\n            }),\n            amount: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"recent-transactions-table-item\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                        children: \"AMOUNT\"\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                        className: \"recent-transactions-table-item-container amount\",\n                        children: [\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"span\", {\n                                children: (0, _number.formatNumber)(data?.data?.tokenAmount ? +data?.data?.tokenAmount : +data?.content?.payload?.parsedPayload?.nttMessage?.trimmedAmount?.amount / 1000000 || +data?.content?.payload?.nttMessage?.trimmedAmount?.amount / 1000000)\n                            }),\n                            tokenIcon && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"img\", {\n                                src: tokenIcon,\n                                alt: `${data?.data?.symbol} Token`,\n                                width: \"16\",\n                                height: \"16\"\n                            }),\n                            data?.data?.usdAmount && /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"span\", {\n                                className: \"usd\",\n                                children: [\n                                    \"($\",\n                                    (0, _number.formatNumber)(+data?.data?.usdAmount, 2),\n                                    \")\"\n                                ]\n                            })\n                        ]\n                    })\n                ]\n            }),\n            time: /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"recent-transactions-table-item\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"h4\", {\n                        children: \"TIME\"\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        className: \"recent-transactions-table-item-container time\",\n                        children: (0, _date.timeAgo)(new Date(data.sourceChain?.timestamp))\n                    })\n                ]\n            }),\n            viewDetails: data?.sourceChain?.transaction?.txHash && /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"recent-transactions-table-item\",\n                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _atoms.NavLink), {\n                    className: \"recent-transactions-table-item-btn\",\n                    to: `/tx/${(0, _crypto.parseTx)({\n                        value: data.sourceChain.transaction.txHash,\n                        chainId: data.sourceChain?.chainId\n                    })}`,\n                    onClick: stopPropagation,\n                    children: \"View details\"\n                })\n            })\n        })) || [];\n    if (isError) return null;\n    return /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n        className: \"recent-transactions\",\n        children: [\n            /*#__PURE__*/ (0, _jsxRuntime.jsxs)(\"div\", {\n                className: \"recent-transactions-title\",\n                children: [\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _generic.SwapVerticalIcon), {}),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                        children: \"Recent Transactions\"\n                    }),\n                    /*#__PURE__*/ (0, _jsxRuntime.jsx)(ViewMore, {\n                        environment: environment,\n                        children: \"View All\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"div\", {\n                className: \"recent-transactions-table\",\n                children: /*#__PURE__*/ (0, _jsxRuntime.jsx)((0, _organisms.Table), {\n                    columns: isDesktop ? columnsRecentTransactions : [\n                        ...columnsRecentTransactions,\n                        {\n                            Header: \"View Details\",\n                            accessor: \"viewDetails\"\n                        }\n                    ],\n                    data: parsedRecentTxsData,\n                    emptyMessage: /*#__PURE__*/ (0, _jsxRuntime.jsxs)((0, _jsxRuntime.Fragment), {\n                        children: [\n                            \"No recent transaction found; take a look at\\xa0\",\n                            /*#__PURE__*/ (0, _jsxRuntime.jsx)(ViewMore, {\n                                environment: environment,\n                                children: \"All Transactions\"\n                            }),\n                            \".\"\n                        ]\n                    }),\n                    isLoading: isLoading,\n                    numberOfColumns: 6,\n                    numberOfRows: 7,\n                    onRowClick: (tx)=>{\n                        if (isDesktop) return tx.txHash ? navigate(`/tx/${tx.txHashString}`) : null;\n                    }\n                })\n            })\n        ]\n    });\n};\nconst ViewMore = ({ environment, children })=>{\n    return /*#__PURE__*/ (0, _jsxRuntime.jsx)(\"a\", {\n        onClick: ()=>{\n            window.scrollTo(0, 0);\n            (0, _analyticsDefault.default).track(\"viewMore\", {\n                network: environment.network,\n                selected: \"NTT Token Recent Transactions\"\n            });\n        },\n        href: `#/txs?appId=${(0, _consts.NTT_APP_ID)}`,\n        children: children\n    });\n};\n\n},{\"react/jsx-runtime\":\"1dlk8\",\"@wormhole-foundation/sdk\":\"cHYNT\",\"src/icons/generic\":\"23xak\",\"src/context/EnvironmentContext\":\"jjAhi\",\"src/utils/hooks\":\"2VXdL\",\"src/components/atoms\":\"jMZmV\",\"src/components/molecules\":\"f5gIB\",\"src/components/organisms\":\"lKAW4\",\"src/utils/date\":\"9wAFB\",\"src/utils/number\":\"c38zr\",\"src/utils/wormhole\":\"6bzfn\",\"src/utils/crypto\":\"fjQNR\",\"src/consts\":\"2l9qr\",\"src/analytics\":\"cr0zc\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"jiucr\"}],\"kX07k\":[function() {},{}]},[], null, \"parcelRequire94c2\")\n\n//# sourceMappingURL=NTTToken.3ac69b4d.js.map\n","import { useState, useMemo, useEffect } from \"react\";\nimport { useParams, useSearchParams } from \"react-router-dom\";\nimport { useQuery } from \"react-query\";\nimport { chainToChainId } from \"@wormhole-foundation/sdk\";\nimport { getClient } from \"src/api/Client\";\nimport { useEnvironment } from \"src/context/EnvironmentContext\";\nimport { BaseLayout } from \"src/layouts/BaseLayout\";\nimport { ToggleGroup } from \"src/components/atoms\";\nimport { GetOperationsOutput } from \"src/api/guardian-network/types\";\nimport {\n  canWeGetDestinationTx,\n  CCTP_MANUAL_APP_ID,\n  CCTP_XR_APP_ID,\n  IStatus,\n  NTT_APP_ID,\n} from \"src/consts\";\nimport { ChainLimit, Order } from \"src/api\";\nimport { ETH_LIMIT } from \"src/pages/Txs\";\nimport analytics from \"src/analytics\";\nimport { Summary } from \"./Summary\";\nimport { ByChain } from \"./ByChain\";\nimport { TopHolders } from \"./TopHolders\";\nimport { TopAddresses } from \"./TopAddresses\";\nimport { Metrics } from \"./Metrics\";\nimport { TransfersOverTime } from \"./TransfersOverTime\";\nimport { RecentTransactions } from \"./RecentTransactions\";\n// import { CommunityBanner } from \"./CommunityBanner\";\nimport \"./styles.scss\";\n\nexport type TimeRange = {\n  label: \"Last 24 hours\" | \"Last week\" | \"Last month\" | \"Last year\";\n  value: \"1d\" | \"1w\" | \"1m\" | \"1y\";\n};\nexport type ByType = \"notional\" | \"tx\";\n\nconst NTTToken = () => {\n  const { environment } = useEnvironment();\n  const currentNetwork = environment.network;\n  const isMainnet = currentNetwork === \"Mainnet\";\n\n  const { symbol, coingecko_id } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [activeView, setActiveView] = useState(searchParams.get(\"view\") || \"general-info\");\n\n  const [timeRange, setTimeRange] = useState<TimeRange>({ label: \"Last week\", value: \"1w\" });\n  const [by, setBy] = useState<ByType>(\"notional\");\n\n  const isUSDCe = coingecko_id === \"wormhole-bridged-usdc-fantom\";\n\n  const { startDate, endDate } = useMemo(() => {\n    const end = new Date();\n    const start = new Date(end);\n    switch (timeRange.value) {\n      case \"1d\":\n        start.setDate(end.getDate() - 1);\n        break;\n      case \"1w\":\n        start.setDate(end.getDate() - 7);\n        break;\n      case \"1m\":\n        start.setMonth(end.getMonth() - 1);\n        break;\n      case \"1y\":\n        start.setFullYear(end.getFullYear() - 1);\n        break;\n    }\n    return { startDate: start, endDate: end };\n  }, [timeRange]);\n\n  const { data: chainLimitsData, isLoading: isLoadingLimits } = useQuery(\n    [\"getLimit\"],\n    async () => {\n      try {\n        return await getClient().governor.getLimit();\n      } catch {\n        return null;\n      }\n    },\n    {\n      enabled: isMainnet,\n    },\n  );\n\n  const {\n    data: recentTransactions,\n    isError: isErrorRecentTransactions,\n    isFetching: isFetchingRecentTransactions,\n  } = useQuery(\n    [\"getRecentTransactions\", symbol],\n    async () => {\n      let page = 0;\n      let transactions: GetOperationsOutput[] = [];\n\n      while (transactions.length < 7) {\n        const data = await getClient().guardianNetwork.getOperations({\n          appId: NTT_APP_ID,\n          pagination: {\n            pageSize: 50,\n            sortOrder: Order.DESC,\n            page,\n          },\n        });\n\n        const filteredTransactions = data.filter(\n          tx =>\n            tx.data?.symbol.toUpperCase() === symbol.toUpperCase() ||\n            (isUSDCe &&\n              tx.content?.standarizedProperties?.fromChain === chainToChainId(\"Ethereum\") &&\n              tx.content?.standarizedProperties?.toChain === chainToChainId(\"Fantom\") &&\n              tx.data?.symbol.toUpperCase() === \"USDC\"),\n        );\n\n        const transactionsWithStatus = filteredTransactions.map(tx => {\n          const { emitterChain } = tx;\n          const payload = tx?.content?.payload;\n          const standarizedProperties = tx?.content?.standarizedProperties;\n\n          const {\n            appIds,\n            fromChain: stdFromChain,\n            toChain: stdToChain,\n          } = standarizedProperties || {};\n\n          const globalToChainId = tx.targetChain?.chainId;\n\n          const parsedPayload = payload?.parsedPayload;\n          const fromChainOrig = emitterChain || stdFromChain;\n\n          const attributeType = tx.sourceChain?.attribute?.type;\n          const attributeValue = tx.sourceChain?.attribute?.value;\n\n          // --- Gateway Transfers\n          const fromChain =\n            attributeType === \"wormchain-gateway\" ? attributeValue?.originChainId : fromChainOrig;\n          const toChain = parsedPayload?.[\"gateway_transfer\"]?.chain\n            ? parsedPayload?.[\"gateway_transfer\"].chain\n            : stdToChain || globalToChainId;\n          // -----\n\n          // --- Status Logic\n\n          const limitDataForChain = chainLimitsData\n            ? chainLimitsData.find((data: ChainLimit) => data.chainId === fromChain)\n            : ETH_LIMIT;\n          const transactionLimit = limitDataForChain?.maxTransactionSize;\n          const isBigTransaction = transactionLimit <= Number(tx?.data?.usdAmount);\n          const isDailyLimitExceeded =\n            limitDataForChain?.availableNotional < Number(tx?.data?.usdAmount);\n\n          const status: IStatus = tx?.targetChain?.transaction?.txHash\n            ? \"completed\"\n            : appIds && (appIds.includes(CCTP_MANUAL_APP_ID) || appIds.includes(CCTP_XR_APP_ID))\n            ? \"external_tx\"\n            : tx.vaa?.raw\n            ? canWeGetDestinationTx({\n                appIds,\n                network: currentNetwork,\n                targetChain: toChain,\n              })\n              ? \"pending_redeem\"\n              : \"completed\"\n            : isBigTransaction || isDailyLimitExceeded\n            ? \"in_governors\"\n            : \"in_progress\";\n\n          return {\n            ...tx,\n            status,\n          };\n        });\n\n        transactions = [...transactions, ...transactionsWithStatus];\n        if (page > 10) break;\n        page++;\n      }\n\n      return transactions.slice(0, 7);\n    },\n    {\n      enabled: !isLoadingLimits && isMainnet,\n    },\n  );\n\n  const {\n    data: transfersByTime,\n    isError: isErrorTransfersByTime,\n    isFetching: isFetchingTransfersByTime,\n  } = useQuery(\n    [\"getTransferByTimeTx\", startDate, endDate, by],\n    async () => {\n      const timeSpan: \"1h\" | \"1d\" | \"1mo\" =\n        timeRange.value === \"1d\" ? \"1h\" : timeRange.value === \"1y\" ? \"1mo\" : \"1d\";\n      return {\n        data: await getClient().nttApi.getNttTransferByTime({\n          by,\n          symbol,\n          from: startDate.toISOString(),\n          timeSpan,\n          to: endDate.toISOString(),\n        }),\n        timeSpan,\n      };\n    },\n    { enabled: isMainnet, refetchOnWindowFocus: false },\n  );\n\n  const {\n    data: summary,\n    isError: isErrorSummary,\n    isFetching: isFetchingSummary,\n  } = useQuery(\n    [\"getSummary\"],\n    async () => {\n      const data = await getClient().nttApi.getNttSummary({\n        coingecko_id,\n      });\n\n      // TODO: when coingecko returns optimism, remove this\n      if (data.symbol === \"W\") {\n        if (!data.platforms[\"optimistic-ethereum\"]) {\n          data.platforms[\"optimistic-ethereum\"] = \"0xb0ffa8000886e57f86dd5264b9582b2ad87b2b91\";\n        }\n      }\n\n      return data;\n    },\n    {\n      enabled: isMainnet,\n    },\n  );\n\n  const {\n    data: activityTx,\n    isError: isErrorActivityTx,\n    isFetching: isFetchingActivityTx,\n  } = useQuery(\n    \"getActivityTx\",\n    async () => {\n      const activity = await getClient().nttApi.getNttActivity({\n        by: \"tx\",\n        symbol,\n      });\n      activity?.sort((a, b) => (+a.value < +b.value ? 1 : -1));\n      return activity;\n    },\n    {\n      enabled: isMainnet,\n    },\n  );\n\n  const {\n    data: activityNotional,\n    isError: isErrorActivityNotional,\n    isFetching: isFetchingActivityNotional,\n  } = useQuery(\n    \"getActivityNotional\",\n    async () => {\n      const activity = await getClient().nttApi.getNttActivity({\n        by: \"notional\",\n        symbol,\n      });\n      activity?.sort((a, b) => (+a.value < +b.value ? 1 : -1));\n      return activity;\n    },\n    {\n      enabled: isMainnet,\n    },\n  );\n\n  const {\n    data: topHolders,\n    isError: isErrorTopHolders,\n    isFetching: isFetchingTopHolders,\n  } = useQuery(\n    \"getTopHolders\",\n    async () => {\n      const data = await getClient().nttApi.getNttTopHolder({\n        coingecko_id,\n      });\n      return data;\n    },\n    {\n      enabled: isMainnet,\n    },\n  );\n\n  const {\n    data: topAddressesNotional,\n    isError: isErrorTopAddressesNotional,\n    isFetching: isFetchingTopAddressesNotional,\n  } = useQuery(\n    [\"getNttTopAddressNotional\"],\n    async () => {\n      const data = await getClient().nttApi.getNttTopAddress({\n        by: \"notional\",\n        symbol,\n      });\n      data?.sort((a, b) => (+a.value < +b.value ? 1 : -1));\n      return data;\n    },\n    {\n      enabled: isMainnet,\n    },\n  );\n\n  const {\n    data: topAddressesTx,\n    isError: isErrorTopAddressesTx,\n    isFetching: isFetchingTopAddressesTx,\n  } = useQuery(\n    [\"getNttTopAddressTx\"],\n    async () => {\n      const data = await getClient().nttApi.getNttTopAddress({\n        by: \"tx\",\n        symbol,\n      });\n      data?.sort((a, b) => (+a.value < +b.value ? 1 : -1));\n      return data;\n    },\n    {\n      enabled: isMainnet,\n    },\n  );\n\n  useEffect(() => {\n    analytics.page({ title: `ANALYTICS-${symbol.toUpperCase()}-TOKEN-${activeView}` });\n  }, [activeView, symbol]);\n\n  useEffect(() => {\n    setActiveView(searchParams.get(\"view\") || \"general-info\");\n  }, [searchParams]);\n\n  return (\n    <BaseLayout>\n      <div className=\"ntt-token-page\">\n        <Summary\n          summary={summary}\n          isLoading={isFetchingSummary}\n          isError={isErrorSummary}\n          coingecko_id={coingecko_id}\n        />\n\n        <div className=\"tabs\">\n          <ToggleGroup\n            ariaLabel=\"Select Token data view\"\n            className=\"tabs-toggle-group\"\n            items={[\n              { label: \"General Information\", value: \"general-info\" },\n              { label: \"Transfers Over Time\", value: \"transfers-over-time\" },\n              { label: \"Top Transfers\", value: \"top-transfers\" },\n              ...(!isUSDCe ? [{ label: \"Top Holders\", value: \"top-holders\" }] : []),\n              { label: \"Top Addresses\", value: \"top-addresses\" },\n            ]}\n            onValueChange={value => {\n              setActiveView(value);\n              setSearchParams(prev => {\n                prev.set(\"view\", value);\n                return prev;\n              });\n            }}\n            value={activeView}\n          />\n        </div>\n\n        {activeView === \"general-info\" && (\n          <>\n            <Metrics summary={summary} isLoading={isFetchingSummary} isError={isErrorSummary} />\n            <RecentTransactions\n              isError={isErrorRecentTransactions}\n              isLoading={isLoadingLimits || isFetchingRecentTransactions}\n              recentTransactions={recentTransactions}\n              tokenIcon={summary?.image?.small}\n            />\n          </>\n        )}\n\n        {activeView === \"transfers-over-time\" && (\n          <TransfersOverTime\n            by={by}\n            isError={isErrorTransfersByTime}\n            isLoading={isFetchingTransfersByTime}\n            setBy={setBy}\n            setTimeRange={value => setTimeRange(value)}\n            timeRange={timeRange}\n            timeSpan={transfersByTime?.timeSpan || \"1d\"}\n            transfers={transfersByTime?.data}\n            currentNetwork={currentNetwork}\n          />\n        )}\n\n        {activeView === \"top-transfers\" && (\n          <ByChain\n            activityNotional={activityNotional}\n            activityTx={activityTx}\n            isErrorActivityNotional={isErrorActivityNotional}\n            isErrorActivityTx={isErrorActivityTx}\n            isLoadingActivityNotional={isFetchingActivityNotional}\n            isLoadingActivityTx={isFetchingActivityTx}\n          />\n        )}\n\n        {activeView === \"top-holders\" && (\n          <TopHolders\n            isError={isErrorTopHolders}\n            isLoading={isFetchingTopHolders}\n            topHolders={topHolders}\n          />\n        )}\n\n        {activeView === \"top-addresses\" && (\n          <TopAddresses\n            isErrorTopAddressesNotional={isErrorTopAddressesNotional}\n            isErrorTopAddressesTx={isErrorTopAddressesTx}\n            isLoadingTopAddressesNotional={isFetchingTopAddressesNotional}\n            isLoadingTopAddressesTx={isFetchingTopAddressesTx}\n            topAddressesNotional={topAddressesNotional}\n            topAddressesTx={topAddressesTx}\n          />\n        )}\n\n        {/* TODO: show when Multigov is available {symbol === \"W\" && <CommunityBanner />} */}\n      </div>\n    </BaseLayout>\n  );\n};\n\nexport default NTTToken;\n","import { useQuery } from \"react-query\";\nimport FlipNumbers from \"react-flip-numbers\";\nimport { Chain, ChainId, chainToChainId, Network } from \"@wormhole-foundation/sdk\";\nimport { useEnvironment } from \"src/context/EnvironmentContext\";\nimport {\n  ArrowRightIcon,\n  DiscordIcon,\n  GithubIcon,\n  InfoCircleIcon,\n  LinkIcon,\n  TelegramIcon,\n  TwitterIcon,\n} from \"src/icons/generic\";\nimport { BlockchainIcon, Loader, NavLink, Tooltip } from \"src/components/atoms\";\nimport { formatNumber } from \"src/utils/number\";\nimport { getExplorerLink } from \"src/utils/wormhole\";\nimport { getClient } from \"src/api/Client\";\nimport { GetSummaryResult } from \"src/api/native-token-transfer/types\";\nimport { Environment } from \"src/utils/environment\";\n\ninterface Props {\n  isError: boolean;\n  isLoading: boolean;\n  summary: GetSummaryResult;\n  coingecko_id: string;\n}\n\n// change the name that coingecko brings us to the one we use\nconst chainNameMap: Record<string, Chain> = {\n  \"arbitrum-one\": \"Arbitrum\",\n  \"near-protocol\": \"Near\",\n  \"optimistic-ethereum\": \"Optimism\",\n  \"polygon-pos\": \"Polygon\",\n  \"binance-smart-chain\": \"Bsc\",\n  \"neon-evm\": \"Neon\",\n};\n\nconst chainNameMapUnsupported: Record<string, number> = {\n  energi: 99949991,\n  \"hedera-hashgraph\": 99949992,\n  polkadot: 99949993,\n  stellar: 99949994,\n  tron: 99949995,\n  zksync: 99949996,\n};\n\nconst MAX_CONTRACTS = 3;\n\nexport const Summary = ({ isError, isLoading, summary, coingecko_id }: Props) => {\n  const { environment } = useEnvironment();\n  const currentNetwork = environment.network;\n  const isMainnet = currentNetwork === \"Mainnet\";\n  const tokenIcon = summary?.image?.large;\n\n  const { links } = summary || {};\n  const websiteLink = links?.homepage?.[0];\n  const twitterLink = links?.twitter_screen_name\n    ? `https://x.com/${links?.twitter_screen_name}`\n    : \"\";\n  const telegramLink = links?.telegram_channel_identifier\n    ? `https://t.me/${links?.telegram_channel_identifier}`\n    : \"\";\n  const discordLink = links?.chat_url?.[0];\n  const githubLink = links?.repos_url?.github?.[0];\n\n  const {\n    data: dataTokenSummary,\n    isFetching: isFetchingTokenPrice,\n    isError: isErrorTokenSummary,\n  } = useQuery([\"nttTokenSummary\"], () => getClient().nttApi.getNttSummary({ coingecko_id }), {\n    enabled: isMainnet,\n    refetchInterval: 40000,\n  });\n\n  return (\n    <div className=\"summary\">\n      <NavLink to=\"/analytics/ntt\" className=\"summary-back\">\n        <ArrowRightIcon />\n        <span>Back to tokens list</span>\n      </NavLink>\n\n      <div className=\"summary-top\">\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <>\n            <div className=\"summary-top-img\">\n              {tokenIcon && (\n                <img\n                  alt={`${summary?.symbol} Token Icon`}\n                  height=\"60\"\n                  loading=\"lazy\"\n                  src={tokenIcon}\n                  width=\"60\"\n                />\n              )}\n            </div>\n\n            <div className=\"summary-top-content\">\n              <h1 className=\"summary-top-content-title\">\n                <div className=\"summary-top-content-title-mobileImg\">\n                  {tokenIcon && (\n                    <img\n                      alt={`${summary?.symbol} Token Icon`}\n                      height=\"30\"\n                      loading=\"lazy\"\n                      src={tokenIcon}\n                      width=\"30\"\n                    />\n                  )}\n                </div>\n                <div>{summary?.symbol} Token</div>\n              </h1>\n              <div className=\"summary-top-content-container\">\n                <div className=\"summary-top-content-container-item\">\n                  <div className=\"summary-top-content-container-item-up\">Contracts</div>\n                  <ContractsList summary={summary} environment={environment} />\n                </div>\n\n                <div className=\"summary-top-content-container-item\">\n                  <div className=\"summary-top-content-container-item-up\">Price</div>\n                  <div className=\"summary-top-content-container-item-down price\">\n                    <div className=\"price-value\">\n                      <TokenPrice\n                        dataTokenSummary={dataTokenSummary}\n                        isErrorTokenSummary={isErrorTokenSummary}\n                        isFetchingTokenPrice={isFetchingTokenPrice}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"summary-top-content-container-item\">\n                  <div className=\"summary-top-content-container-item-up\">Website</div>\n                  <div className=\"summary-top-content-container-item-down\">\n                    {isError ? (\n                      \"N/A\"\n                    ) : (\n                      <a className=\"link\" href={websiteLink} rel=\"noreferrer\" target=\"_blank\">\n                        <span>{websiteLink}</span>\n                        <LinkIcon />\n                      </a>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"summary-top-content-container-item\">\n                  <div className=\"summary-top-content-container-item-up\">Community</div>\n                  <div className=\"summary-top-content-container-item-down community\">\n                    {isError ? (\n                      \"N/A\"\n                    ) : (\n                      <>\n                        {twitterLink && (\n                          <a href={twitterLink} rel=\"noreferrer\" target=\"_blank\">\n                            <TwitterIcon />\n                          </a>\n                        )}\n                        {telegramLink && (\n                          <a href={telegramLink} rel=\"noreferrer\" target=\"_blank\">\n                            <TelegramIcon />\n                          </a>\n                        )}\n                        {discordLink && (\n                          <a href={discordLink} rel=\"noreferrer\" target=\"_blank\">\n                            <DiscordIcon />\n                          </a>\n                        )}\n                        {githubLink && (\n                          <a href={githubLink} rel=\"noreferrer\" target=\"_blank\">\n                            <GithubIcon />\n                          </a>\n                        )}\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst ContractsList = ({\n  summary,\n  environment,\n}: {\n  summary: GetSummaryResult;\n  environment: Environment;\n}) => {\n  const platforms = Object.entries(summary?.platforms || {}).filter(([chain]) =>\n    [\n      \"solana\",\n      \"ethereum\",\n      \"optimism\",\n      \"optimistic-ethereum\",\n      \"base\",\n      \"arbitrum-one\",\n      \"arbitrum\",\n      \"polygon-pos\",\n      \"binance-smart-chain\",\n    ].includes(chain),\n  );\n\n  return (\n    <div className=\"summary-top-content-container-item-chain\">\n      {summary?.platforms ? (\n        <div className=\"summary-top-content-container-item-chain\">\n          {platforms.map(([chain, contract], index) => {\n            // show MAX_CONTRACTS contracts\n            if (index < MAX_CONTRACTS) {\n              const chainCapitalized = (chain.charAt(0).toUpperCase() + chain.slice(1)) as Chain;\n              const chainId = chainToChainId(chainNameMap[chain] || chainCapitalized);\n              const chainIdUnsupported = chainNameMapUnsupported[chain];\n\n              return (\n                <ChainItem\n                  key={index}\n                  chainId={(chainIdUnsupported || chainId) as ChainId}\n                  network={environment.network}\n                  value={contract}\n                />\n              );\n            }\n            // show the fourth contract directly if there are only 4 contracts in total without a tooltip\n            if (index === MAX_CONTRACTS && platforms.length === MAX_CONTRACTS + 1) {\n              const chainCapitalized = (chain.charAt(0).toUpperCase() + chain.slice(1)) as Chain;\n              const chainId = chainToChainId(chainNameMap[chain] || chainCapitalized);\n              const chainIdUnsupported = chainNameMapUnsupported[chain];\n\n              return (\n                <ChainItem\n                  key={index}\n                  chainId={(chainIdUnsupported || chainId) as ChainId}\n                  network={environment.network}\n                  value={contract}\n                />\n              );\n            }\n            return null;\n          })}\n          {platforms.length > MAX_CONTRACTS + 1 && (\n            <Tooltip\n              type=\"info\"\n              className=\"summary-top-content-container-item-chain-tooltip\"\n              side=\"bottom\"\n              tooltip={\n                <div className=\"summary-top-content-container-item-chain-tooltip-container\">\n                  {platforms.slice(MAX_CONTRACTS).map(([chain, contract], i) => {\n                    const chainCapitalized = (chain.charAt(0).toUpperCase() +\n                      chain.slice(1)) as Chain;\n                    const chainId = chainToChainId(chainNameMap[chain] || chainCapitalized);\n                    const chainIdUnsupported = chainNameMapUnsupported[chain];\n\n                    return (\n                      <ChainItem\n                        key={i}\n                        chainId={(chainIdUnsupported || chainId) as ChainId}\n                        network={environment.network}\n                        value={contract}\n                      />\n                    );\n                  })}\n                </div>\n              }\n            >\n              <div className=\"summary-top-content-container-item-chain-contract\">\n                <div className=\"summary-top-content-container-item-chain-contract-more\">\n                  +{platforms.length - MAX_CONTRACTS}\n                  <InfoCircleIcon />\n                </div>\n              </div>\n            </Tooltip>\n          )}\n        </div>\n      ) : (\n        \"N/A\"\n      )}\n    </div>\n  );\n};\n\nconst ChainItem = ({\n  chainId,\n  network,\n  value,\n}: {\n  chainId: ChainId;\n  network: Network;\n  value: string;\n}) => {\n  return (\n    <a\n      href={getExplorerLink({ chainId, network, value, base: \"token\" })}\n      className=\"summary-top-content-container-item-chain-contract\"\n      rel=\"noreferrer\"\n      target=\"_blank\"\n    >\n      <BlockchainIcon chainId={chainId} network={network} />\n      <LinkIcon />\n    </a>\n  );\n};\n\nconst TokenPrice = ({\n  dataTokenSummary,\n  isErrorTokenSummary,\n  isFetchingTokenPrice,\n}: {\n  dataTokenSummary: GetSummaryResult;\n  isErrorTokenSummary: boolean;\n  isFetchingTokenPrice: boolean;\n}) => {\n  if (isFetchingTokenPrice && !isErrorTokenSummary && !dataTokenSummary?.price) {\n    return \"...\";\n  }\n  if (isErrorTokenSummary) {\n    return \"N/A\";\n  }\n  return dataTokenSummary?.price ? (\n    <FlipNumbers\n      height={15}\n      width={11}\n      color=\"white\"\n      background=\"var(--color-gray-900)\"\n      play\n      perspective={100}\n      numbers={`$${formatNumber(+Number(dataTokenSummary?.price).toFixed(4))}`}\n      numberStyle={{\n        fontFamily: \"Roboto\",\n        fontSize: \"14px\",\n        fontWeight: 400,\n        letterSpacing: \"0.02em\",\n        lineHeight: \"20px\",\n      }}\n      nonNumberStyle={{\n        fontFamily: \"Roboto\",\n        fontSize: \"14px\",\n        fontWeight: 400,\n        letterSpacing: \"0.02em\",\n        lineHeight: \"20px\",\n      }}\n    />\n  ) : (\n    \"N/A\"\n  );\n};\n","import { GetActivityResult } from \"src/api/native-token-transfer/types\";\nimport { ArrowRightIcon, GlobeIcon } from \"src/icons/generic\";\nimport { chainIdToChain } from \"@wormhole-foundation/sdk\";\nimport { BlockchainIcon } from \"src/components/atoms\";\nimport { useEnvironment } from \"src/context/EnvironmentContext\";\nimport { formatNumber } from \"src/utils/number\";\n\ntype ByChainProps = {\n  activityNotional: GetActivityResult;\n  activityTx: GetActivityResult;\n  isErrorActivityNotional: boolean;\n  isErrorActivityTx: boolean;\n  isLoadingActivityNotional: boolean;\n  isLoadingActivityTx: boolean;\n};\n\nconst LOADING_ARRAY = Array(10).fill(1);\n\nexport const ByChain = ({\n  activityNotional,\n  activityTx,\n  isErrorActivityNotional,\n  isErrorActivityTx,\n  isLoadingActivityNotional,\n  isLoadingActivityTx,\n}: ByChainProps) => {\n  const { environment } = useEnvironment();\n\n  return (\n    <div className=\"bychain\">\n      <div className=\"bychain-half\">\n        <div className=\"bychain-half-title\">\n          <GlobeIcon />\n          <div>\n            Transfers by Chain <span>(All Time)</span>\n          </div>\n        </div>\n        <div className=\"bychain-half-table\">\n          <div className=\"bychain-half-table-head\">\n            <div className=\"bychain-half-table-head-row\">SOURCE CHAIN</div>\n            <div className=\"bychain-half-table-head-row\">TARGET CHAIN</div>\n            <div className=\"bychain-half-table-head-row\">\n              <span className=\"mobile\">TXN COUNT</span>\n              <span className=\"desktop\">TRANSFER COUNT</span>\n            </div>\n          </div>\n\n          {isErrorActivityTx ? (\n            <div className=\"bychain-half-table-error\">Failed to get top transfers</div>\n          ) : isLoadingActivityTx ? (\n            LOADING_ARRAY.map((item, idx) => (\n              <div key={`itemTx-${idx}`} className=\"bychain-half-table-item\">\n                <div className=\"loading\" />\n              </div>\n            ))\n          ) : activityTx?.length > 0 ? (\n            activityTx?.map((item, idx) =>\n              idx < 10 ? (\n                <div key={`itemTx-${idx}`} className=\"bychain-half-table-item\">\n                  <div className=\"bychain-half-table-item-row\">\n                    <BlockchainIcon network={environment.network} chainId={item.emitterChain} />\n                    {chainIdToChain(item.emitterChain)}\n                    <div className=\"arrow\">\n                      <ArrowRightIcon />\n                    </div>\n                  </div>\n                  <div className=\"bychain-half-table-item-row\">\n                    <BlockchainIcon network={environment.network} chainId={item.destinationChain} />\n                    {chainIdToChain(item.destinationChain)}\n                  </div>\n                  <div className=\"bychain-half-table-item-row\">{formatNumber(+item.value, 0)}</div>\n                </div>\n              ) : null,\n            )\n          ) : (\n            <div className=\"top-addresses-half-table-error\">Transfers not found</div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"bychain-half\">\n        <div className=\"bychain-half-title\">\n          <GlobeIcon />\n          <div>\n            Volume by Chain <span>(All Time)</span>\n          </div>\n        </div>\n        <div className=\"bychain-half-table\">\n          <div className=\"bychain-half-table-head\">\n            <div className=\"bychain-half-table-head-row\">SOURCE CHAIN</div>\n            <div className=\"bychain-half-table-head-row\">TARGET CHAIN</div>\n            <div className=\"bychain-half-table-head-row\">TOTAL VOLUME</div>\n          </div>\n\n          {isErrorActivityNotional ? (\n            <div className=\"bychain-half-table-error\">Failed to get top transfers</div>\n          ) : isLoadingActivityNotional ? (\n            LOADING_ARRAY.map((item, idx) => (\n              <div key={`itemNot-${idx}`} className=\"bychain-half-table-item\">\n                <div className=\"loading\" />\n              </div>\n            ))\n          ) : activityNotional?.length > 0 ? (\n            activityNotional?.map((item, idx) =>\n              idx < 10 ? (\n                <div key={`itemNot-${idx}`} className=\"bychain-half-table-item\">\n                  <div className=\"bychain-half-table-item-row\">\n                    <BlockchainIcon network={environment.network} chainId={item.emitterChain} />\n                    {chainIdToChain(item.emitterChain)}\n                    <div className=\"arrow\">\n                      <ArrowRightIcon />\n                    </div>\n                  </div>\n                  <div className=\"bychain-half-table-item-row\">\n                    <BlockchainIcon network={environment.network} chainId={item.destinationChain} />\n                    {chainIdToChain(item.destinationChain)}\n                  </div>\n                  <div className=\"bychain-half-table-item-row\">${formatNumber(+item.value)}</div>\n                </div>\n              ) : null,\n            )\n          ) : (\n            <div className=\"top-addresses-half-table-error\">Transfers not found</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { GetTopHolderResult } from \"src/api/native-token-transfer/types\";\nimport { CopyIcon, UserIcon, LinkIcon } from \"src/icons/generic\";\nimport { formatNumber } from \"src/utils/number\";\nimport { TruncateText } from \"src/utils/string\";\nimport { CopyToClipboard } from \"src/components/molecules\";\nimport { BlockchainIcon } from \"src/components/atoms\";\nimport { useEnvironment } from \"src/context/EnvironmentContext\";\nimport { chainIdToChain } from \"@wormhole-foundation/sdk\";\nimport { getExplorerLink } from \"src/utils/wormhole\";\nimport { useWindowSize } from \"src/utils/hooks\";\n\ntype TopHoldersProps = {\n  isError: boolean;\n  isLoading: boolean;\n  topHolders: GetTopHolderResult;\n};\n\nconst LOADING_ARRAY = Array(10).fill(1);\n\nexport const TopHolders = ({ isError, isLoading, topHolders }: TopHoldersProps) => {\n  const { environment } = useEnvironment();\n  const { width } = useWindowSize();\n\n  const isDesktopDesign = width >= 1280;\n\n  return (\n    <div className=\"top-holders\">\n      <div className=\"top-holders-title\">\n        <UserIcon />\n        <div>\n          Top Holders by Volume <span>(All Time)</span>\n        </div>\n      </div>\n\n      {isDesktopDesign && (\n        <div className=\"top-holders-table\">\n          <div className=\"top-holders-table-head\">\n            <div className=\"top-holders-table-head-row\">RANK</div>\n            <div className=\"top-holders-table-head-row\">USER</div>\n            <div className=\"top-holders-table-head-row\">CHAIN</div>\n            <div className=\"top-holders-table-head-row\">AMOUNT</div>\n            <div className=\"top-holders-table-head-row\"></div>\n          </div>\n\n          {isError ? (\n            <div className=\"top-holders-table-error\">Failed to get top holders</div>\n          ) : isLoading ? (\n            LOADING_ARRAY.map((_, idx) => (\n              <div key={`loading-${idx}`} className=\"top-holders-table-item\">\n                <div className=\"loading\" />\n              </div>\n            ))\n          ) : topHolders?.length > 0 ? (\n            topHolders.map((item, idx) => (\n              <div key={`item-${idx}`} className=\"top-holders-table-item\">\n                <div className=\"top-holders-table-item-row\">{idx + 1}</div>\n\n                <div className=\"top-holders-table-item-row\">\n                  <TruncateText containerWidth={150} text={item.address.toUpperCase()} />\n                  <CopyToClipboard toCopy={item.address}>\n                    <CopyIcon style={{ color: \"grey\" }} />\n                  </CopyToClipboard>\n                </div>\n\n                <div className=\"top-holders-table-item-row\">\n                  <BlockchainIcon chainId={item.chain} network={environment.network} />\n                  <div>{chainIdToChain(item.chain)}</div>\n                </div>\n\n                <div className=\"top-holders-table-item-row\">${formatNumber(+item.volume, 0)}</div>\n\n                <a\n                  className=\"top-holders-table-item-row\"\n                  href={getExplorerLink({\n                    network: environment.network,\n                    chainId: item.chain,\n                    value: item.address,\n                    base: \"address\",\n                    isNativeAddress: true,\n                  })}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  View on Explorer <LinkIcon />\n                </a>\n              </div>\n            ))\n          ) : (\n            <div className=\"top-addresses-half-table-error\">Holders not found</div>\n          )}\n        </div>\n      )}\n\n      {!isDesktopDesign && (\n        <div className=\"top-holders-mobile\">\n          {isError ? (\n            <div className=\"top-holders-table-error\">Failed to get top holders</div>\n          ) : isLoading ? (\n            LOADING_ARRAY.map((_, idx) => (\n              <div key={`loading-${idx}`} className=\"top-holders-table-item\">\n                <div className=\"loading\" />\n              </div>\n            ))\n          ) : topHolders?.length > 0 ? (\n            topHolders.map((item, idx) => (\n              <div key={`item-${idx}`} className=\"top-holders-mobile-container\">\n                <div className=\"top-holders-mobile-container-item\">\n                  <div className=\"title\">USER</div>\n                  <div className=\"content user\">\n                    <TruncateText containerWidth={150} text={item.address.toUpperCase()} />\n                    <CopyToClipboard toCopy={item.address}>\n                      <CopyIcon style={{ color: \"grey\" }} />\n                    </CopyToClipboard>\n                  </div>\n                </div>\n\n                <div className=\"top-holders-mobile-container-item\">\n                  <div className=\"title\">AMOUNT</div>\n                  <div className=\"content number\">${formatNumber(+item.volume, 0)}</div>\n                </div>\n\n                <div className=\"top-holders-mobile-container-item\">\n                  <div className=\"title\">CHAIN</div>\n                  <div className=\"content chain\">\n                    <BlockchainIcon chainId={item.chain} network={environment.network} />\n                    <div>{chainIdToChain(item.chain)}</div>\n                  </div>\n                </div>\n\n                <div className=\"top-holders-mobile-container-item\">\n                  <div className=\"title\">HYPERLINK</div>\n                  <a\n                    className=\"content url\"\n                    href={getExplorerLink({\n                      network: environment.network,\n                      chainId: item.chain,\n                      value: item.address,\n                      base: \"address\",\n                      isNativeAddress: true,\n                    })}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    View on Explorer <LinkIcon />\n                  </a>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"top-addresses-half-table-error\">Holders not found</div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { GetTopAddressResult } from \"src/api/native-token-transfer/types\";\nimport { CopyIcon, UserIcon } from \"src/icons/generic\";\nimport { formatNumber } from \"src/utils/number\";\nimport { TruncateText } from \"src/utils/string\";\nimport { CopyToClipboard } from \"src/components/molecules\";\n\ntype TopAddressesProps = {\n  isErrorTopAddressesNotional: boolean;\n  isErrorTopAddressesTx: boolean;\n  isLoadingTopAddressesNotional: boolean;\n  isLoadingTopAddressesTx: boolean;\n  topAddressesNotional: GetTopAddressResult;\n  topAddressesTx: GetTopAddressResult;\n};\n\nconst LOADING_ARRAY = Array(10).fill(1);\n\nexport const TopAddresses = ({\n  isErrorTopAddressesNotional,\n  isErrorTopAddressesTx,\n  isLoadingTopAddressesNotional,\n  isLoadingTopAddressesTx,\n  topAddressesNotional,\n  topAddressesTx,\n}: TopAddressesProps) => {\n  return (\n    <div className=\"top-addresses\">\n      <div className=\"top-addresses-half\">\n        <div className=\"top-addresses-half-title\">\n          <UserIcon />\n          <div>\n            Top Addresses by Transactions <span>(All Time)</span>\n          </div>\n        </div>\n        <div className=\"top-addresses-half-table\">\n          <div className=\"top-addresses-half-table-head\">\n            <div className=\"top-addresses-half-table-head-row\">RANK</div>\n            <div className=\"top-addresses-half-table-head-row\">USER</div>\n            <div className=\"top-addresses-half-table-head-row\">TRANSFERS</div>\n          </div>\n\n          {isErrorTopAddressesTx ? (\n            <div className=\"top-addresses-half-table-error\">Failed to get top addresses</div>\n          ) : isLoadingTopAddressesTx ? (\n            LOADING_ARRAY.map((item, idx) => (\n              <div key={`itemTx-${idx}`} className=\"top-addresses-half-table-item\">\n                <div className=\"loading\" />\n              </div>\n            ))\n          ) : topAddressesTx?.length > 0 ? (\n            topAddressesTx?.map((item, idx) =>\n              idx < 10 ? (\n                <div key={`itemTx-${idx}`} className=\"top-addresses-half-table-item\">\n                  <div className=\"top-addresses-half-table-item-row\">{idx + 1}</div>\n                  <div className=\"top-addresses-half-table-item-row\">\n                    <TruncateText containerWidth={250} text={item.fromAddress.toUpperCase()} />\n                    <CopyToClipboard toCopy={item.fromAddress}>\n                      <CopyIcon style={{ color: \"grey\" }} />\n                    </CopyToClipboard>\n                  </div>\n                  <div className=\"top-addresses-half-table-item-row\">\n                    {formatNumber(+item.value, 0)}\n                  </div>\n                </div>\n              ) : null,\n            )\n          ) : (\n            <div className=\"top-addresses-half-table-error\">Addresses not found</div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"top-addresses-half\">\n        <div className=\"top-addresses-half-title\">\n          <UserIcon />\n          <div>\n            Top Addresses by Volume <span>(All Time)</span>\n          </div>\n        </div>\n        <div className=\"top-addresses-half-table\">\n          <div className=\"top-addresses-half-table-head\">\n            <div className=\"top-addresses-half-table-head-row\">RANK</div>\n            <div className=\"top-addresses-half-table-head-row\">USER</div>\n            <div className=\"top-addresses-half-table-head-row\">VOLUME</div>\n          </div>\n\n          {isErrorTopAddressesNotional ? (\n            <div className=\"top-addresses-half-table-error\">Failed to get top addresses</div>\n          ) : isLoadingTopAddressesNotional ? (\n            LOADING_ARRAY.map((item, idx) => (\n              <div key={`itemNot-${idx}`} className=\"top-addresses-half-table-item\">\n                <div className=\"loading\" />\n              </div>\n            ))\n          ) : topAddressesNotional?.length > 0 ? (\n            topAddressesNotional?.map((item, idx) =>\n              idx < 10 ? (\n                <div key={`itemNot-${idx}`} className=\"top-addresses-half-table-item\">\n                  <div className=\"top-addresses-half-table-item-row\">{idx + 1}</div>\n\n                  <div className=\"top-addresses-half-table-item-row\">\n                    <TruncateText containerWidth={250} text={item.fromAddress.toUpperCase()} />\n                    <CopyToClipboard toCopy={item.fromAddress}>\n                      <CopyIcon style={{ color: \"grey\" }} />\n                    </CopyToClipboard>\n                  </div>\n                  <div className=\"top-addresses-half-table-item-row\">\n                    ${formatNumber(+item.value, 0)}\n                  </div>\n                </div>\n              ) : null,\n            )\n          ) : (\n            <div className=\"top-addresses-half-table-error\">Addresses not found</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { GetSummaryResult } from \"src/api/native-token-transfer/types\";\nimport { Loader, Tooltip } from \"src/components/atoms\";\nimport { AnalyticsIcon, InfoCircleIcon } from \"src/icons/generic\";\nimport { formatNumber } from \"src/utils/number\";\n\ninterface IMetricsProps {\n  isError: boolean;\n  isLoading: boolean;\n  summary: GetSummaryResult;\n}\n\nexport const Metrics = ({ isError, isLoading, summary }: IMetricsProps) => {\n  const renderValue = (value?: number | string) => (value ? formatNumber(+value) : \" -\");\n\n  return (\n    <div className=\"summary-metrics\">\n      <div className=\"summary-metrics-title\">\n        <AnalyticsIcon />\n        <h2 className=\"summary-metrics-title-text\">Summary Metrics</h2>\n      </div>\n\n      <div className=\"summary-metrics-container\">\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <>\n            <div className=\"summary-metrics-container-item\">\n              <div className=\"summary-metrics-container-item-label\">\n                Total value transferred\n                <MetricsTooltip text=\"Total USD value of all transfers made using this token.\" />\n              </div>\n              <h3 className=\"summary-metrics-container-item-value\">\n                ${isError ? \" -\" : renderValue(summary?.totalValueTokenTransferred)}\n              </h3>\n            </div>\n\n            <div className=\"summary-metrics-container-item\">\n              <div className=\"summary-metrics-container-item-label\">\n                Fully diluted valuation\n                <MetricsTooltip text=\"Current price x Total Supply. Theoretical market value if the entire supply was circulating.\" />\n              </div>\n              <h3 className=\"summary-metrics-container-item-value\">\n                {isError ? \" -\" : renderValue(summary?.fullyDilutedValuation)}\n              </h3>\n            </div>\n\n            <div className=\"summary-metrics-container-item\">\n              <div className=\"summary-metrics-container-item-label\">\n                Market Cap\n                <MetricsTooltip text=\"Current price x Circulating Supply. The current value of circulating tokens in USD.\" />\n              </div>\n              <h3 className=\"summary-metrics-container-item-value\">\n                ${isError ? \" -\" : renderValue(summary?.marketCap)}\n              </h3>\n            </div>\n\n            <div className=\"summary-metrics-container-item\">\n              <div className=\"summary-metrics-container-item-label\">\n                Circulating Supply\n                <MetricsTooltip text=\"The number of tokens currently circulating in the market and available to the public.\" />\n              </div>\n              <h3 className=\"summary-metrics-container-item-value\">\n                {isError ? \" -\" : renderValue(summary?.circulatingSupply)}\n              </h3>\n            </div>\n\n            <div className=\"summary-metrics-container-item\">\n              <div className=\"summary-metrics-container-item-label\">\n                Total token transfers\n                <MetricsTooltip text=\"Total number of transactions involving this token.\" />\n              </div>\n              <h3 className=\"summary-metrics-container-item-value\">\n                {isError ? \" -\" : renderValue(summary?.totalTokenTransferred)}\n              </h3>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst MetricsTooltip = ({ text }: { text: string }) => (\n  <Tooltip tooltip={text} type=\"info\">\n    <div className=\"summary-metrics-container-item-label-icon\">\n      <InfoCircleIcon />\n    </div>\n  </Tooltip>\n);\n","import ReactApexChart from \"react-apexcharts\";\nimport { useState, useMemo, useRef, useEffect } from \"react\";\nimport { GetTransferByTimeResult } from \"src/api/native-token-transfer/types\";\nimport { Loader, ToggleGroup, Select, Fullscreenable } from \"src/components/atoms\";\nimport { ErrorPlaceholder, WormholeScanBrand } from \"src/components/molecules\";\nimport { BREAKPOINTS } from \"src/consts\";\nimport {\n  ActivityIcon,\n  AnalyticsIcon,\n  ArrowRightIcon,\n  FullscreenIcon,\n  LinearIcon,\n  LogarithmicIcon,\n} from \"src/icons/generic\";\nimport { useWindowSize } from \"src/utils/hooks\";\nimport { formatNumber } from \"src/utils/number\";\nimport { getNextDate, toLocaleDate } from \"src/utils/date\";\nimport { changePathOpacity, formatterYAxis, updatePathStyles } from \"src/utils/apexChartUtils\";\nimport { TimeRange, ByType } from \"./index\";\nimport analytics from \"src/analytics\";\nimport { useParams } from \"react-router-dom\";\n\ntype TransfersOverTimeProps = {\n  transfers: GetTransferByTimeResult;\n  isLoading: boolean;\n  isError: boolean;\n  timeSpan: \"1h\" | \"1d\" | \"1mo\";\n  setTimeRange: (value: TimeRange) => void;\n  timeRange: TimeRange;\n  by: ByType;\n  setBy: (value: ByType) => void;\n  currentNetwork: \"Mainnet\" | \"Testnet\" | \"Devnet\";\n};\n\nconst TYPE_CHART_LIST = [\n  { label: <ActivityIcon width={24} />, value: \"area\", ariaLabel: \"Area\" },\n  { label: <AnalyticsIcon width={24} />, value: \"bar\", ariaLabel: \"Bar\" },\n];\n\nconst SCALE_CHART_LIST = [\n  { label: <LogarithmicIcon width={22} />, value: \"logarithmic\", ariaLabel: \"Logarithmic\" },\n  { label: <LinearIcon width={22} />, value: \"linear\", ariaLabel: \"Linear\" },\n];\n\nconst RANGE_LIST = [\n  { label: \"Last 24 hours\", value: \"1d\" },\n  { label: \"Last week\", value: \"1w\" },\n  { label: \"Last month\", value: \"1m\" },\n  { label: \"Last year\", value: \"1y\" },\n];\n\nconst BY_TYPE_LIST = [\n  { label: \"Transfers\", value: \"tx\" },\n  { label: \"Volume\", value: \"notional\" },\n];\n\nexport const TransfersOverTime = ({\n  transfers,\n  isLoading,\n  isError,\n  setTimeRange,\n  timeRange,\n  timeSpan,\n  by,\n  setBy,\n  currentNetwork,\n}: TransfersOverTimeProps) => {\n  const { width } = useWindowSize();\n  const isTablet = width >= BREAKPOINTS.tablet;\n  const isDesktop = width >= BREAKPOINTS.desktop;\n  const { symbol } = useParams();\n\n  const [scaleSelected, setScaleSelectedState] = useState<\"linear\" | \"logarithmic\">(\"linear\");\n  const setScaleSelected = (value: \"linear\" | \"logarithmic\", track: boolean) => {\n    setScaleSelectedState(value);\n\n    if (track) {\n      analytics.track(\"scaleSelected\", {\n        selected: value,\n        selectedType: \"transfersOverTime\",\n      });\n    }\n  };\n  const [chartSelected, setChartSelected] = useState<\"area\" | \"bar\">(\"bar\");\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    if (by === \"tx\") {\n      setScaleSelected(\"linear\", false);\n    }\n  }, [by]);\n\n  const series = useMemo(() => {\n    if (!transfers || transfers.length === 0) return [];\n\n    return [\n      {\n        name: `${symbol} Token Transfers`,\n        color: \"var(--color-lime)\",\n        totalValue: transfers.reduce((acc, item) => acc + +item.value, 0),\n        data: transfers.map(item => ({\n          x: item.time,\n          to: getNextDate(item.time, timeSpan),\n          y: +item.value,\n        })),\n      },\n    ];\n  }, [symbol, timeSpan, transfers]);\n\n  const formatDate = (date: Date) => {\n    if (timeSpan === \"1h\") {\n      return date.toLocaleString(\"en-GB\", { hour: \"2-digit\", minute: \"2-digit\" });\n    }\n    if (timeSpan === \"1d\") {\n      return date.toLocaleString(\"en-GB\", { day: \"2-digit\", month: \"short\" }).toUpperCase();\n    }\n    if (timeSpan === \"1mo\") {\n      return date.toLocaleString(\"en-GB\", { month: \"short\", year: \"2-digit\" }).toUpperCase();\n    }\n    // Default format for other cases\n    return date.toLocaleString(\"en-GB\", { day: \"2-digit\", month: \"short\", year: \"2-digit\" });\n  };\n\n  const fullscreenBtnRef = useRef(null);\n\n  const timeRangeData = series?.[0]?.data || [];\n  const fromDateFormatted = toLocaleDate(timeRangeData[0]?.x);\n  const toDateFormatted = toLocaleDate(timeRangeData[timeRangeData.length - 1]?.to);\n\n  return (\n    <Fullscreenable\n      className=\"transfers-over-time\"\n      buttonRef={fullscreenBtnRef}\n      itemName=\"transfersOverTime\"\n    >\n      <div className=\"transfers-over-time-header\">\n        <h3 className=\"transfers-over-time-title\">\n          <ActivityIcon />\n          <span>Cross-Chain {symbol} Token Transfers Over Time</span>\n          <div className=\"transfers-over-time-title-fullscreen\" ref={fullscreenBtnRef}>\n            <FullscreenIcon width={20} />\n          </div>\n        </h3>\n      </div>\n\n      <div className=\"transfers-over-time-container\">\n        <div className=\"transfers-over-time-container-chart\" ref={chartRef}>\n          <div className=\"transfers-over-time-filters\">\n            <div className=\"transfers-over-time-select-range\">\n              <Select\n                name=\"timeRange\"\n                value={timeRange}\n                onValueChange={value => {\n                  setTimeRange(value);\n\n                  analytics.track(\"transfersOverTimeTimeRange\", {\n                    network: currentNetwork,\n                    selected: value.label,\n                  });\n                }}\n                items={RANGE_LIST}\n                ariaLabel=\"Select Time Range\"\n              />\n            </div>\n\n            <ToggleGroup\n              ariaLabel=\"Select data type\"\n              items={BY_TYPE_LIST}\n              onValueChange={value => {\n                setBy(value as ByType);\n\n                analytics.track(\"metricSelected\", {\n                  network: currentNetwork,\n                  selected: value,\n                  selectedType: \"transfersOverTime\",\n                });\n              }}\n              value={by}\n            />\n\n            <div className=\"transfers-over-time-toggles\">\n              {chartSelected === \"area\" && by === \"notional\" && (\n                <ToggleGroup\n                  ariaLabel=\"Select scale\"\n                  items={SCALE_CHART_LIST}\n                  onValueChange={value => setScaleSelected(value, true)}\n                  type=\"secondary\"\n                  value={scaleSelected}\n                />\n              )}\n\n              <ToggleGroup\n                ariaLabel=\"Select chart type\"\n                items={TYPE_CHART_LIST}\n                onValueChange={value => {\n                  setChartSelected(value as \"area\" | \"bar\");\n\n                  analytics.track(\"transfersOverTimeChartType\", {\n                    network: currentNetwork,\n                    selected: value,\n                  });\n                }}\n                type=\"secondary\"\n                value={chartSelected}\n              />\n            </div>\n          </div>\n\n          {isError ? (\n            <ErrorPlaceholder />\n          ) : isLoading ? (\n            <Loader />\n          ) : (\n            <>\n              <WormholeScanBrand />\n\n              <div className=\"transfers-over-time-filters-legends\">\n                <div className=\"transfers-over-time-filters-legends-total\">\n                  <span>\n                    {timeRange.value === \"1d\"\n                      ? \"Daily\"\n                      : timeRange.value === \"1w\"\n                      ? \"Weekly\"\n                      : timeRange.value === \"1m\"\n                      ? \"Monthly\"\n                      : timeRange.value === \"1y\"\n                      ? \"Yearly\"\n                      : timeRange.value === \"custom\"\n                      ? \"\"\n                      : \"All Time\"}{\" \"}\n                    Total {by === \"tx\" ? \"Transfers\" : \"Volume\"}:\n                  </span>\n                  <p>\n                    {by === \"tx\" ? \"\" : \"$\"}\n                    {series?.[0]?.totalValue ? formatNumber(series[0].totalValue, 0) : 0}\n                  </p>\n                </div>\n\n                <div className=\"transfers-over-time-filters-legends-total\">\n                  <span>\n                    {fromDateFormatted && toDateFormatted && (\n                      <>\n                        {fromDateFormatted}\n                        <ArrowRightIcon />\n                        {toDateFormatted}\n                      </>\n                    )}\n                  </span>\n                </div>\n              </div>\n\n              <ReactApexChart\n                key={chartSelected}\n                series={series}\n                type={chartSelected}\n                height={isDesktop ? 360 : 300}\n                options={{\n                  chart: {\n                    animations: { enabled: true },\n                    events:\n                      chartSelected === \"bar\"\n                        ? {\n                            mouseLeave: () => {\n                              changePathOpacity({ ref: chartRef, opacity: 1 });\n                            },\n                            mouseMove(e, chart, options) {\n                              if (options.dataPointIndex < 0) {\n                                changePathOpacity({\n                                  ref: chartRef,\n                                  opacity: 1,\n                                });\n                              }\n                            },\n                          }\n                        : {},\n                    toolbar: { show: false },\n                    zoom: { enabled: false },\n                    stacked: chartSelected === \"bar\",\n                  },\n                  dataLabels: { enabled: false },\n                  grid: {\n                    borderColor: \"var(--color-gray-900)\",\n                    strokeDashArray: 6,\n                    xaxis: {\n                      lines: { show: false },\n                    },\n                    yaxis: {\n                      lines: { show: true },\n                    },\n                    padding: {\n                      top: isDesktop ? 16 : 0,\n                    },\n                  },\n                  states: {\n                    hover: {\n                      filter: {\n                        type: \"none\",\n                      },\n                    },\n                    active: {\n                      filter: {\n                        type: \"none\",\n                      },\n                    },\n                  },\n                  stroke: {\n                    curve: \"smooth\",\n                    width: chartSelected === \"area\" ? 2 : 0,\n                    dashArray: 0,\n                  },\n                  fill: {\n                    type: chartSelected === \"area\" ? \"gradient\" : \"solid\",\n                    gradient: {\n                      type: \"vertical\",\n                      shadeIntensity: 0,\n                      opacityFrom: 0.4,\n                      opacityTo: 0,\n                      stops: [0, 100],\n                    },\n                  },\n                  xaxis: {\n                    axisBorder: { show: true, strokeWidth: 4, color: \"var(--color-gray-10)\" },\n                    axisTicks: { show: false },\n                    crosshairs: {\n                      position: \"front\",\n                    },\n                    tickAmount: isDesktop ? 6 : isTablet ? 4 : 3,\n                    labels: {\n                      rotate: 0,\n                      formatter: value => {\n                        const date = new Date(value);\n                        return formatDate(date);\n                      },\n                      hideOverlappingLabels: true,\n                      style: {\n                        colors: \"var(--color-gray-400)\",\n                        fontFamily: \"Roboto Mono, Roboto, sans-serif\",\n                        fontSize: \"12px\",\n                        fontWeight: 400,\n                      },\n                    },\n                    tooltip: { enabled: false },\n                    offsetX: 0,\n                  },\n                  yaxis: {\n                    labels: {\n                      offsetX: -8,\n                      formatter: formatterYAxis,\n                      style: {\n                        colors: \"var(--color-gray-400)\",\n                        fontFamily: \"Roboto Mono, Roboto, sans-serif\",\n                        fontSize: \"12px\",\n                        fontWeight: 400,\n                      },\n                    },\n                    opposite: true,\n                    logarithmic: scaleSelected === \"logarithmic\" && chartSelected === \"area\",\n                    forceNiceScale: scaleSelected === \"logarithmic\" && chartSelected === \"area\",\n                  },\n                  tooltip: {\n                    custom: ({ seriesIndex, dataPointIndex, w }) => {\n                      const data = w.config.series[seriesIndex].data[dataPointIndex];\n\n                      if (chartSelected === \"bar\") {\n                        updatePathStyles({ chartRef, dataPointIndex });\n                      }\n\n                      return `\n                        <div class=\"transfers-over-time-container-chart-tooltip\">\n                          <div class=\"transfers-over-time-container-chart-tooltip-date\">\n                            <p>\n                              From:\n                              ${new Date(data.x).toLocaleString(\"en-GB\", {\n                                hour: \"2-digit\",\n                                minute: \"2-digit\",\n                              })},\n                              ${new Date(data.x).toLocaleString(\"en-GB\", {\n                                day: \"2-digit\",\n                                month: \"long\",\n                                year: \"numeric\",\n                              })}\n                            </p>\n                            <p>\n                              To:\n                              ${new Date(data.to).toLocaleString(\"en-GB\", {\n                                hour: \"2-digit\",\n                                minute: \"2-digit\",\n                              })},\n                              ${new Date(data.to).toLocaleString(\"en-GB\", {\n                                day: \"2-digit\",\n                                month: \"long\",\n                                year: \"numeric\",\n                              })}\n                            </p>\n                          </div>\n                          <div class=\"transfers-over-time-container-chart-tooltip-amount\">\n                            ${\n                              by === \"notional\"\n                                ? `Volume: <span>$${formatNumber(\n                                    data.y,\n                                    data.y > 10000 ? 0 : 2,\n                                  )}</span>`\n                                : `Transfers: <span>${formatNumber(data.y)}</span>`\n                            }\n                          </div>\n                        </div>\n                      `;\n                    },\n                    intersect: false,\n                    shared: true,\n                  },\n                }}\n              />\n            </>\n          )}\n        </div>\n      </div>\n    </Fullscreenable>\n  );\n};\n","import { Column } from \"react-table\";\nimport { ChainId, chainIdToChain } from \"@wormhole-foundation/sdk\";\nimport { GetOperationsOutput } from \"src/api/guardian-network/types\";\nimport { SwapVerticalIcon, CopyIcon } from \"src/icons/generic\";\nimport { useEnvironment } from \"src/context/EnvironmentContext\";\nimport { useNavigateCustom, useWindowSize } from \"src/utils/hooks\";\nimport { BlockchainIcon, Tooltip, NavLink } from \"src/components/atoms\";\nimport { CopyToClipboard, StatusBadge } from \"src/components/molecules\";\nimport { Table } from \"src/components/organisms\";\nimport { timeAgo } from \"src/utils/date\";\nimport { formatNumber } from \"src/utils/number\";\nimport { Environment } from \"src/utils/environment\";\nimport { getExplorerLink } from \"src/utils/wormhole\";\nimport { shortAddress, parseTx } from \"src/utils/crypto\";\nimport { BREAKPOINTS, NTT_APP_ID } from \"src/consts\";\nimport analytics from \"src/analytics\";\n\ninterface IRecentTransactionsProps {\n  isError: boolean;\n  isLoading: boolean;\n  recentTransactions: GetOperationsOutput[];\n  tokenIcon: string;\n}\n\nconst columnsRecentTransactions: Column[] | any = [\n  {\n    Header: \"STATUS\",\n    accessor: \"status\",\n  },\n  {\n    Header: \"TX HASH\",\n    accessor: \"txHash\",\n  },\n  {\n    Header: \"FROM\",\n    accessor: \"from\",\n  },\n  {\n    Header: \"TO\",\n    accessor: \"to\",\n  },\n  {\n    Header: \"AMOUNT\",\n    accessor: \"amount\",\n  },\n  {\n    Header: \"TIME\",\n    accessor: \"time\",\n  },\n];\n\nexport const RecentTransactions = ({\n  isError,\n  isLoading,\n  recentTransactions,\n  tokenIcon,\n}: IRecentTransactionsProps) => {\n  const navigate = useNavigateCustom();\n  const { environment } = useEnvironment();\n  const { width } = useWindowSize();\n  const isDesktop = width >= BREAKPOINTS.desktop;\n\n  const stopPropagation = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    e.stopPropagation();\n  };\n\n  const renderAddress = (data: GetOperationsOutput, isFrom: boolean) => {\n    const chainId = isFrom\n      ? data.sourceChain?.chainId\n      : data.content?.standarizedProperties?.toChain;\n    const address = isFrom\n      ? data.sourceChain?.from\n      : data.content?.standarizedProperties?.toAddress;\n\n    if (!chainId || !address) return null;\n\n    return (\n      <div className=\"recent-transactions-table-item-container\">\n        <Tooltip tooltip={<div>{chainIdToChain(chainId)}</div>} maxWidth={false} type=\"info\">\n          <div>\n            <BlockchainIcon chainId={chainId} network={environment.network} />\n          </div>\n        </Tooltip>\n        <a\n          href={getExplorerLink({\n            network: environment.network,\n            chainId,\n            value: address,\n            base: \"address\",\n            isNativeAddress: true,\n          })}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          onClick={stopPropagation}\n        >\n          {shortAddress(address).toUpperCase()}\n        </a>\n        <CopyToClipboard toCopy={address}>\n          <CopyIcon />\n        </CopyToClipboard>\n      </div>\n    );\n  };\n\n  const parsedRecentTxsData =\n    recentTransactions?.map(data => ({\n      txHashString: data.sourceChain.transaction.txHash,\n      status: (\n        <div className=\"recent-transactions-table-item\">\n          <h4>STATUS</h4>\n\n          <div className=\"recent-transactions-table-item-container\">\n            <StatusBadge size=\"responsive\" status={data.status} />\n          </div>\n        </div>\n      ),\n      txHash: (\n        <div className=\"recent-transactions-table-item\">\n          <h4>TX HASH</h4>\n\n          <div className=\"recent-transactions-table-item-container\">\n            <NavLink\n              to={`/tx/${parseTx({\n                value: data.sourceChain.transaction.txHash,\n                chainId: data.sourceChain?.chainId as ChainId,\n              })}`}\n              onClick={stopPropagation}\n            >\n              {shortAddress(data.sourceChain.transaction.txHash).toUpperCase()}\n            </NavLink>\n            <CopyToClipboard toCopy={data.sourceChain.transaction.txHash}>\n              <CopyIcon />\n            </CopyToClipboard>\n          </div>\n        </div>\n      ),\n      from: (\n        <div className=\"recent-transactions-table-item\">\n          <h4>FROM</h4>\n\n          {renderAddress(data, true)}\n        </div>\n      ),\n      to: (\n        <div className=\"recent-transactions-table-item\">\n          <h4>TO</h4>\n\n          {renderAddress(data, false)}\n        </div>\n      ),\n      amount: (\n        <div className=\"recent-transactions-table-item\">\n          <h4>AMOUNT</h4>\n\n          <div className=\"recent-transactions-table-item-container amount\">\n            <span>\n              {formatNumber(\n                data?.data?.tokenAmount\n                  ? +data?.data?.tokenAmount\n                  : +data?.content?.payload?.parsedPayload?.nttMessage?.trimmedAmount?.amount /\n                      1000000 ||\n                      +data?.content?.payload?.nttMessage?.trimmedAmount?.amount / 1000000,\n              )}\n            </span>\n            {tokenIcon && (\n              <img src={tokenIcon} alt={`${data?.data?.symbol} Token`} width=\"16\" height=\"16\" />\n            )}\n            {data?.data?.usdAmount && (\n              <span className=\"usd\">(${formatNumber(+data?.data?.usdAmount, 2)})</span>\n            )}\n          </div>\n        </div>\n      ),\n      time: (\n        <div className=\"recent-transactions-table-item\">\n          <h4>TIME</h4>\n\n          <div className=\"recent-transactions-table-item-container time\">\n            {timeAgo(new Date(data.sourceChain?.timestamp))}\n          </div>\n        </div>\n      ),\n      viewDetails: data?.sourceChain?.transaction?.txHash && (\n        <div className=\"recent-transactions-table-item\">\n          <NavLink\n            className=\"recent-transactions-table-item-btn\"\n            to={`/tx/${parseTx({\n              value: data.sourceChain.transaction.txHash,\n              chainId: data.sourceChain?.chainId as ChainId,\n            })}`}\n            onClick={stopPropagation}\n          >\n            View details\n          </NavLink>\n        </div>\n      ),\n    })) || [];\n\n  if (isError) return null;\n\n  return (\n    <div className=\"recent-transactions\">\n      <div className=\"recent-transactions-title\">\n        <SwapVerticalIcon />\n        <div>Recent Transactions</div>\n        <ViewMore environment={environment}>View All</ViewMore>\n      </div>\n\n      <div className=\"recent-transactions-table\">\n        <Table\n          columns={\n            isDesktop\n              ? columnsRecentTransactions\n              : [\n                  ...columnsRecentTransactions,\n                  {\n                    Header: \"View Details\",\n                    accessor: \"viewDetails\",\n                  },\n                ]\n          }\n          data={parsedRecentTxsData}\n          emptyMessage={\n            <>\n              No recent transaction found; take a look at&nbsp;\n              <ViewMore environment={environment}>All Transactions</ViewMore>.\n            </>\n          }\n          isLoading={isLoading}\n          numberOfColumns={6}\n          numberOfRows={7}\n          onRowClick={tx => {\n            if (isDesktop) {\n              return tx.txHash ? navigate(`/tx/${tx.txHashString}`) : null;\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst ViewMore = ({\n  environment,\n  children,\n}: {\n  environment: Environment;\n  children: React.ReactNode;\n}) => {\n  return (\n    <a\n      onClick={() => {\n        window.scrollTo(0, 0);\n\n        analytics.track(\"viewMore\", {\n          network: environment.network,\n          selected: \"NTT Token Recent Transactions\",\n        });\n      }}\n      href={`#/txs?appId=${NTT_APP_ID}`}\n    >\n      {children}\n    </a>\n  );\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","__globalThis","parcelHelpers","defineInteropFlag","_jsxRuntime","_react","_reactRouterDom","_reactQuery","_sdk","_client","_environmentContext","_baseLayout","_atoms","_consts","_api","_txs","_analytics","_analyticsDefault","interopDefault","_summary","_byChain","_topHolders","_topAddresses","_metrics","_transfersOverTime","_recentTransactions","default","environment","useEnvironment","currentNetwork","network","isMainnet","symbol","coingecko_id","useParams","searchParams","setSearchParams","useSearchParams","activeView","setActiveView","useState","timeRange","setTimeRange","label","value","by","setBy","isUSDCe","startDate","endDate","useMemo","end","Date","start","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","data","chainLimitsData","isLoading","isLoadingLimits","useQuery","getClient","governor","getLimit","enabled","recentTransactions","isError","isErrorRecentTransactions","isFetching","isFetchingRecentTransactions","page","transactions","filteredTransactions","guardianNetwork","getOperations","appId","NTT_APP_ID","pagination","pageSize","sortOrder","Order","DESC","filter","tx","toUpperCase","content","standarizedProperties","fromChain","chainToChainId","toChain","map","emitterChain","payload","appIds","stdFromChain","stdToChain","globalToChainId","targetChain","chainId","parsedPayload","fromChainOrig","attributeType","sourceChain","attribute","type","attributeValue","originChainId","chain","limitDataForChain","find","ETH_LIMIT","isBigTransaction","transactionLimit","maxTransactionSize","Number","usdAmount","isDailyLimitExceeded","availableNotional","status","transaction","txHash","includes","CCTP_MANUAL_APP_ID","CCTP_XR_APP_ID","vaa","raw","canWeGetDestinationTx","slice","transfersByTime","isErrorTransfersByTime","isFetchingTransfersByTime","timeSpan","nttApi","getNttTransferByTime","from","toISOString","to","refetchOnWindowFocus","summary","isErrorSummary","isFetchingSummary","getNttSummary","platforms","activityTx","isErrorActivityTx","isFetchingActivityTx","activity","getNttActivity","sort","a","b","activityNotional","isErrorActivityNotional","isFetchingActivityNotional","topHolders","isErrorTopHolders","isFetchingTopHolders","getNttTopHolder","topAddressesNotional","isErrorTopAddressesNotional","isFetchingTopAddressesNotional","getNttTopAddress","topAddressesTx","isErrorTopAddressesTx","isFetchingTopAddressesTx","useEffect","title","jsx","BaseLayout","children","jsxs","className","Summary","ToggleGroup","ariaLabel","items","onValueChange","prev","set","Fragment","Metrics","RecentTransactions","tokenIcon","image","small","TransfersOverTime","transfers","ByChain","isLoadingActivityNotional","isLoadingActivityTx","TopHolders","TopAddresses","isLoadingTopAddressesNotional","isLoadingTopAddressesTx","export","_reactFlipNumbers","_reactFlipNumbersDefault","_generic","_number","_wormhole","chainNameMap","chainNameMapUnsupported","energi","polkadot","stellar","tron","zksync","large","links","websiteLink","homepage","twitterLink","twitter_screen_name","telegramLink","telegram_channel_identifier","discordLink","chat_url","githubLink","repos_url","github","dataTokenSummary","isFetchingTokenPrice","isErrorTokenSummary","refetchInterval","NavLink","ArrowRightIcon","Loader","alt","height","loading","src","width","ContractsList","TokenPrice","href","rel","target","LinkIcon","TwitterIcon","TelegramIcon","DiscordIcon","GithubIcon","entries","contract","index","MAX_CONTRACTS","chainCapitalized","charAt","chainIdUnsupported","ChainItem","Tooltip","side","tooltip","InfoCircleIcon","getExplorerLink","base","BlockchainIcon","price","color","background","play","perspective","numbers","formatNumber","toFixed","numberStyle","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","nonNumberStyle","LOADING_ARRAY","Array","fill","GlobeIcon","item","idx","chainIdToChain","destinationChain","_string","_molecules","_hooks","useWindowSize","isDesktopDesign","UserIcon","_","TruncateText","containerWidth","text","address","CopyToClipboard","toCopy","CopyIcon","style","volume","isNativeAddress","fromAddress","renderValue","AnalyticsIcon","MetricsTooltip","totalValueTokenTransferred","fullyDilutedValuation","marketCap","circulatingSupply","totalTokenTransferred","_reactApexcharts","_reactApexchartsDefault","_date","_apexChartUtils","TYPE_CHART_LIST","ActivityIcon","SCALE_CHART_LIST","LogarithmicIcon","LinearIcon","RANGE_LIST","BY_TYPE_LIST","isTablet","BREAKPOINTS","tablet","isDesktop","desktop","scaleSelected","setScaleSelectedState","setScaleSelected","track","selected","selectedType","chartSelected","setChartSelected","chartRef","useRef","series","totalValue","reduce","acc","time","getNextDate","y","formatDate","date","toLocaleString","hour","minute","day","month","year","fullscreenBtnRef","timeRangeData","fromDateFormatted","toLocaleDate","toDateFormatted","Fullscreenable","buttonRef","itemName","ref","FullscreenIcon","Select","ErrorPlaceholder","WormholeScanBrand","options","chart","animations","events","mouseLeave","changePathOpacity","opacity","mouseMove","e","dataPointIndex","toolbar","show","zoom","stacked","dataLabels","grid","borderColor","strokeDashArray","xaxis","lines","yaxis","padding","top","states","hover","active","stroke","curve","dashArray","gradient","shadeIntensity","opacityFrom","opacityTo","stops","axisBorder","strokeWidth","axisTicks","crosshairs","position","tickAmount","labels","rotate","formatter","hideOverlappingLabels","colors","offsetX","formatterYAxis","opposite","logarithmic","forceNiceScale","custom","seriesIndex","w","config","updatePathStyles","intersect","shared","_organisms","_crypto","columnsRecentTransactions","Header","accessor","navigate","useNavigateCustom","stopPropagation","renderAddress","isFrom","toAddress","maxWidth","onClick","shortAddress","parsedRecentTxsData","txHashString","StatusBadge","size","parseTx","amount","tokenAmount","nttMessage","trimmedAmount","timeAgo","timestamp","viewDetails","SwapVerticalIcon","ViewMore","Table","columns","emptyMessage","numberOfColumns","numberOfRows","onRowClick","scrollTo"],"version":3,"file":"NTTToken.3ac69b4d.js.map"}